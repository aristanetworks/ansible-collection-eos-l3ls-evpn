# Testing duplicate VRF definitions according to the following rules documented in the schema.
# Also see eos_designs_negative_unit_tests for testing of the raised errors.

# It is recommended to only define a VRF in one Tenant. If the same VRF name is used across multiple tenants and those tenants
# are accepted by `filter.tenants` on the node, any object set under the duplicate VRFs must either be unique or be an exact match.

type: l3leaf
l3leaf:
  defaults:
    loopback_ipv4_pool: 192.168.255.0/24
    vtep_loopback_ipv4_pool: 192.168.254.0/24
    virtual_router_mac_address: 00:dc:00:00:00:0a
  nodes:
    - name: varpv6
      id: 101
      bgp_as: 101
      filter:
        tenants:
          - TENANT1

tenants:
  - name: TENANT1
    mac_vrf_vni_base: 10000
    vrfs:
      - name: VRF1
        vrf_id: 1
        svis:
          - id: 100
            enabled: true
            name: VARPv6_configured_1
            ipv6_virtual_router_addresses:
              - fe80::1
            nodes:
              - node: varpv6
                ipv6_address: 2000:1000::2/64
          - id: 200
            enabled: true
            name: VARPv6_not_configured_2
            ipv6_virtual_router_addresses:
              - fe80::1
          - id: 300
            enabled: true
            name: VARPv6_configured_2
            ipv6_enable: true
            ipv6_virtual_router_addresses:
              - fe80::1
          - id: 400
            enabled: true
            name: VARPv6_not_configured_2
            ipv6_enable: false
            ipv6_virtual_router_addresses:
              - fe80::1
