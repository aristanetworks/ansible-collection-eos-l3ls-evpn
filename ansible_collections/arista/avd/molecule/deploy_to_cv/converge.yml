---
- name: Converge - Configuration deployment with CVP
  hosts: localhost
  connection: local
  gather_facts: false
  vars:
    # cv_server: staticstudio-1-cfec4cc2-eos.topo.testdrive.arista.com
    cv_server: www.cv-staging.corp.arista.io
    # token: "{{ lookup('file', playbook_dir ~ '/token-cvaas.tok')}}"
    token: "{{ lookup('env', 'CVAAS_TOKEN' }}"
    ws_url: https://{{ cv_server }}/api/v3/services/arista.configlet.v1.ConfigletService/GetOne
    cc_url: https://{{ cv_server }}/api/v3/services/arista.changecontrol.v1.ChangeControlService/GetOne
    tag_url: https://{{ cv_server }}/api/v3/services/arista.tag.v2.TagAssignmentService/GetOne
    configuration_dir: "{{ playbook_dir }}/intended/configs"
    structured_config_dir: "{{ playbook_dir }}/intended/structured_configs"
    strict_configuration_dir: "{{ playbook_dir }}/intended/configs/strict_tags"
    strict_structured_config_dir: "{{ playbook_dir }}/intended/structured_configs/strict_tags"
    value_configuration_dir: "{{ playbook_dir }}/intended/configs/change_tags"
    value_structured_config_dir: "{{ playbook_dir }}/intended/structured_configs/change_tags"
    intended_tag_device: s1-leaf1
    intended_tags: "{{ lookup('file', structured_config_dir ~ '/' ~ intended_tag_device ~ '.yml')|from_yaml }}"
    # intended_strict_tag_device: s1-leaf1-strict_tags
    intended_strict_tags: "{{ lookup('file', strict_structured_config_dir ~ '/' ~ intended_tag_device ~ '.yml')|from_yaml }}"
    intended_value_tags: "{{ lookup('file', value_structured_config_dir ~ '/' ~ intended_tag_device ~ '.yml')|from_yaml }}"


  tasks:
    - name: Generate random string
      set_fact:
        r: "{{ lookup('password', '/dev/null chars=ascii_lowercase,digits length=4') }}"
      run_once: true

    - name: set facts
      set_fact:
        ws_name: avd-static-studio-{{ r }}
        ws_description: sample description
        ws_req_state: submitted
        ws_force: true
        cc_name: cc_avd_studio-{{ r }}
        cc_requested_state: running
        cc_desctiption: sample description
      run_once: true

    - name: Test = Provision CVP with AVD configuration
      run_once: true
      delegate_to: localhost
      arista.avd.deploy_to_cv:
        configuration_dir: "{{ configuration_dir }}"
        structured_config_dir: "{{ structured_config_dir }}"
        # structured_config_suffix: "yml"
        # device_list: "{{ ansible_play_hosts }}"
        device_list: ["s1-leaf1", "s1-leaf2", "s1-leaf3", "s1-leaf4", "s1-spine1", "s1-spine2"]
        strict_tags: true
        # skip_strict_devices: false
        # configlet_name_template: "AVD-${hostname}"
        cv_servers: [ '{{ cv_server }}' ]
        cv_token: '{{ token }}'
        # cv_verify_certs: True
        workspace:
          name: '{{ ws_name }}'
          description: '{{ ws_description }}'
          id: '{{ ws_name }}'
          requested_state: '{{ ws_req_state }}'
          force: '{{ ws_force }}'
        change_control:
          name: '{{ cc_name }}'
          description: '{{ cc_desctiption }}'
          requested_state: '{{ cc_requested_state }}'
        # timeouts:
        #   workspace_build_timeout: 300.0
        #   change_control_creation_timeout: 300.0
        return_details: true
      register: CVP_RESULTS

    - name: 'Display CVP result'
      run_once: true
      debug:
        msg: '{{CVP_RESULTS}}'

    - name: check CVP returns
      vars:
        cc_id: Workspace-{{ ws_name }}
      ansible.builtin.assert:
        that:
          # workspace
          - CVP_RESULTS.workspace.name == ws_name
          - CVP_RESULTS.workspace.final_state == CVP_RESULTS.workspace.requested_state
          - CVP_RESULTS.workspace.final_state
          # errors and warnings
          - CVP_RESULTS.errors == []
          # tags
          - CVP_RESULTS.deployed_device_tags != []
          - CVP_RESULTS.deployed_interface_tags != []
          # Change control
          - CVP_RESULTS.change_control.id == cc_id
          - CVP_RESULTS.change_control.name == cc_name
          - CVP_RESULTS.change_control.requested_state == cc_requested_state
          - CVP_RESULTS.change_control.description == cc_desctiption

    - name: check tags from output
      ansible.builtin.assert:
        that:
          - item.0.label == item.1.label
          - item.0.value == item.1.value
      loop: "{{ CVP_RESULTS.deployed_device_tags | zip(CVP_RESULTS.device_tags) | list }}"

    # WS asserts
    - name: get workspace information
      delegate_to: localhost
      run_once: true
      ansible.builtin.uri:
        url: '{{ ws_url }}'
        return_content: true
        validate_certs: false
        headers:
          Cookie: "access_token={{ token }}"
        method: POST
        body_format: json
        body:
          key:
            workspace_id: '{{ ws_name }}'
            configlet_id: '{{ item }}'
      loop:
        - "avd-s1-leaf1"
        - "avd-s1-leaf2"
        - "avd-s1-leaf3"
        - "avd-s1-leaf4"
      register: result

    # CC information
    - name: Validate CC state to completed
      delegate_to: localhost
      run_once: true
      ansible.builtin.uri:
        url: '{{ cc_url }}'
        return_content: true
        validate_certs: false
        headers:
          Cookie: "access_token={{ token }}"
        method: POST
        body_format: json
        body:
          key:
            id: Workspace-{{ ws_name }}
      register: CC_INFO
      until: CC_INFO.json[0].value.status == "CHANGE_CONTROL_STATUS_COMPLETED"
      retries: 5
      delay: 30

    - name: 'Set configlets facts'
      run_once: true
      vars:
        configs: ['{{ configuration_dir }}/s1-leaf1.cfg',
                  '{{ configuration_dir }}/s1-leaf2.cfg',
                  '{{ configuration_dir }}/s1-leaf3.cfg',
                  '{{ configuration_dir }}/s1-leaf4.cfg'
        ]
      set_fact:
        response_configlet: "{{ response_configlet | default({}) | combine({item.0.json[0].value.body | trim: item.1}) }}"
      loop: "{{ result.results | zip(configs) | list }}"

    - name: check configlets
      ansible.builtin.assert:
        that:
          - item.key  == lookup('file', item.value)
      loop: "{{ response_configlet | dict2items }}"

    - name: Get Device Tag information
      delegate_to: localhost
      run_once: true
      ansible.builtin.uri:
        url: '{{ tag_url }}'
        return_content: true
        validate_certs: false
        headers:
          Cookie: "access_token={{ token }}"
        method: POST
        body_format: json
        body:
          key:
            workspaceId: '{{ ws_name }}'
            elementType: 1
            label: "{{ item.name }}"
            value: "{{ item.value }}"
            deviceId: "{{ intended_tag_device }}"
      loop:
        "{{ intended_tags.metadata.cv_tags.device_tags }}"

    # # XXX: Assuming that there is only one interfaceTag per port
    - name: Get and verify Interface Tag information
      delegate_to: localhost
      run_once: true
      ansible.builtin.uri:
        url: '{{ tag_url }}'
        return_content: true
        validate_certs: false
        headers:
          Cookie: "access_token={{ token }}"
        method: POST
        body_format: json
        body:
          key:
            workspaceId: '{{ ws_name }}'
            elementType: 2
            label: "{{ item.tags[0].name }}"
            value: "{{ item.tags[0].value }}"
            deviceId: "{{ intended_tag_device }}"
            interfaceId: "{{ item.interface }}"
      loop:
        "{{ intended_tags.metadata.cv_tags.interface_tags }}"

    - name: Test Strict tags = Set tags
      run_once: true
      delegate_to: localhost
      vars:
        ws_name_strict: avd-static-studio-strict-{{ r }}
        ws_description_strict: sample description
        ws_req_state_strict: submitted
        ws_force_strict: true
        cc_name_strict: cc_avd_studio-strict-{{ r }}
        cc_requested_state_strict: running
        cc_desctiption_strict: sample description
      arista.avd.deploy_to_cv:
        configuration_dir: "{{ strict_configuration_dir }}"
        structured_config_dir: "{{ strict_structured_config_dir }}"
        device_list: ["s1-leaf1"]
        strict_tags: true
        cv_servers: [ '{{ cv_server }}' ]
        cv_token: '{{ token }}'
        workspace:
          name: '{{ ws_name_strict }}'
          description: '{{ ws_description_strict }}'
          id: '{{ ws_name_strict }}'
          requested_state: '{{ ws_req_state_strict }}'
          force: '{{ ws_force_strict }}'
        change_control:
          name: '{{ cc_name_strict }}'
          description: '{{ cc_desctiption_strict }}'
          requested_state: '{{ cc_requested_state_strict }}'
        return_details: true
      register: CVP_STRICT_TAGS_RESULTS

    - name: Get Strict Device Tag information
      delegate_to: localhost
      run_once: true
      ansible.builtin.uri:
        url: '{{ tag_url }}'
        return_content: true
        validate_certs: false
        headers:
          Cookie: "access_token={{ token }}"
        method: POST
        body_format: json
        body:
          key:
            workspaceId: '{{ ws_name }}'
            elementType: 1
            label: "{{ item.name }}"
            value: "{{ item.value }}"
            deviceId: "{{ intended_tag_device }}"
      loop:
        "{{ intended_strict_tags.metadata.cv_tags.device_tags }}"

    - name: Test tags = Value change
      run_once: true
      delegate_to: localhost
      vars:
        ws_name_value: avd-static-studio-tag-value-change-{{ r }}
        ws_description_value: sample description
        ws_req_state_value: submitted
        ws_force_value: true
        cc_name_value: cc_avd-static-studio-tag-value-change-{{ r }}
        cc_requested_state_value: running
        cc_desctiption_value: sample description
      arista.avd.deploy_to_cv:
        configuration_dir: "{{ value_configuration_dir }}"
        structured_config_dir: "{{ value_structured_config_dir }}"
        device_list: ["s1-leaf1"]
        strict_tags: true
        cv_servers: [ '{{ cv_server }}' ]
        cv_token: '{{ token }}'
        workspace:
          name: '{{ ws_name_value }}'
          description: '{{ ws_description_value }}'
          id: '{{ ws_name_value }}'
          requested_state: '{{ ws_req_state_value }}'
          force: '{{ ws_force_value }}'
        change_control:
          name: '{{ cc_name_value }}'
          description: '{{ cc_desctiption_value }}'
          requested_state: '{{ cc_requested_state_value }}'
        return_details: true
      register: CVP_VALUE_TAGS_RESULTS

    - name: Get Value Device Tag information
      delegate_to: localhost
      run_once: true
      vars:
        ws_name_value: avd-static-studio-tag-value-change-{{ r }}
      ansible.builtin.uri:
        url: '{{ tag_url }}'
        return_content: true
        validate_certs: false
        headers:
          Cookie: "access_token={{ token }}"
        method: POST
        body_format: json
        body:
          key:
            workspaceId: '{{ ws_name_value }}'
            elementType: 1
            label: "{{ item.name }}"
            value: "{{ item.value }}"
            deviceId: "{{ intended_tag_device }}"
      loop:
        "{{ intended_value_tags.metadata.cv_tags.device_tags }}"
