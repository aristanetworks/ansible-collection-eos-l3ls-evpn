{# j2lint: disable=V1 #}
{# AVD State Validation Report #}
{% set test_id = namespace(value=0) %}
{% for node in groups[fabric_name] | arista.avd.natural_sort %}
{# Hardware results - power supplies status #}
{%     if hostvars[node].power_supplies_results.results is arista.avd.defined and hostvars[node].power_supplies_results.skipped is not arista.avd.defined %}
{%         for result in hostvars[node].power_supplies_results.results %}
{%             set test_id.value = test_id.value + 1 %}
- {{ test_id.value }}:
  device: {{ node }}
  test_category: Hardware
  test_description: Power supply status
  test: Power supply {{ result.powerSupply.key }}
{%             if result.failed == false %}
  passed: true
{%             else %}
  passed: false
  failure_reason: {{ result.msg }}
{%             endif %}
{%         endfor %}
{%     endif %}
{# Hardware results - fan status (power supplies) #}
{%     if hostvars[node].fan_power_supplies_results.results is arista.avd.defined and hostvars[node].power_supplies_results.skipped is not arista.avd.defined %}
{%         for result in hostvars[node].power_supplies_results.results %}
{%             set test_id.value = test_id.value + 1 %}
- {{ test_id.value }}:
  device: {{ node }}
  test_category: Hardware
  test_description: Fan status (power supplies)
  test: {{ result.powerSupplySlot.label }}
{%             if result.failed == false %}
  passed: true
{%             else %}
  passed: false
  failure_reason: {{ result.msg }}
{%             endif %}
{%         endfor %}
{%     endif %}
{# Hardware results - fan status (fan tray) #}
{%     if hostvars[node].fan_tray_status_results.results is arista.avd.defined and hostvars[node].power_supplies_results.skipped is not arista.avd.defined %}
{%         for result in hostvars[node].power_supplies_results.results %}
{%             set test_id.value = test_id.value + 1 %}
- {{ test_id.value }}:
  device: {{ node }}
  test_category: Hardware
  test_description: Fan status (fan tray)
  test: Tray {{ result.fanTraySlot.label }}
{%             if result.failed == false %}
  passed: true
{%             else %}
  passed: false
  failure_reason: {{ result.msg }}
{%             endif %}
{%         endfor %}
{%     endif %}
{# Hardware results - temperature #}
{%     if hostvars[node].environment_temperature_results is arista.avd.defined %}
{%         set test_id.value = test_id.value + 1 %}
- {{ test_id.value }}:
  device: {{ node }}
  test_category: Hardware
  test_description: Temperature
  test: System temperature
{%         if hostvars[node].environment_temperature_results.failed == false %}
  passed: true
{%         else %}
  passed: false
  failure_reason: {{ hostvars[node].environment_temperature_results.msg }}
{%         endif %}
{%     endif %}
{# Hardware results - transceivers manufacturers #}
{%     if hostvars[node].transceiver_inventory_results.results is arista.avd.defined and hostvars[node].transceiver_inventory_results.skipped is not arista.avd.defined %}
{%         for result in hostvars[node].transceiver_inventory_results.results %}
{%             set test_id.value = test_id.value + 1 %}
- {{ test_id.value }}:
  device: {{ node }}
  test_category: Hardware
  test_description: Transceivers manufacturers
  test: Port {{ result.xcvrSlot.key }}
{%             if result.failed == false %}
  passed: true
{%             else %}
  passed: false
  failure_reason: {{ result.msg }}
{%             endif %}
{%         endfor %}
{%     endif %}
{# NTP Status Results #}
{%     if hostvars[node].ntp_status_results is arista.avd.defined and hostvars[node].ntp_status_results.skipped is not arista.avd.defined %}
{%         set test_id.value = test_id.value + 1 %}
- {{ test_id.value }}:
  device: {{ node }}
  test_category: NTP
  test_description: Synchronised with NTP server
  test: NTP
{%         if hostvars[node].ntp_status_results.failed == false %}
  passed: true
{%         else %}
  passed: false
  failure_reason: {{ hostvars[node].ntp_status_results.msg }}
{%         endif %}
{%     endif %}
{# Ethernet Interface State Results #}
{%     if hostvars[node].ethernet_interface_state_results.results is arista.avd.defined %}
{%         for result in hostvars[node].ethernet_interface_state_results.results %}
{%             set test_id.value = test_id.value + 1 %}
- {{ test_id.value }}:
  device: {{ node }}
  test_category: Interface State
  test_description: Ethernet Interface Status & Line Protocol == "up"
  test: {{ result.ethernet_interface.key }} - {{ result.ethernet_interface.value.description | arista.avd.default('') }}
{%             if result.failed == false %}
  passed: true
{%             else %}
  passed: false
  failure_reason: "{{ result.msg }}"
{%             endif %}
{%         endfor %}
{%     endif %}
{# Port-Channel Interface State Results #}
{%     if hostvars[node].port_channel_interface_state_results.results is arista.avd.defined %}
{%         for result in hostvars[node].port_channel_interface_state_results.results %}
{%             set test_id.value = test_id.value + 1 %}
- {{ test_id.value }}:
  device: {{ node }}
  test_category: Interface State
  test_description: Port-Channel Interface Status & Line Protocol == "up"
  test: {{ result.port_channel_interface.key }} - {{ result.port_channel_interface.value.description | arista.avd.default('') }}
{%             if result.failed == false %}
  passed: true
{%             else %}
  passed: false
  failure_reason: "{{ result.msg }}"
{%             endif %}
{%         endfor %}
{%     endif %}
{# Vlan Interface State Results #}
{%     if hostvars[node].vlan_interface_state_results.results is arista.avd.defined %}
{%         for result in hostvars[node].vlan_interface_state_results.results %}
{%             set test_id.value = test_id.value + 1 %}
- {{ test_id.value }}:
  device: {{ node }}
  test_category: Interface State
  test_description: Vlan Interface Status & Line Protocol == "up"
  test: {{ result.vlan_interface.key }} - {{ result.vlan_interface.value.description | arista.avd.default('') }}
{%             if result.failed == false %}
  passed: true
{%             else %}
  passed: false
  failure_reason: "{{ result.msg }}"
{%             endif %}
{%         endfor %}
{%     endif %}
{# Vxlan Interface State Results #}
{%     if hostvars[node].vxlan_interface_state_results is arista.avd.defined and hostvars[node].vxlan_interface_state_results.skipped is not arista.avd.defined %}
{%         set test_id.value = test_id.value + 1 %}
- {{ test_id.value }}:
  device: {{ node }}
  test_category: Interface State
  test_description: Vxlan Interface Status & Line Protocol == "up"
  test: Vxlan1
{%         if hostvars[node].vxlan_interface_state_results.failed == false %}
  passed: true
{%         else %}
  passed: false
  failure_reason: "{{ hostvars[node].vxlan_interface_state_results.msg }}"
{%         endif %}
{%     endif %}
{# Loopback Interface State Results #}
{%     if hostvars[node].loopback_interface_state_results.results is arista.avd.defined %}
{%         for result in hostvars[node].loopback_interface_state_results.results %}
{%             set test_id.value = test_id.value + 1 %}
- {{ test_id.value }}:
  device: {{ node }}
  test_category: Interface State
  test_description: Loopback Interface Status & Line Protocol == "up"
  test: {{ result.loopback_interface.key }} - {{ result.loopback_interface.value.description | arista.avd.default('') }}
{%             if result.failed == false %}
  passed: true
{%             else %}
  passed: false
  failure_reason: "{{ result.msg }}"
{%             endif %}
{%         endfor %}
{%     endif %}
{# LLDP Topology Results #}
{%     if hostvars[node].lldp_topology_results.results is arista.avd.defined %}
{%         for result in hostvars[node].lldp_topology_results.results %}
{%             if result.skipped is not arista.avd.defined %}
{%                 set test_id.value = test_id.value + 1 %}
- {{ test_id.value }}:
  device: {{ node }}
  test_category: LLDP Topology
  test_description: LLDP topology - validate peer and interface
  test: "local: {{ result.ethernet_interface.key }} - remote: {{ hostvars[node].ethernet_interfaces[result.ethernet_interface.key].peer }}_{{ hostvars[node].ethernet_interfaces[result.ethernet_interface.key].peer_interface }}"
{%                 if result.failed == false %}
  passed: true
{%                 else %}
  passed: false
  failure_reason: "{{ result.msg }}"
{%                 endif %}
{%             endif %}
{%         endfor %}
{%     endif %}
{# mlag_state_results Results #}
{# IP Reachability test - point-to-point links Results #}
{%     if hostvars[node].ip_reachability_results.results is arista.avd.defined %}
{%         for result in hostvars[node].ip_reachability_results.results %}
{%             set test_id.value = test_id.value + 1 %}
- {{ test_id.value }}:
  device: {{ node }}
  test_category: IP Reachability
  test_description: ip reachability test p2p links
  test: "Source: {{ node }}_{{ result.ip_reachability_test.ethernet_interface.key }} - Destination: {{ result.ip_reachability_test.ethernet_interface.value.peer }}_{{ result.ip_reachability_test.ethernet_interface.value.peer_interface }}"
{# test missing - not working? #}
{%         endfor %}
{%     endif %}
{# AirBGP #}
{%     if hostvars[node].arbgp_state_results is arista.avd.defined and hostvars[node].arbgp_state_results.skipped is not arista.avd.defined %}
{%         set test_id.value = test_id.value + 1 %}
- {{ test_id.value }}:
  device: {{ node }}
  test_category: BGP
  test_description: ArBGP is configured and operating
  test: ArBGP
{%         if hostvars[node].arbgp_state_results.failed == false %}
  passed: true
{%         else %}
  passed: false
  failure_reason: "{{ hostvars[node].arbgp_state_results.msg }}"
{%         endif %}
{%     endif %}
{# ip bgp neighbors peer state type: "ipv4" Results #}
{%     if hostvars[node].ip_bgp_peer_state_results.results is arista.avd.defined %}
{%         for result in hostvars[node].ip_bgp_peer_state_results.results %}
{%             if result.skipped is not arista.avd.defined %}
{%                 set test_id.value = test_id.value + 1 %}
- {{ test_id.value }}:
  device: {{ node }}
  test_category: BGP
  test_description: ip bgp peer state established (ipv4)
  test: "bgp_neighbor: {{ result.bgp_neighbor.key }}"
{# test missing - not working? #}
{%             endif %}
{%         endfor %}
{%     endif %}
{# bgp evpn neighbors peer state type: "evpn" Results #}
{%     if hostvars[node].bgp_evpn_peer_state_results.results is arista.avd.defined %}
{%         for result in hostvars[node].bgp_evpn_peer_state_results.results %}
{%             set test_id.value = test_id.value + 1 %}
- {{ test_id.value }}:
  device: {{ node }}
  test_category: BGP
  test_description: bgp evpn peer state established (evpn)
  test: "bgp_neighbor: {{ result.bgp_neighbor.key }}"
{# test missing - not working? #}
{%         endfor %}
{%     endif %}
{# Reload Cause Results #}
{%     if hostvars[node].reload_cause_results is arista.avd.defined and hostvars[node].reload_cause_results.skipped is not arista.avd.defined %}
{%         set test_id.value = test_id.value + 1 %}
- {{ test_id.value }}:
  device: {{ node }}
  test_category: Reload Cause
  test_description: Reload Cause - Reload requested by the user
  test: Reload Cause
{%         if hostvars[node].reload_cause_results.failed %}
  passed: true
{%         else %}
  passed: false
  failure_reason: "{{ hostvars[node].reload_cause_results.msg }}"
{%         endif %}
{%     endif %}
{# Routing table check: VTEP Results #}
{%     if hostvars[node].routing_table_vtep_results.results is arista.avd.defined %}
{%         for result in hostvars[node].routing_table_vtep_results.results %}
{%             if result.skipped is not arista.avd.defined %}
{%                 set test_id.value = test_id.value + 1 %}
- {{ test_id.value }}:
  device: {{ node }}
  test_category: Routing Table
  test_description: Remote VTEP address
  test: {{ result.vtep_reachability_test.vtep_ip }}
{%                 if result.failed == false %}
  passed: true
{%                 else %}
  passed: false
  failure_reason: "{{ result.msg }}"
{%                 endif %}
{%             endif %}
{%         endfor %}
{%     endif %}
{# Routing table check: loopback0 Results #}
{%     if hostvars[node].routing_table_loopback0_results.results is arista.avd.defined %}
{%         for result in hostvars[node].routing_table_loopback0_results.results %}
{%             if result.skipped is not arista.avd.defined %}
{%                 set test_id.value = test_id.value + 1 %}
- {{ test_id.value }}:
  device: {{ node }}
  test_category: Routing Table
  test_description: Remote Lo0 address
  test: {{ result.routing_table_loopback0_test.loopback0_address }}
{%                 if result.failed == false %}
  passed: true
{%                 else %}
  passed: false
  failure_reason: "{{ result.msg }}"
{%                 endif %}
{%             endif %}
{%         endfor %}
{%     endif %}
{# loopback0 reachability Results #}
{%     if hostvars[node].loopback0_reachability_results.results is arista.avd.defined %}
{%         for result in hostvars[node].loopback0_reachability_results.results %}
{%             if result.skipped is not arista.avd.defined %}
{%                 set test_id.value = test_id.value + 1 %}
- {{ test_id.value }}:
  device: {{ node }}
  test_category: Loopback0 Reachability
  test_description: Loopback0 Reachability
  test: "Source: {{ node }} - {{ hostvars[node].loopback_interfaces.Loopback0.ip_address | ansible.netcommon.ipaddr('address') }} Destination: {{ result.loopback0_reachability_test.loopback0_address }}"
{%                 if result.failed == false %}
  passed: true
{%                 else %}
  passed: false
  failure_reason: "{{ result.msg }}"
{%                 endif %}
{%             endif %}
{%         endfor %}
{%     endif %}
{# Inb management to loopback 0 reachability Results #}
{%     if hostvars[node].inb_mgmt_loopback0_reachability_results.results is arista.avd.defined %}
{%         for result in hostvars[node].inb_mgmt_loopback0_reachability_results.results %}
{%             set test_id.value = test_id.value + 1 %}
{%             if result.skipped is not arista.avd.defined %}
- {{ test_id.value }}:
  device: {{ node }}
  test_category: Loopback0 Reachability
  test_description: Inband Mgmt Reachability
  test: "Source: {{ node }} - {{ result.inb_mgmt_loopback0_reachability_test.invocation.module_args.commands[0].split(" ") | last }} Destination: {{ result.inb_mgmt_loopback0_reachability_test.loopback0_address }}"
{%                 if result.failed == false %}
  passed: true
{%                 else %}
  passed: false
  failure_reason: "{{ result.msg }}"
{%                 endif %}
{%             endif %}
{%         endfor %}
{%     endif %}
{% endfor %}
