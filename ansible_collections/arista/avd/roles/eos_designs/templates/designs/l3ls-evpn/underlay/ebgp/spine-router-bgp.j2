{# EBGP #}
{## Underlay network peerings #}
router_bgp:
  peer_groups:
    {{ bgp_peer_groups.IPv4_UNDERLAY_PEERS.name | arista.avd.default("IPv4-UNDERLAY-PEERS") }}:
      type: ipv4
      password: "{{ bgp_peer_groups.IPv4_UNDERLAY_PEERS.password }}"
      maximum_routes: 12000
      send_community: all
  address_family_ipv4:
    peer_groups:
      {{ bgp_peer_groups.IPv4_UNDERLAY_PEERS.name | arista.avd.default("IPv4-UNDERLAY-PEERS") }}:
        activate: true
  redistribute_routes:
    connected:
      route_map: RM-CONN-2-BGP

{# Regular EBGP peerings #}
{# Spine router bgp neighbors configuration #}
{% if underlay_rfc5549 is arista.avd.defined(true) %}
  neighbor_interfaces:
{% else %}
  neighbors:
{% endif %}
{% for l3leaf_node_group in l3leaf.node_groups | arista.avd.natural_sort %}
{%     if l3leaf.node_groups[l3leaf_node_group].spines is defined %}
{%         set leaf_spines = l3leaf.node_groups[l3leaf_node_group].spines %}
{%     else %}
{%         set leaf_spines = l3leaf.defaults.spines %}
{%     endif %}
{%     for node in l3leaf.node_groups[l3leaf_node_group].nodes | arista.avd.natural_sort %}
{#erlay network peering #}
{%         for leaf_spine in leaf_spines %}
{%             if leaf_spine == inventory_hostname %}
{%                 if underlay_rfc5549 is arista.avd.defined(true) %}
    {{ l3leaf.node_groups[l3leaf_node_group].nodes[node].spine_interfaces[loop.index0] }}:
{%                 else %}
    {{ underlay_p2p_network_summary | ipaddr('network') | ipmath(((l3leaf.node_groups[l3leaf_node_group].nodes[node].id -1) * 2 * switch.max_spines * max_l3leaf_to_spine_links) + loop.index0 * 2 + 1) }}:
{%                 endif %}
      peer_group: {{ bgp_peer_groups.IPv4_UNDERLAY_PEERS.name | arista.avd.default("IPv4-UNDERLAY-PEERS") }}
      remote_as: {{ l3leaf.node_groups[l3leaf_node_group].nodes[node].bgp_as | arista.avd.default(
                    l3leaf.node_groups[l3leaf_node_group].bgp_as,
                    l3leaf.defaults.bgp_as) }}
      description: {{ node }}_{{ l3leaf.node_groups[l3leaf_node_group].nodes[node].spine_interfaces[loop.index0] }}
{%             endif %}
{%         endfor %}
{%     endfor %}
{% endfor %}

{# Underlay network peering to super spines #}
{% set spine_uplink_list = spine.nodes[inventory_hostname]['uplinks_to_super_spine_interfaces'] | arista.avd.default(
                               spine.uplinks_to_super_spine_interfaces,
                               []) %}
{% for spine_uplink in spine_uplink_list %}
{%     set s_spine_id = loop.index0 // max_spine_to_super_spine_links + 1 %}
{%     set ip_pool = super_spine_underlay_p2p_network_summary %}
{# max number of hosts in subnet will be divided by max super-spine number to avoid address changes when provisioning new spines #}
{%     set ip_pool_max_hosts_in_subnet = ip_pool | ipaddr('size') %}
{%     set offset = loop.index0 % max_spine_to_super_spine_links %}
    {{
      ip_pool | ipaddr('network') | ipmath(
            (ip_pool_max_hosts_in_subnet / max_super_spines) | int * (s_spine_id - 1) + ((switch.id - 1) * max_spine_to_super_spine_links + offset) * 2
      )
    }}:
      peer_group: {{ bgp_peer_groups.IPv4_UNDERLAY_PEERS.name | arista.avd.default("IPv4-UNDERLAY-PEERS") }}
      remote_as: {{ super_spine.bgp_as }}
{% endfor %}

{## Underlay network peering to Overlay Controllers #}
{% if overlay_controller is defined %}
{%     for overlay_controller_node in overlay_controller.nodes | arista.avd.natural_sort %}
{%         set overlay_controller_remote_switches = overlay_controller.nodes[overlay_controller_node].remote_switches | arista.avd.default(overlay_controller.defaults.remote_switches) %}
{%         for overlay_controller_remote_switch in overlay_controller_remote_switches %}
{%             if overlay_controller_remote_switch == inventory_hostname %}
    {{ overlay_controller_p2p_network_summary | ipaddr('network') | ipmath(((overlay_controller.nodes[overlay_controller_node].id -1) * 2 * max_overlay_controller_to_switch_links) + loop.index0 * 2 + 1) }}:
      peer_group: {{ bgp_peer_groups.IPv4_UNDERLAY_PEERS.name | arista.avd.default("IPv4-UNDERLAY-PEERS") }}
      description: {{ overlay_controller_node }}
      remote_as: {{ overlay_controller.nodes[overlay_controller_node].bgp_as | arista.avd.default(overlay_controller.defaults.bgp_as) }}
{%                 if overlay_controller_p2p_bfd is arista.avd.defined(true) %}
      bfd: true
{%                 endif %}
{%             endif %}
{%         endfor %}
{%     endfor %}
{% endif %}
