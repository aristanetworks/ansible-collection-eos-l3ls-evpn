{# Point-to-Point Interfaces to Spine Switches #}
ethernet_interfaces:
{% for host in groups[dc_name] | arista.avd.natural_sort %}
{%     if hostvars[host]['type'] == 'spine' %}
{%         for offset in range(max_spine_to_super_spine_links) %}
{%             set spine_id = hostvars[host]['spine']['nodes'][host]['id'] %}
{%             set super_spine_interface = hostvars[host]['spine']['nodes'][host]['super_spine_interfaces'][(spine_id - 1) * max_spine_to_super_spine_links + offset] %}
{%             if hostvars[host]['spine']['nodes'][host]['uplinks_to_super_spine_interfaces'] is defined %}
{%                 set spine_uplink = hostvars[host]['spine']['nodes'][host]['uplinks_to_super_spine_interfaces'][(switch.id - 1) * max_spine_to_super_spine_links + offset] %}
{%             else %}
{%                 set spine_uplink = hostvars[host]['spine']['uplinks_to_super_spine_interfaces'][(switch.id - 1) * max_spine_to_super_spine_links + offset] %}
{%             endif %}
{%             set ip_pool = hostvars[host]['super_spine_underlay_p2p_network_summary'] %}
{#             max number of hosts in subnet will be divided by max super-spine number to avoid address changes when provisioning new spines #}
{%             set ip_pool_max_hosts_in_subnet = ip_pool | ipaddr('size') %}
  {{ super_spine_interface }}:
    peer: {{ host }}
    peer_interface: {{ spine_uplink }}
    peer_type: spine
    description: P2P_LINK_TO_{{ host | upper }}_{{ spine_uplink }}
{%             if p2p_link_interface_speed is defined %}
    speed: {{ p2p_link_interface_speed }}
{%             endif %}
    mtu: {{ p2p_uplinks_mtu }}
{%             if p2p_uplinks_qos_profile is arista.avd.defined %}
    service_profile: {{ p2p_uplinks_qos_profile }}
{%             endif %}
{%     if p2p_uplinks_ptp is arista.avd.defined %}
    ptp:
{%         if p2p_uplinks_ptp.enable is arista.avd.defined %}
      enable: {{ p2p_uplinks_ptp.enable }}
{%         endif %}
{%     endif %}
    type: routed
    shutdown: false
    ip_address: {{
        ip_pool | ipaddr('network') | ipmath(
            (ip_pool_max_hosts_in_subnet / max_super_spines) | int * (switch.id-1) + ((spine_id-1) * max_spine_to_super_spine_links + offset) * 2
        )
    }}/31
{%             if switch.underlay_routing_protocol == "ospf" %}
    ospf_network_point_to_point: true
    ospf_area: {{ underlay_ospf_area }}
{%             endif %}
{%             if switch.underlay_routing_protocol == "isis" %}
    isis_enable: EVPN_UNDERLAY
    isis_metric: 50
    isis_network_point_to_point: true
{%             endif %}
{%         endfor %}
{%     endif %}
{% endfor %}
{# Point-to-Point Interfaces to optional OVERLAY_CONTROLLER Switches #}
{% if overlay_controller is defined %}
{%     for overlay_controller_node in overlay_controller.nodes | arista.avd.natural_sort %}
{%         if overlay_controller.nodes[overlay_controller_node].remote_switches is defined %}
{%             set overlay_controller_remote_switches = overlay_controller.nodes[overlay_controller_node].remote_switches %}
{%         else %}
{%             set overlay_controller_remote_switches = overlay_controller.defaults.remote_switches %}
{%         endif %}
{%         for overlay_controller_remote_switch in overlay_controller_remote_switches %}
{%             if overlay_controller_remote_switch == inventory_hostname %}
{%                 set remote_switches_interfaces = overlay_controller.nodes[overlay_controller_node].nodes[node].remote_switches_interfaces %}
{%                 if overlay_controller.nodes[overlay_controller_node].uplink_to_remote_switches is defined %}
{%                     set uplink_to_remote_switches = overlay_controller.nodes[overlay_controller_node].uplink_to_remote_switches %}
{%                 else %}
{%                 set uplink_to_remote_switches = overlay_controller.defaults.uplink_to_remote_switches %}
{%                 endif %}
{%                 if overlay_controller.nodes[overlay_controller_node].p2p_link_interface_speed is defined %}
{%                     set p2p_link_interface_speed = overlay_controller.nodes[overlay_controller_node].p2p_link_interface_speed %}
{%                 elif overlay_controller.defaults.p2p_link_interface_speed is defined %}
{%                     set p2p_link_interface_speed = overlay_controller.defaults.p2p_link_interface_speed %}
{%                 endif %}
{%                 set switch_interfaces = overlay_controller.nodes[overlay_controller_node].remote_switches_interfaces %}
  {{ switch_interfaces[loop.index0] }}:
    peer: {{ overlay_controller_node }}
    peer_interface: {{ uplink_to_remote_switches[loop.index0] }}
    peer_type: overlay_controller
    description: P2P_LINK_TO_{{ overlay_controller_node | upper }}_{{ uplink_to_remote_switches[loop.index0] }}
{%                 if p2p_link_interface_speed is defined %}
    speed: {{ p2p_link_interface_speed }}
{%                 endif %}
    mtu: {{ p2p_uplinks_mtu }}
{%                 if p2p_uplinks_qos_profile is arista.avd.defined %}
    service_profile: {{ p2p_uplinks_qos_profile }}
{%                 endif %}
    type: routed
    shutdown: false
    ip_address: {{ overlay_controller_p2p_network_summary | ipaddr('network') | ipmath(((overlay_controller.nodes[overlay_controller_node].id -1) * 2 * max_overlay_controller_to_switch_links) + loop.index0 * 2) }}/31
{%                 if switch.underlay_routing_protocol == "ospf" %}
    ospf_network_point_to_point: true
    ospf_area: {{ underlay_ospf_area }}
{%                 endif %}
{%                 if switch.underlay_routing_protocol == "isis" %}
    isis_enable: EVPN_UNDERLAY
    isis_metric: 50
    isis_network_point_to_point: true
{%                 endif %}
{%             endif %}
{%         endfor %}
{%     endfor %}
{% endif %}
