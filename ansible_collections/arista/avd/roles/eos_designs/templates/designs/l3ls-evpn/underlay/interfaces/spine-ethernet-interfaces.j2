{# Point-to-Point Interfaces to Leaf Switches #}
ethernet_interfaces:
{% for l3leaf_node_group in l3leaf.node_groups | arista.avd.natural_sort %}
{%     if l3leaf.node_groups[l3leaf_node_group].spines is defined %}
{%         set leaf_spines = l3leaf.node_groups[l3leaf_node_group].spines %}
{%     else %}
{%         set leaf_spines = l3leaf.defaults.spines %}
{%     endif %}
{%     for node in l3leaf.node_groups[l3leaf_node_group].nodes | arista.avd.natural_sort %}
{%         set spine_interfaces = l3leaf.node_groups[l3leaf_node_group].nodes[node].spine_interfaces %}
{%         if l3leaf.node_groups[l3leaf_node_group].uplink_to_spine_interfaces is defined %}
{%             set uplink_to_spine_interfaces = l3leaf.node_groups[l3leaf_node_group].uplink_to_spine_interfaces %}
{%         else %}
{%             set uplink_to_spine_interfaces = l3leaf.defaults.uplink_to_spine_interfaces %}
{%         endif %}
{%         if l3leaf.node_groups[l3leaf_node_group].p2p_link_interface_speed is defined %}
{%             set p2p_link_interface_speed = l3leaf.node_groups[l3leaf_node_group].p2p_link_interface_speed %}
{%         elif l3leaf.defaults.p2p_link_interface_speed is defined %}
{%             set p2p_link_interface_speed = l3leaf.defaults.p2p_link_interface_speed %}
{%         endif %}
{%         for leaf_spine in leaf_spines %}
{%             if leaf_spine == inventory_hostname %}
  {{ spine_interfaces[loop.index0] }}:
    peer: {{ node }}
    peer_interface: {{ uplink_to_spine_interfaces[loop.index0] }}
    peer_type: l3leaf
    description: P2P_LINK_TO_{{ node | upper }}_{{ uplink_to_spine_interfaces[loop.index0] }}
{%                 if p2p_link_interface_speed is defined %}
    speed: {{ p2p_link_interface_speed }}
{%                 endif %}
    mtu: {{ p2p_uplinks_mtu }}
{%                 if p2p_uplinks_qos_profile is arista.avd.defined %}
    service_profile: {{ p2p_uplinks_qos_profile }}
{%                 endif %}
{%     if p2p_uplinks_ptp is arista.avd.defined %}
    ptp:
{%         if p2p_uplinks_ptp.enable is arista.avd.defined %}
      enable: {{ p2p_uplinks_ptp.enable }}
{%         endif %}
{%     endif %}
    type: routed
    shutdown: false
{%     if underlay_rfc5549 is arista.avd.defined(true) %}
    ipv6_enable: true
{%     else %}
    ip_address: {{ underlay_p2p_network_summary | ipaddr('network') | ipmath(((l3leaf.node_groups[l3leaf_node_group].nodes[node].id -1) * 2 * switch.max_spines * max_l3leaf_to_spine_links) + loop.index0 * 2) }}/31
{%     endif %}
{%                 if switch.underlay_routing_protocol == "ospf" %}
    ospf_network_point_to_point: true
    ospf_area: {{ underlay_ospf_area }}
{%                 endif %}
{%                 if switch.underlay_routing_protocol == "isis" %}
    isis_enable: EVPN_UNDERLAY
    isis_metric: 50
    isis_network_point_to_point: true
{%                 endif %}
{%             endif %}
{%         endfor %}
{%     endfor %}
{% endfor %}
{# Point-to-Point Interfaces to Super Spine Switches #}
{% set spine_uplink_list = spine.nodes[inventory_hostname]['uplinks_to_super_spine_interfaces'] | arista.avd.default(
                           spine.uplinks_to_super_spine_interfaces,
                           []) %}
{% for spine_uplink in spine_uplink_list %}
{%     set s_spine_id = loop.index0 // max_spine_to_super_spine_links + 1 %}
{%     set ip_pool = super_spine_underlay_p2p_network_summary %}
{#     max number of hosts in subnet will be divided by max super-spine number to avoid address changes when provisioning new spines #}
{%     set ip_pool_max_hosts_in_subnet = ip_pool | ipaddr('size') %}
{%     set offset = loop.index0 % max_spine_to_super_spine_links %}
{%     set s_spine_name_list = super_spine.nodes | list %}
{%     set s_spine_port_name = spine.nodes[inventory_hostname]['super_spine_interfaces'][(switch.id - 1) * max_spine_to_super_spine_links + offset] %}
  {{ spine_uplink }}:
    peer: {{ s_spine_name_list[s_spine_id-1] }}
    peer_interface: {{ s_spine_port_name }}
    peer_type: super-spine
    description: P2P_LINK_TO_{{ s_spine_name_list[s_spine_id-1] | upper }}_{{ s_spine_port_name }}
{%              if p2p_link_interface_speed is defined %}
    speed: {{ p2p_link_interface_speed }}
{%              endif %}
    mtu: {{ p2p_uplinks_mtu }}
{%              if p2p_uplinks_qos_profile is arista.avd.defined %}
    service_profile: {{ p2p_uplinks_qos_profile }}
{%              endif %}
{%     if p2p_uplinks_ptp is arista.avd.defined %}
    ptp:
{%         if p2p_uplinks_ptp.enable is arista.avd.defined %}
      enable: {{ p2p_uplinks_ptp.enable }}
{%         endif %}
{%     endif %}
    type: routed
    shutdown: false
    ip_address: {{
        ip_pool | ipaddr('network') | ipmath(
            (ip_pool_max_hosts_in_subnet / max_super_spines) | int * (s_spine_id - 1) + ((switch.id - 1) * max_spine_to_super_spine_links + offset) * 2 + 1
        )
    }}/31
{% endfor %}
{# Point-to-Point Interfaces to optional OVERLAY_CONTROLLER Switches #}
{% if overlay_controller is defined %}
{%     for overlay_controller_node in overlay_controller.nodes | arista.avd.natural_sort %}
{%         if overlay_controller.nodes[overlay_controller_node].remote_switches is defined %}
{%             set overlay_controller_remote_switches = overlay_controller.nodes[overlay_controller_node].remote_switches %}
{%         else %}
{%             set overlay_controller_remote_switches = overlay_controller.defaults.remote_switches %}
{%         endif %}
{%         for overlay_controller_remote_switch in overlay_controller_remote_switches %}
{%             if overlay_controller_remote_switch == inventory_hostname %}
{%                 set remote_switches_interfaces = overlay_controller.nodes[overlay_controller_node].nodes[node].remote_switches_interfaces %}
{%                 if overlay_controller.nodes[overlay_controller_node].uplink_to_remote_switches is defined %}
{%                     set uplink_to_remote_switches = overlay_controller.nodes[overlay_controller_node].uplink_to_remote_switches %}
{%                 else %}
{%                 set uplink_to_remote_switches = overlay_controller.defaults.uplink_to_remote_switches %}
{%                 endif %}
{%                 if overlay_controller.nodes[overlay_controller_node].p2p_link_interface_speed is defined %}
{%                     set p2p_link_interface_speed = overlay_controller.nodes[overlay_controller_node].p2p_link_interface_speed %}
{%                 elif overlay_controller.defaults.p2p_link_interface_speed is defined %}
{%                     set p2p_link_interface_speed = overlay_controller.defaults.p2p_link_interface_speed %}
{%                 endif %}
{%                 set switch_interfaces = overlay_controller.nodes[overlay_controller_node].remote_switches_interfaces %}
  {{ switch_interfaces[loop.index0] }}:
    peer: {{ overlay_controller_node }}
    peer_interface: {{ uplink_to_remote_switches[loop.index0] }}
    peer_type: overlay_controller
    description: P2P_LINK_TO_{{ overlay_controller_node | upper }}_{{ uplink_to_remote_switches[loop.index0] }}
{%                 if p2p_link_interface_speed is defined %}
    speed: {{ p2p_link_interface_speed }}
{%                 endif %}
    mtu: {{ p2p_uplinks_mtu }}
{%                 if p2p_uplinks_qos_profile is arista.avd.defined %}
    service_profile: {{ p2p_uplinks_qos_profile }}
{%                 endif %}
    type: routed
    shutdown: false
    ip_address: {{ overlay_controller_p2p_network_summary | ipaddr('network') | ipmath(((overlay_controller.nodes[overlay_controller_node].id -1) * 2 * max_overlay_controller_to_switch_links) + loop.index0 * 2) }}/31
{%                 if switch.underlay_routing_protocol == "ospf" %}
    ospf_network_point_to_point: true
    ospf_area: {{ underlay_ospf_area }}
{%                 endif %}
{%                 if switch.underlay_routing_protocol == "isis" %}
    isis_enable: EVPN_UNDERLAY
    isis_metric: 50
    isis_network_point_to_point: true
{%                 endif %}
{%             endif %}
{%         endfor %}
{%     endfor %}
{% endif %}
