switch:
{% for node in overlay_controller.nodes | arista.avd.natural_sort %}
{%     if node == inventory_hostname %}

{# switch.id #}
{%         set switch_id = overlay_controller.nodes[node].id %}
  id: {{ switch_id }}

{# switch.mgmt_ip #}
  mgmt_ip: {{ overlay_controller.nodes[node].mgmt_ip | arista.avd.default() }}

{# switch.spanning_tree_mode #}
  spanning_tree_mode: "none"

{# switch.platform #}
{%         set switch_platform = overlay_controller.nodes[node].platform | arista.avd.default(
                                 overlay_controller.defaults.platform,
                                 overlay_controller.platform) %}
  platform: {{ switch_platform }}

{# switch.platform_settings #}
  platform_settings: {{ platform_settings | selectattr("platforms", "arista.avd.contains", switch_platform) | first | arista.avd.default(
                        platform_settings | selectattr("platforms", "arista.avd.contains", "default") | first) | to_json() }}

{# switch.router_id #}
  router_id: {% include templates[design.type].ip_addressing[type].router_id %}

{# switch.loopback_network_summary #}
  loopback_network_summary: {{ overlay_controller_loopback_network_summary }}

{# switch.rack #}
  rack: {{ overlay_controller.nodes[node].rack | arista.avd.default(
           overlay_controller.defaults.rack) }}

{# switch.raw_eos_cli #}
{%         set switch_raw_eos_cli = overlay_controller.nodes[node].raw_eos_cli | arista.avd.default(
                                        overlay_controller.defaults.raw_eos_cli) %}
{%         if switch_raw_eos_cli is arista.avd.defined %}
  raw_eos_cli: |
    {{ switch_raw_eos_cli | indent(4,false) }}
{%         endif %}

{# switch.struct_cfg #}
  struct_cfg: {{ overlay_controller.nodes[node].structured_config | arista.avd.default(
                 overlay_controller.defaults.structured_config) }}

{# switch.bgp_defaults #}
  bgp_defaults: {{ overlay_controller_bgp_defaults | arista.avd.default([]) }}

{# switch.bgp_as #}
{%         if bgp_as is arista.avd.defined and switch.overlay_routing_protocol == 'ibgp' %}
  bgp_as: {{ bgp_as }}
{%         else %}
  bgp_as: {{ overlay_controller.nodes[node].bgp_as | arista.avd.default(
             overlay_controller.defaults.bgp_as) }}
{%         endif %}

{# switch.uplink_interfaces #}
  uplink_interfaces: {{ overlay_controller.nodes[node].uplink_to_remote_switches | arista.avd.default(
                                overlay_controller.defaults.uplink_to_remote_switches,
                                []) }}

{# switch.uplink_switch_interfaces #}
  uplink_switch_interfaces: {{ overlay_controller.nodes[node].remote_switches_interfaces | arista.avd.default([]) }}

{# switch.uplink_switches #}
{%         set switch_remote_switches = overlay_controller.nodes[node].remote_switches | arista.avd.default(
                                        overlay_controller.defaults.remote_switches,
                                        []) %}
  uplink_switches: {{ switch_remote_switches }}

{# switch.evpn_role #}
{# For overlay-controller the default value is none #}
  evpn_role: {{ overlay_controller.nodes[inventory_hostname].evpn_role | arista.avd.default(
                overlay_controller.defaults.evpn_role,
                'none') }}

{# switch.evpn_route_servers #}
  evpn_route_servers: {{ overlay_controller.nodes[inventory_hostname].evpn_route_servers | arista.avd.default(
                             overlay_controller.defaults.evpn_route_servers,
                             []) }}

{%     endif %}
{% endfor %}
