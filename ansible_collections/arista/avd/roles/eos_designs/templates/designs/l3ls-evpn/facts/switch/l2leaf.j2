{# set switch variables for l2leaf #}
switch:
{% for l2leaf_node_group in l2leaf.node_groups | arista.avd.natural_sort %}
{%     for node in l2leaf.node_groups[l2leaf_node_group].nodes | arista.avd.natural_sort %}
{%         if node == inventory_hostname %}

{# switch.group #}
  group: {{ l2leaf_node_group }}

{# switch.id #}
{%             set switch_id = l2leaf.node_groups[l2leaf_node_group].nodes[node].id %}
  id: {{ switch_id }}

{# switch.mgmt_ip #}
  mgmt_ip: {{ l2leaf.node_groups[l2leaf_node_group].nodes[node].mgmt_ip | arista.avd.default() }}

{# switch.spanning_tree_mode #}
  spanning_tree_mode: {{ l2leaf.node_groups[l2leaf_node_group].spanning_tree_mode | arista.avd.default(
                         l2leaf.defaults.spanning_tree_mode) }}

{# switch.igmp_snooping_enabled #}
  igmp_snooping_enabled: {{ l2leaf.node_groups[l2leaf_node_group].igmp_snooping_enabled | arista.avd.default(
                            l2leaf.defaults.igmp_snooping_enabled,
                            default_igmp_snooping_enabled) }}

{# switch.spanning_tree_priority #}
  spanning_tree_priority: {{ l2leaf.node_groups[l2leaf_node_group].spanning_tree_priority | arista.avd.default(
                             l2leaf.defaults.spanning_tree_priority) }}

{# switch.platform #}
{%             set switch_platform = l2leaf.node_groups[l2leaf_node_group].platform | arista.avd.default(
                                     l2leaf.defaults.platform) %}
  platform: {{ switch_platform }}

{# switch.platform_settings #}
  platform_settings: {{ platform_settings | selectattr("platforms", "arista.avd.contains", switch_platform) | first | arista.avd.default(
                        platform_settings | selectattr("platforms", "arista.avd.contains", "default") | first) | to_json() }}

{# switch.rack #}
  rack: {{ l2leaf.node_groups[l2leaf_node_group].nodes[node].rack | arista.avd.default(
           l2leaf.node_groups[l2leaf_node_group].rack,
           l2leaf.defaults.rack) }}

{# switch.raw_eos_cli #}
{%             set switch_raw_eos_cli = l2leaf.node_groups[l2leaf_node_group].nodes[node].raw_eos_cli | arista.avd.default(
                                        l2leaf.node_groups[l2leaf_node_group].raw_eos_cli,
                                        l2leaf.defaults.raw_eos_cli) %}
{%             if switch_raw_eos_cli is arista.avd.defined %}
  raw_eos_cli: |
    {{ switch_raw_eos_cli | indent(4,false) }}
{%             endif %}

{# switch.struct_cfg #}
  struct_cfg: {{ l2leaf.node_groups[l2leaf_node_group].nodes[node].structured_config | arista.avd.default(
                 l2leaf.node_groups[l2leaf_node_group].structured_config,
                 l2leaf.defaults.structured_config) }}

{# switch.configure_tenants #}
  configure_tenants: true

{# switch.filter_tenants #}
{%             set switch_filter_tenants = l2leaf.node_groups[l2leaf_node_group].filter.tenants | arista.avd.default(
                                           l2leaf.defaults.filter.tenants,
                                           ['all']) %}
  filter_tenants: {{ switch_filter_tenants }}

{# switch.filter_tags #}
{%             set switch_filter_tags = l2leaf.node_groups[l2leaf_node_group].filter.tags | arista.avd.default(
                  l2leaf.defaults.filter.tags,
                  ['all']) %}
  filter_tags: {{ switch_filter_tags }}

{# switch.uplink_switches #}
{%             set switch_parent_l3leafs = l2leaf.node_groups[l2leaf_node_group].parent_l3leafs | arista.avd.default(
                                           l2leaf.defaults.parent_l3leafs) %}
  uplink_switches: {{ switch_parent_l3leafs }}

{# switch.uplink_interfaces #}
  uplink_interfaces: {{ l2leaf.node_groups[l2leaf_node_group].uplink_interfaces | arista.avd.default(
                        l2leaf.defaults.uplink_interfaces,
                        []) }}

{# switch.uplink_switch_interfaces #}
  uplink_switch_interfaces: {{ l2leaf.node_groups[l2leaf_node_group].nodes[node].l3leaf_interfaces }}

{# switch.p2p_link_interface_speed #}
  p2p_link_interface_speed: {{ l2leaf.node_groups[l2leaf_node_group].p2p_link_interface_speed | arista.avd.default(
                               l2leaf.defaults.p2p_link_interface_speed) }}

{# switch.inband_management_ip and switch.inband_management_interface #}
{%             if l2leaf_inband_management_subnet is arista.avd.defined %}
  inband_management_ip: {{ l2leaf_inband_management_subnet | ansible.netcommon.ipaddr('network') | ansible.netcommon.ipmath(3 + switch_id) }}/{{ l2leaf_inband_management_subnet | ansible.netcommon.ipaddr('prefix') }}
  inband_management_interface: Vlan{{ l2leaf_inband_management_vlan | arista.avd.default('4092') }}
{%             endif %}

{# switch.mlag* #}
{%             set mlag = l2leaf.node_groups[l2leaf_node_group].mlag | arista.avd.default(
                                 l2leaf.defaults.mlag,
                                 true) %}

{%             if loop.length == 2 and mlag == true %}
  mlag: true
  mlag_group: {{ l2leaf_node_group }}
  mlag_peer_vlan: {{ l2leaf.node_groups[l2leaf_node_group].mlag_peer_vlan | arista.avd.default(
                     l2leaf.defaults.mlag_peer_vlan,
                     4094) }}
  mlag_dual_primary_detection: {{ l2leaf.node_groups[l2leaf_node_group].mlag_dual_primary_detection | arista.avd.default(
                                  l2leaf.defaults.mlag_dual_primary_detection,
                                  false) }}
  mlag_interfaces: {{ l2leaf.node_groups[l2leaf_node_group].mlag_interfaces | arista.avd.default(
                      l2leaf.defaults.mlag_interfaces) }}
  mlag_peer_vlan: {{ l2leaf.node_groups[l2leaf_node_group].mlag_peer_vlan | arista.avd.default(
                     l2leaf.defaults.mlag_peer_vlan,
                     4094) }}
{%                 if loop.index == 1 %}
{%                     set mlag_primary_id = switch_id %}
{%                     set mlag_secondary_id = l2leaf.node_groups[l2leaf_node_group].nodes[loop.nextitem].id %}
  mlag_role: "primary"
  mlag_peer: {{ loop.nextitem }}
  mlag_ip: {% include templates[design.type].ip_addressing[type].mlag_ip_primary %}

  mlag_peer_ip: {% include templates[design.type].ip_addressing[type].mlag_ip_secondary %}

{%                     if l2leaf.node_groups[l2leaf_node_group].nodes[loop.nextitem].mgmt_ip | arista.avd.default() is truthy %}
  mlag_peer_mgmt_ip: {{ l2leaf.node_groups[l2leaf_node_group].nodes[loop.nextitem].mgmt_ip | ansible.netcommon.ipaddr('address') }}
{%                     endif %}
{%                 elif loop.index == 2 %}
{%                     set mlag_primary_id = l2leaf.node_groups[l2leaf_node_group].nodes[loop.previtem].id %}
{%                     set mlag_secondary_id = switch_id %}
  mlag_role: "secondary"
  mlag_peer: {{ loop.previtem }}
  mlag_ip: {% include templates[design.type].ip_addressing[type].mlag_ip_secondary %}

  mlag_peer_ip: {% include templates[design.type].ip_addressing[type].mlag_ip_primary %}

{%                     if l2leaf.node_groups[l2leaf_node_group].nodes[loop.previtem].mgmt_ip | arista.avd.default() is truthy %}
  mlag_peer_mgmt_ip: {{ l2leaf.node_groups[l2leaf_node_group].nodes[loop.previtem].mgmt_ip | ansible.netcommon.ipaddr('address') }}
{%                     endif %}
{%                 endif %}
{%             else %}
  mlag: false
{%             endif %}

{# switch.short_esi #}
  short_esi: {{ l2leaf.node_groups[l2leaf_node_group].short_esi | arista.avd.default() }}

{# get allowed vrfs, svis and vlans from parent L3 Leafs #}
{%             set parentl3leaf = namespace() %}
{%             for l3leaf_node_group in l3leaf.node_groups | arista.avd.natural_sort %}
{%                 for node in l3leaf.node_groups[l3leaf_node_group].nodes | arista.avd.natural_sort %}
{%                     if node in switch_parent_l3leafs %}
{%                         set parentl3leaf.group = l3leaf_node_group %}
{%                         set parentl3leaf.filter_tenants = l3leaf.node_groups[l3leaf_node_group].filter.tenants | arista.avd.default(
                                                             l3leaf.defaults.filter.tenants,
                                                             ['all']) %}
{%                         set parentl3leaf.filter_tags = l3leaf.node_groups[l3leaf_node_group].filter.tags | arista.avd.default(
                                                          l3leaf.defaults.filter.tags,
                                                          ['all']) %}
{%                         break %}
{%                     endif %}
{%                 endfor %}
{%             endfor %}
{# set leaf allowed vrfs, svis and vlans #}
{%             set leaf = namespace() %}
{%             set leaf.vlans = []  %}
{%             set leaf.tenants = {} %}
{%             for tenant in tenants | arista.avd.natural_sort if tenant in switch_filter_tenants or "all" in switch_filter_tenants %}
{%                 if tenant in parentl3leaf.filter_tenants or "all" in parentl3leaf.filter_tenants %}
{%                     set add_vrfs = {} %}
{%                     for vrf in tenants[tenant].vrfs | arista.avd.natural_sort %}
{%                         set add_svis = [] %}
{%                         for svi in tenants[tenant].vrfs[vrf].svis | arista.avd.natural_sort %}
{%                             for svi_tag in tenants[tenant].vrfs[vrf].svis[svi].tags | arista.avd.natural_sort %}
{%                                 if svi_tag in switch_filter_tags or svi_tag == l2leaf_node_group or "all" in switch_filter_tags %}
{%                                     if svi_tag in parentl3leaf.filter_tags or svi_tag == parentl3leaf.group or "all" in parentl3leaf.filter_tags %}
{%                                         do add_svis.append(svi) %}
{%                                         do leaf.vlans.append(svi | int) %}
{%                                         break %}
{%                                     endif %}
{%                                 endif %}
{%                             endfor %}
{%                         endfor %}
{# Append VRF if we found SVIs #}
{%                         if add_svis | length > 0 %}
{%                             do add_vrfs.update({ vrf: {"svis": add_svis}}) %}
{%                         endif %}
{%                     endfor %}
{%                     set add_l2vlans = [] %}
{%                     for l2vlan in tenants[tenant].l2vlans | arista.avd.natural_sort %}
{%                         for vlan_tag in tenants[tenant].l2vlans[l2vlan].tags | arista.avd.natural_sort %}
{%                             if vlan_tag in switch_filter_tags or vlan_tag == l2leaf_node_group or "all" in switch_filter_tags %}
{%                                 if vlan_tag in parentl3leaf.filter_tags or vlan_tag == l2leaf_node_group or "all" in parentl3leaf.filter_tags %}
{%                                     do add_l2vlans.append(l2vlan) %}
{%                                     do leaf.vlans.append(l2vlan | int) %}
{%                                     break %}
{%                                 endif %}
{%                             endif %}
{%                         endfor %}
{%                     endfor %}
{%                     if add_vrfs | length > 0 or add_l2vlans | length > 0 %}
{%                         do leaf.tenants.update({ tenant: {"vrfs": add_vrfs, "l2vlans": add_l2vlans}}) %}
{%                     endif %}
{%                 endif %}
{%             endfor %}

{# switch.tenants #}
  tenants: {{ leaf.tenants }}

{# switch.vlans #}
  vlans: {{ leaf.vlans | unique }}

{%             break %}
{%         endif %}
{%     endfor %}
{% endfor %}
