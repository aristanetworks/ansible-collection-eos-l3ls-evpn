switch:
{% for l3leaf_node_group in l3leaf.node_groups | arista.avd.natural_sort %}
{%     for node in l3leaf.node_groups[l3leaf_node_group].nodes | arista.avd.natural_sort %}
{%         if node == inventory_hostname %}

{# switch.group #}
  group: {{ l3leaf_node_group }}

{# switch.id #}
{%             set switch_id = l3leaf.node_groups[l3leaf_node_group].nodes[node].id %}
  id: {{ switch_id }}

{# switch.mgmt_ip #}
  mgmt_ip: {{ l3leaf.node_groups[l3leaf_node_group].nodes[node].mgmt_ip | arista.avd.default() }}

{# switch.platform #}
{%             set switch_platform = l3leaf.node_groups[l3leaf_node_group].platform | arista.avd.default(
                                     l3leaf.defaults.platform) %}
  platform: {{ switch_platform }}

{# switch.platform_settings #}
  platform_settings: {{ platform_settings | selectattr("platforms", "arista.avd.contains", switch_platform) | first | arista.avd.default(
                        platform_settings | selectattr("platforms", "arista.avd.contains", "default") | first) | to_json() }}

{# switch.configure_tenants #}
  configure_tenants: true

{# switch.filter_tenants #}
{%             set switch_filter_tenants = l3leaf.node_groups[l3leaf_node_group].filter.tenants | arista.avd.default(
                                           l3leaf.defaults.filter.tenants,
                                           ['all']) %}
  filter_tenants: {{ switch_filter_tenants }}

{# switch.always_include_vrfs_in_tenants #}
{%             set switch_always_include_vrfs_in_tenants = l3leaf.node_groups[l3leaf_node_group].filter.always_include_vrfs_in_tenants | arista.avd.default(
                                                           l3leaf.defaults.filter.always_include_vrfs_in_tenants) %}
  always_include_vrfs_in_tenants: {{ switch_always_include_vrfs_in_tenants }}

{# switch.igmp_snooping_enabled #}
  igmp_snooping_enabled: {{ l3leaf.node_groups[l3leaf_node_group].igmp_snooping_enabled | arista.avd.default(
                            l3leaf.defaults.igmp_snooping_enabled,
                            default_igmp_snooping_enabled) }}

{# switch.filter_tags #}
{%             set switch_filter_tags = l3leaf.node_groups[l3leaf_node_group].filter.tags | arista.avd.default(
                                        l3leaf.defaults.filter.tags,
                                        ['all']) %}
  filter_tags: {{ switch_filter_tags }}

{# switch.max_spines #}
{%             set switch_max_spines = max_spines | arista.avd.default(
                                       spine.nodes | arista.avd.default([]) | length) %}
  max_spines: {{ switch_max_spines }}

{# switch.uplink_switches #}
{%             set switch_spines = l3leaf.node_groups[l3leaf_node_group].spines | arista.avd.default(
                                   l3leaf.defaults.spines) %}
  uplink_switches: {{ switch_spines }}

{# switch.uplink_switch_interfaces #}
  uplink_switch_interfaces: {{ l3leaf.node_groups[l3leaf_node_group].nodes[node].spine_interfaces }}

{# switch.uplink_interfaces #}
  uplink_interfaces: {{ l3leaf.node_groups[l3leaf_node_group].nodes[node].uplink_to_spine_interfaces | arista.avd.default(
                        l3leaf.node_groups[l3leaf_node_group].uplink_to_spine_interfaces,
                        l3leaf.defaults.uplink_to_spine_interfaces,
                        []) }}

{# switch.p2p_link_interface_speed #}
  p2p_link_interface_speed: {{ l3leaf.node_groups[l3leaf_node_group].p2p_link_interface_speed | arista.avd.default(
                               l3leaf.defaults.p2p_link_interface_speed) }}

{# switch.rack #}
  rack: {{ l3leaf.node_groups[l3leaf_node_group].nodes[node].rack | arista.avd.default(
           l3leaf.node_groups[l3leaf_node_group].rack,
           l3leaf.defaults.rack) }}

{# switch.raw_eos_cli #}
{%             set switch_raw_eos_cli = l3leaf.node_groups[l3leaf_node_group].nodes[node].raw_eos_cli | arista.avd.default(
                                        l3leaf.node_groups[l3leaf_node_group].raw_eos_cli,
                                        l3leaf.defaults.raw_eos_cli) %}
{%             if switch_raw_eos_cli is arista.avd.defined %}
  raw_eos_cli: |
    {{ switch_raw_eos_cli | indent(4,false) }}
{%             endif %}

{# switch.struct_cfg #}
  struct_cfg: {{ l3leaf.node_groups[l3leaf_node_group].nodes[node].structured_config | arista.avd.default(
                 l3leaf.node_groups[l3leaf_node_group].structured_config,
                 l3leaf.defaults.structured_config) }}

{# switch.router_id #}
  router_id: {% include templates[design.type].ip_addressing[type].router_id %}

{# switch.loopback_network_summary #}
  loopback_network_summary: {{ overlay_loopback_network_summary }}

{# switch.bgp_as #}
{%             if bgp_as is arista.avd.defined and switch.overlay_routing_protocol == 'ibgp' %}
  bgp_as: {{ bgp_as }}
{%             else %}
  bgp_as: {{ l3leaf.node_groups[l3leaf_node_group].nodes[node].bgp_as | arista.avd.default(
             l3leaf.node_groups[l3leaf_node_group].bgp_as,
             l3leaf.defaults.bgp_as) }}
{%             endif %}

{# switch.bgp_defaults #}
  bgp_defaults: {{ leaf_bgp_defaults | arista.avd.default([]) }}

{# switch.virtual_router_mac_address #}
  virtual_router_mac_address: {{ l3leaf.node_groups[l3leaf_node_group].virtual_router_mac_address | arista.avd.default(
                                 l3leaf.defaults.virtual_router_mac_address) }}

{# switch.spanning_tree_mode #}
  spanning_tree_mode: {{ l3leaf.node_groups[l3leaf_node_group].spanning_tree_mode | arista.avd.default(
                         l3leaf.defaults.spanning_tree_mode) }}

{# switch.spanning_tree_priority #}
  spanning_tree_priority: {{ l3leaf.node_groups[l3leaf_node_group].spanning_tree_priority | arista.avd.default(
                             l3leaf.defaults.spanning_tree_priority) }}

{# switch.spanning_tree_root_super #}
  spanning_tree_root_super: {{ l3leaf.node_groups[l3leaf_node_group].spanning_tree_root_super | arista.avd.default(
                               l3leaf.defaults.spanning_tree_root_super) }}

{# switch.mlag* and switch.vtep_ip #}
{%             set mlag = l3leaf.node_groups[l3leaf_node_group].mlag | arista.avd.default(
                          l3leaf.defaults.mlag,
                          true) %}
  mlag_ibgp_origin_incomplete: {{ l3leaf.node_groups[l3leaf_node_group].mlag_ibgp_origin_incomplete | arista.avd.default(
                                  l3leaf.defaults.mlag_ibgp_origin_incomplete,
                                  true) }}

{%             if loop.length == 2 and mlag == true %}
  mlag: true
  mlag_l3: true
  mlag_group: {{ l3leaf_node_group }}
  mlag_peer_l3_vlan: {{ l3leaf.node_groups[l3leaf_node_group].mlag_peer_l3_vlan | arista.avd.default(
                        l3leaf.defaults.mlag_peer_l3_vlan,
                        4093) }}
  mlag_peer_vlan: {{ l3leaf.node_groups[l3leaf_node_group].mlag_peer_vlan | arista.avd.default(
                     l3leaf.defaults.mlag_peer_vlan,
                     4094) }}
  mlag_dual_primary_detection: {{ l3leaf.node_groups[l3leaf_node_group].mlag_dual_primary_detection | arista.avd.default(
                                  l3leaf.defaults.mlag_dual_primary_detection,
                                  false) }}
  mlag_interfaces: {{ l3leaf.node_groups[l3leaf_node_group].mlag_interfaces | arista.avd.default(
                                              l3leaf.defaults.mlag_interfaces) }}
  mlag_peer_l3_vlan: {{ l3leaf.node_groups[l3leaf_node_group].mlag_peer_l3_vlan | arista.avd.default(
                        l3leaf.defaults.mlag_peer_l3_vlan,
                        4093) }}
  mlag_peer_vlan: {{ l3leaf.node_groups[l3leaf_node_group].mlag_peer_vlan | arista.avd.default(
                     l3leaf.defaults.mlag_peer_vlan,
                     4094) }}
{%                 if loop.index == 1 %}
{%                     set mlag_primary_id = switch_id %}
{%                     set mlag_secondary_id = l3leaf.node_groups[l3leaf_node_group].nodes[loop.nextitem].id %}
  mlag_role: "primary"
  mlag_peer: {{ loop.nextitem }}
{%                     if l3leaf.node_groups[l3leaf_node_group].nodes[loop.nextitem].mgmt_ip | arista.avd.default() is truthy %}
  mlag_peer_mgmt_ip: {{ l3leaf.node_groups[l3leaf_node_group].nodes[loop.nextitem].mgmt_ip | ansible.netcommon.ipaddr('address') }}
{%                     endif %}
  mlag_ip: {% include templates[design.type].ip_addressing[type].mlag_ip_primary %}

  mlag_peer_ip: {% include templates[design.type].ip_addressing[type].mlag_ip_secondary %}

  mlag_l3_ip: {% include templates[design.type].ip_addressing[type].mlag_l3_ip_primary %}

  mlag_peer_l3_ip: {% include templates[design.type].ip_addressing[type].mlag_l3_ip_secondary %}

{%                 elif loop.index == 2 %}
{%                     set mlag_primary_id = l3leaf.node_groups[l3leaf_node_group].nodes[loop.previtem].id %}
{%                     set mlag_secondary_id = switch_id %}
  mlag_role: "secondary"
  mlag_peer: {{ loop.previtem }}
{%                     if l3leaf.node_groups[l3leaf_node_group].nodes[loop.previtem].mgmt_ip | arista.avd.default() is truthy %}
  mlag_peer_mgmt_ip: {{ l3leaf.node_groups[l3leaf_node_group].nodes[loop.previtem].mgmt_ip | ansible.netcommon.ipaddr('address') }}
{%                     endif %}
  mlag_ip: {% include templates[design.type].ip_addressing[type].mlag_ip_secondary %}

  mlag_peer_ip: {% include templates[design.type].ip_addressing[type].mlag_ip_primary %}

  mlag_l3_ip: {% include templates[design.type].ip_addressing[type].mlag_l3_ip_secondary %}

  mlag_peer_l3_ip: {% include templates[design.type].ip_addressing[type].mlag_l3_ip_primary %}

{%                 endif %}
  vtep_ip: {% include templates[design.type].ip_addressing[type].vtep_ip_mlag %}

{%             else %}
  mlag: false
  vtep_ip: {% include templates[design.type].ip_addressing[type].vtep_ip %}

{%             endif %}

{# switch.evpn_services_l2_only #}
  evpn_services_l2_only: {{ l3leaf.node_groups[l3leaf_node_group].evpn_services_l2_only | arista.avd.default(
                            l3leaf.defaults.evpn_services_l2_only,
                            false) }}

{# switch.evpn_role #}
{# For l3leaf the default value is client #}
  evpn_role: {{ l3leaf.node_groups[l3leaf_node_group].evpn_role | arista.avd.default(
                l3leaf.defaults.evpn_role,
                'client') }}

{# switch.evpn_route_servers #}
{# For l3leaf the default value for EVPN Route Servers is content of the spines variable set above. For safety we fall back to [] #}
  evpn_route_servers: {{ l3leaf.node_groups[l3leaf_node_group].evpn_route_servers | arista.avd.default(
                         l3leaf.defaults.evpn_route_servers,
                         switch_spines,
                         []) }}

{# switch.isis_net #}
  isis_net: {{ isis_area_id }}.{{ isis_site_id }}.0001.{{ '%04d' | format(switch_id) }}.00

{%             set leaf = namespace() %}
{%             set leaf.vlans = []  %}
{%             set leaf.tenants = {} %}
{%             for tenant in tenants | arista.avd.natural_sort if tenant in switch_filter_tenants or "all" in switch_filter_tenants %}
{%                 set add_vrfs = {} %}
{%                 for vrf in tenants[tenant].vrfs | arista.avd.natural_sort %}
{%                     set add_svis = [] %}
{%                     for svi in tenants[tenant].vrfs[vrf].svis | arista.avd.natural_sort %}
{%                         for svi_tag in tenants[tenant].vrfs[vrf].svis[svi].tags | arista.avd.natural_sort %}
{%                             if svi_tag in switch_filter_tags or svi_tag == l3leaf_node_group or "all" in switch_filter_tags %}
{%                                 do add_svis.append(svi) %}
{%                                 do leaf.vlans.append(svi | int) %}
{%                                 break %}
{%                             endif %}
{%                         endfor %}
{%                     endfor %}
{# Append VRF if we found SVIs #}
{%                     if add_svis | length > 0 %}
{%                         do add_vrfs.update({ vrf: {"svis": add_svis}}) %}
{# Or Append VRF for tenants set in "always_include_vrfs_in_tenants" is set #}
{%                     elif switch_always_include_vrfs_in_tenants is arista.avd.contains([tenant, 'all']) %}
{%                         do add_vrfs.update({ vrf: {}}) %}
{%                     else %}
{# Or Append VRF if there is a BGP neighbor defined for this switch #}
{%                         for l3_interface in tenants[tenant].vrfs[vrf].l3_interfaces | arista.avd.natural_sort %}
{%                             if l3_interface.nodes is arista.avd.defined and l3_interface.ip_addresses is arista.avd.defined and l3_interface.interfaces is arista.avd.defined and inventory_hostname in l3_interface.nodes %}
{%                                 do add_vrfs.update({ vrf: {}}) %}
{%                             endif %}
{%                         endfor %}
{%                     endif %}
{%                 endfor %}
{%                 set add_l2vlans = [] %}
{%                 for l2vlan in tenants[tenant].l2vlans | arista.avd.natural_sort %}
{%                     for vlan_tag in tenants[tenant].l2vlans[l2vlan].tags | arista.avd.natural_sort %}
{%                         if vlan_tag in switch_filter_tags or vlan_tag == l3leaf_node_group or "all" in switch_filter_tags %}
{%                             do add_l2vlans.append(l2vlan) %}
{%                             do leaf.vlans.append(l2vlan | int) %}
{%                             break %}
{%                         endif %}
{%                     endfor %}
{%                 endfor %}
{%                 if add_vrfs | length > 0 or add_l2vlans | length > 0 %}
{%                     do leaf.tenants.update({ tenant: {"vrfs": add_vrfs, "l2vlans": add_l2vlans}}) %}
{%                 endif %}
{%             endfor %}

{# switch.tenants #}
  tenants: {{ leaf.tenants }}

{# switch.vlans #}
  vlans: {{ leaf.vlans | unique }}

{%             break %}
{%         endif %}
{%     endfor %}
{% endfor %}
