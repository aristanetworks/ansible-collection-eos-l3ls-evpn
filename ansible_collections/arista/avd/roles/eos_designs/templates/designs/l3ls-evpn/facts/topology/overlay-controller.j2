{% set topology_peers = [] %}

topology:

{# topology.links #}
  links:
{% for uplink_interface in switch.uplink_interfaces %}
{%     set uplink_switch = switch.uplink_switches[loop.index0] | arista.avd.default() %}
{%     if uplink_switch is arista.avd.defined and uplink_switch in groups[fabric_name] and hostvars[uplink_switch].switch is arista.avd.defined %}
{%         do topology_peers.append(uplink_switch) %}
    {{ uplink_interface }}:
      peer: {{ uplink_switch }}
      peer_interface: {{ switch.uplink_switch_interfaces[loop.index0 ] }}
      peer_type: {{ hostvars[uplink_switch].type }}
      peer_bgp_as: {{ hostvars[uplink_switch].switch.bgp_as | arista.avd.default() }}
      type: underlay_p2p
{%         if switch.p2p_link_interface_speed is arista.avd.defined %}
      speed: {{ switch.p2p_link_interface_speed }}
{%         endif %}
{%         if overlay_controller_p2p_bfd is arista.avd.defined(true) %}
      bfd: true
{%         endif %}
{%         if underlay_rfc5549 is arista.avd.defined(true) %}
      ipv6_enable: true
{%         else %}
{%             set uplink_interface_index = loop.index0 %}
      ip_address: {% include templates[design.type].ip_addressing[type].topology_links_ip %}

      peer_ip_address: {% include templates[design.type].ip_addressing[type].topology_links_peer_ip %}

{%         endif %}
{%     endif %}
{% endfor %}

{# topology.peers #}
{# Used during structured_config rendering to quickly scan if this switch has a peering towards the switch being rendered #}
  peers: {{ topology_peers }}
