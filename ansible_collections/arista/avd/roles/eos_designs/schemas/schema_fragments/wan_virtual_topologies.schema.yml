# Copyright (c) 2023-2024 Arista Networks, Inc.
# Use of this source code is governed by the Apache License 2.0
# that can be found in the LICENSE file.
# yaml-language-server: $schema=../../../../plugins/plugin_utils/schema/avd_meta_schema.json
# Line above is used by RedHat's YAML Schema vscode extension
# Use Ctrl + Space to get suggestions for every field. Autocomplete will pop up after typing 2 letters.
type: dict
keys:
  wan_virtual_topologies:
    type: dict
    description: |-
      PREVIEW: WAN Preview

      Configure Virtual Topologies for CV Pathfinder and AutoVPN.

      Auto create a control plane profile/policy/application and enforce it being first in the default VRF.
    keys:
      vrfs:
        type: list
        description: |-
          Map a VRF that exists in network_services to an AVT policy.
          TODO: missing default VRF behavior
        primary_key: name
        items:
          type: dict
          keys:
            name:
              type: str
              convert_types:
                - int
              description: VRF name.
            policy:
              type: str
              description: Name of the AVT policy to apply to this VRF.
      control_plane_virtual_topology:
        type: dict
        description: |-
          Always injected into the default VRF policy as the first entry.

          By default, if no path-groups are specified, all locally available path-groups
          are used in the generated load-balance policy.
        $ref: "eos_designs#/$defs/application_virtual_topologies"
        keys:
          name:
            type: str
            description: Optional name, if not set `CONTROL-PLANE-PROFILE` is used.
          id:
            type: int
            description: ID of the control plane AVT in the default VRF.
            default: 254
      policies:
        type: list
        description: |-
          List of virtual toplogies policies.

          For AutoVPN, each item in the list creates:
            * one policy with:
                * one `match` entry per `application_virtual_topologies` item
                  they are indexed using `10 * <list_index>` where `list_index` starts at `1`.
                * one `default-match`
            * one load-balance policy per `application_virtual_topologies` and one for the `default_virtual_topology`.
            * if the policy is associated with the default VRF, a special control-plane rule is injected
              in the policy with index `1` referring to a control-plane load-balance policy as defined under
              `control_plane_virtual_topology`.


          For CV Pathfinder, each item in the list creates:
            * one policy with:
                * one `match` entry per `application_virtual_topologies` item ordered as in the model.
                * one last match entry for the `default` application-profile using `default_virtual_topology` information.
            * one profile per `application_virtual_topologies` item.
            * one profile for the `default_virtual_topology`..
            * one load-balance policy per `application_virtual_topologies`.
            * one load_balance policy for the `default_virtual_topology`.
            * if the policy is associated with the default VRF, a special control-plane profile is configured
              and injected first in the policy assigned to the `default` VRF. This profile points to a
              control-plane load-balance policy as defined under `control_plane_virtual_topology`.

        primary_key: name
        items:
          type: dict
          keys:
            name:
              type: str
              description: Name of the AVT policy.
            application_virtual_topologies:
              type: list
              description: List of application specific virtual topologies.
              primary_key: application_profile
              items:
                type: dict
                $ref: "eos_designs#/$defs/application_virtual_topologies"
                keys:
                  application_profile:
                    type: str
                    description: The application profile to use for this virtual topology. It must be a defined `application_profile`.
                  name:
                    type: str
                    description: Optional name, if not set `<policy_name>_<application_profile>` is used.
                  id:
                    type: int
                    description: ID of the AVT in each VRFs. ID must be unique across all virtual topologies.
            default_virtual_topology:
              type: dict
              $ref: "eos_designs#/$defs/application_virtual_topologies"
              keys:
                name:
                  type: str
                  description: Optional name, if not set `<policy_name>_default` is used.
                id:
                  type: int
                  description: ID of the default AVT in each VRFs.
