# yaml-language-server: $schema=../../../../plugins/plugin_utils/schema/avd_meta_schema.json
# Line above is used by RedHat's YAML Schema vscode extension
# Use Ctrl + Space to get suggestions for every field. Autocomplete will pop up after typing 2 letters.
type: dict
dynamic_keys:
  "network_services_keys.name":
    type: list
    primary_key: name
    convert_types:
      - dict
    items:
      type: dict
      keys:
        name:
          type: str
          required: true
          description: |
            Specify a tenant name.
            Tenant provide a construct to group L3 VRFs and L2 VLANs.
            Networks services can be filtered by tenant name.
        mac_vrf_vni_base:
          type: int
          convert_types:
            - str
          min: 0
          max: 16770000
          description: |
            Base number for MAC VRF VXLAN Network Identifier (Required with VXLAN)
            VXLAN VNI is derived from the base number with simple addition.
            e.g. mac_vrf_vni_base = 10000, svi 100 = VNI 10100, svi 300 = VNI 10300.
        mac_vrf_id_base:
          type: int
          convert_types:
            - str
          min: 0
          max: 16770000
          description: |
            If not set, "mac_vrf_vni_base" will be used.
            Base number for MAC VRF RD/RT ID (Required unless mac_vrf_vni_base is set)
            ID is derived from the base number with simple addition.
            e.g. mac_vrf_id_base = 10000, svi 100 = RD/RT 10100, svi 300 = RD/RT 10300.
        vlan_aware_bundle_number_base:
          type: int
          convert_types:
            - str
          default: 0
          description: |
            Base number for vlan_aware_bundle.
            The "Assigned Number" part of RD/RT is derived from vrf_vni + vlan_aware_bundle_number_base.
        enable_mlag_ibgp_peering_vrfs:
          type: bool
          description: |
            MLAG IBGP peering per VRF.
            By default an IBGP peering is configured per VRF between MLAG peers on separate VLANs.
            Setting enable_mlag_ibgp_peering_vrfs: false under tenant will change this default to prevent configuration of these peerings and VLANs for all VRFs in the tenant.
            This setting can be overridden per VRF.
        vrfs:
          type: list
          primary_key: name
          convert_types:
            - str
          description: |
            vrf "default" is supported under network-services. Currently the supported options for "default" vrf are route-target,
            route-distinguisher settings, structured_config, raw_eos_cli in bgp and SVIs are the only supported interface type.
            Vlan-aware-bundles are supported as well inside default vrf. OSPF is not supported currently.
          items:
            type: dict
            keys:
              name:
                type: str
              description:
                type: str
                description: VRF description
              vrf_vni:
                type: int
                convert_types:
                  - str
                min: 1
                max: 1024
                description: |
                  Required if "vrf_id" is not set.
                  The VRF VNI range is not limited, but if vrf_id is not set, "vrf_vni" is used for calculating MLAG IBGP peering vlan id.
                  See "mlag_ibgp_peering_vrfs.base_vlan" for details.
                  If vrf_vni > 10000 make sure to adjust "mac_vrf_vni_base" accordingly to avoid overlap.
              vrf_id:
                type: int
                convert_types:
                  - str
                min: 1
                max: 1024
                description: |
                  Required if "vrf_vni" is not set.
                  "vrf_id" is used as default value for "vrf_vni" and "ospf.process_id" unless those are set.
                  "vrf_id" is preferred over "vrf_vni" for VRF RD/RT ID before vrf_vni
                  "vrf_id" is preferred over "vrf_vni" for MLAG IBGP peering vlan, see "mlag_ibgp_peering_vrfs.base_vlan" for details
              mlag_ibgp_peering_ipv4_pool:
                type: str
                description: |
                  IPv4_address/Mask
                  The subnet used for iBGP peering in the VRF.
                  Each MLAG pair will be assigned a subnet based on the ID of the primary MLAG switch
                  If not set, "mlag_peer_l3_ipv4_pool" or "mlag_peer_ipv4_pool" will be used
              ip_helpers:
                type: list
                primary_key: ip_helper
                convert_types:
                  - dict
                description: IP helper for DHCP relay
                items:
                  type: dict
                  keys:
                    ip_helper:
                      type: str
                      description: IPv4 DHCP server IP
                    source_interface:
                      type: str
                      description: Interface name
                    source_vrf:
                      type: str
                      description: VRF to originate DHCP relay packets to DHCP server. If not set, uses current VRF
              enable_mlag_ibgp_peering_vrfs:
                type: bool
                description: |
                  MLAG IBGP peering per VRF (optional)
                  By default an IBGP peering is configured per VRF between MLAG peers on separate VLANs.
                  Setting enable_mlag_ibgp_peering_vrfs: false under vrf will change this default and/or override the tenant-wide setting
              mlag_ibgp_peering_vlan:
                type: int
                convert_types:
                  - str
                description: |
                  Manually define the VLAN used on the MLAG pair for the iBGP session (optional)
                  By default this parameter is calculated using the following formula: <mlag_ibgp_peering_vrfs.base_vlan> + <vrf_id> - 1
                min: 1
                max: 4096
              vtep_diagnostic:
                type: dict
                description: |
                  Enable VTEP Network diagnostics (Optional)
                  This will create a loopback with virtual source-nat enable to perform diagnostics from the switch
                keys:
                  loopback:
                    type: int
                    convert_types:
                      - str
                    description: |
                      Loopback interface number, required (when vtep_diagnotics defined)
                    min: 2
                    max: 2100
                  loopback_ip_range:
                    type: str
                    description: |
                      IPv4_address/Mask
                      Loopback ip range, a unique ip is derived from this ranged and assigned
                      to each l3 leaf based on it's unique id, ptional (loopback is not created unless loopback_ip_range or loopback_ip_pools are set)
                  loopback_ip_pools:
                    type: list
                    description: |
                      For inventories with multiple PODs a loopback range can be set per POD to avoid overlaps.
                      This only takes effect when loopback_ip_range is not defined, ptional (loopback is not created unless loopback_ip_range or loopback_ip_pools are set)
                    items:
                      type: dict
                      keys:
                        pod:
                          type: str
                          description: POD name
                        ipv4_pool:
                          type: str
                          description: IPv4_address/Mask
              ospf:
                type: dict
                description: |
                  Dictionary for router OSPF configuration (optional)
                  This will create an ospf routing instance in the tenant VRF. If there is no nodes definition, the ospf instance will be
                  created on all leafs where the vrf is deployed. This will also cause automatic ospf redistribution into bgp unless
                  explicitly turned off with "redistribute_ospf: false".
                keys:
                  enabled:
                    type: bool
                  process_id:
                    type: int
                    convert_types:
                      - str
                    description: If not set, "vrf_id" will be used.
                  router_id:
                    type: str
                    description: If not set, switch router_id will be used.
                  max_lsa:
                    type: int
                    convert_types:
                      - str
                  bfd:
                    type: bool
                    default: false
                  redistribute_bgp:
                    type: dict
                    keys:
                      enabled:
                        type: bool
                        default: true
                      route_map:
                        type: str
                        description: Route-map name
                  nodes:
                    type: list
                    items:
                      type: str
                      description: Hostname
              redistribute_ospf:
                type: bool
                default: true
                description: Non-selectively enabling or disabling redistribute ospf inside the VRF (optional)
              svis:
                type: list
                primary_key: id
                convert_types:
                  - dict
                description: |
                  Dictionary of SVIs
                  This will create both the L3 SVI and L2 VLAN based on filters applied to l3leaf and l2leaf.
                items:
                  type: dict
                  keys:
                    id:
                      type: int
                      convert_types:
                        - str
                      description: SVI interface id and VLAN id.
                      required: true
                      min: 1
                      max: 4096
                    vni_override:
                      type: int
                      convert_types:
                        - str
                      min: 1
                      max: 16777215
                      description: |
                        By default the vni will be derived from "mac_vrf_vni_base"
                        The vni_override allows us to override this value and statically define it (optional)
                    rt_override:
                      type: int
                      convert_types:
                        - str
                      min: 1
                      max: 16777215
                      description: |
                        By default the MAC VRF RD/RT ID will be derived from "mac_vrf_id_base"
                        The rt_override allows us to override this value and statically define it (optional)
                        If not set, vni_override will be used.
                    profile:
                      type: str
                      description: |
                        SVI profile name to apply
                        If variables are configured in profile AND SVI, SVI information will overwrite profile
                    name:
                      type: str
                      description: VLAN name
                    description:
                      type: str
                      description: |
                        SVI description
                      default: "VLAN name"
                    tags:
                      type: list
                      description: |
                        Tags leveraged for networks services filtering
                        Tags are matched against "filter.tags" defined under Fabric Topology variables
                        Tags are also matched against the "node_group" name under Fabric Topology variables
                      items:
                        type: str
                        default: all
                    enabled:
                      type: bool
                      description: Enable or disable interface
                    trunk_groups:
                      type: list
                      items:
                        type: str
                        description: |
                          Trunk groups are used for limiting vlans to trunk ports assigned to the same trunk group
                          Requires "enable_trunk_groups: true"
                    evpn_l2_multicast:
                      type: bool
                      description: |
                        Explicitly enable or disable evpn_l2_multicast to override setting of tenants.<tenant>.evpn_l2_multicast.enabled.
                        When evpn_l2_multicast.enabled is set to true for a vlan or a tenant, "igmp snooping" and "igmp snooping querier" will always be enabled - overriding those individual settings.
                    igmp_snooping_enabled:
                      type: bool
                      default: true
                      description: Enable IGMP Snooping
                    igmp_snooping_querier:
                      type: dict
                      keys:
                        enabled:
                          type: bool
                          default: false
                        source_address:
                          type: str
                          description: |
                            IPv4_address
                            If not set, IP address of "Loopback0" will be used.
                        version:
                          type: int
                          convert_types:
                            - str
                          valid_values:
                            - 1
                            - 2
                            - 3
                          default: 2
                    ip_address_virtual:
                      type: str
                      description: |
                        IPv4_address/Mask
                        ip address virtual to configure VXLAN Anycast IP address
                        Conserves IP addresses in VXLAN deployments as it doesn't require unique IP addresses on each node.
                    ipv6_address_virtual:
                      type: str
                      description: |
                        IPv6_address/Mask
                        ipv6 address virtuals to configure VXLAN Anycast IP address (Optional)
                        The below "ipv6_address_virtual" key will be deprecated in AVD v4.0 in favor of the new "ipv6_address_virtuals"
                        If both "ipv6_address_virtual" and "ipv6_address_virtuals" are set, all addresses will be configured
                    ipv6_address_virtuals:
                      type: list
                      items:
                        type: str
                        description: IPv6_address/Mask
                    ip_address_virtual_secondaries:
                      type: list
                      items:
                        type: str
                        description: IPv4_address/Mask
                    ip_virtual_router_addresses:
                      type: list
                      items:
                        type: str
                      description: |
                        IPv4_address/Mask or IPv4_address
                        note, also requires an IP address to be configured on the SVI where it is applied.
                    ipv6_virtual_router_addresses:
                      type: str
                      description: IPv6_address
                    ip_helpers:
                      type: list
                      primary_key: ip_helper
                      convert_types:
                        - dict
                      description: IP helper for DHCP relay
                      items:
                        type: dict
                        keys:
                          ip_helper:
                            type: str
                            description: IPv4 DHCP server IP
                          source_interface:
                            type: str
                            description: Interface name
                          source_vrf:
                            type: str
                            description: VRF to originate DHCP relay packets to DHCP server. If not set, uses current VRF
                    vxlan:
                      type: bool
                      default: true
                      description: Extend this SVI over VXLAN
                    nodes:
                      type: list
                      primary_key: node
                      convert_types:
                        - str
                      description: Define node specific configuration, such as unique IP addresses.
                      items:
                        type: dict
                        keys:
                          node:
                            type: str
                            description: l3_leaf inventory hostname
                          ip_helpers:
                            type: list
                            primary_key: ip_helper
                            convert_types:
                              - dict
                            description: IP helper for DHCP relay
                            items:
                              type: dict
                              keys:
                                ip_helper:
                                  type: str
                                  description: IPv4 DHCP server IP
                                source_interface:
                                  type: str
                                  description: Interface name
                                source_vrf:
                                  type: str
                                  description: VRF to originate DHCP relay packets to DHCP server. If not set, uses current VRF
                          ip_address:
                            type: str
                            description: |
                              IPv4_address/Mask
                              Device unique IP address for node.
                          ipv6_address:
                            type: str
                            description: |
                              IPv6_address/Mask
                              Device unique IPv6 address for node.
                          ip_address_virtual_secondaries:
                            type: list
                            items:
                              type: str
                              description: IPv4_address/Mask
                          ip_virtual_router_addresses:
                            type: list
                            items:
                              type: str
                            description: |
                              IPv4_address/Mask or IPv4_address
                              note, also requires an IP address to be configured on the SVI where it is applied.
                          structured_config:
                            type: dict
                            description: |
                              Custom structured config added under vlan_interfaces.<interface> for eos_cli_config_gen.
                              Overrides the setting on SVI level.
                          raw_eos_cli:
                            type: str
                            description: |
                              EOS CLI rendered directly on the VLAN interface in the final EOS configuration
                              Overrides the setting on SVI level.
                    mtu:
                      type: int
                      convert_types:
                        - str
                      description: Defined interface MTU
                    ospf:
                      type: dict
                      description: OSPF interface configuration
                      keys:
                        enabled:
                          type: bool
                        point_to_point:
                          type: bool
                          default: true
                        area:
                          type: int
                          convert_types:
                            - str
                          description: OSPF area id
                          default: 0
                        cost:
                          type: int
                          convert_types:
                            - str
                          description: OSPF link cost
                        authentication:
                          type: str
                          valid_values:
                            - "simple"
                            - "message-digest"
                        simple_auth_key:
                          type: str
                          description: Password used with simple authentication
                        message_digest_keys:
                          type: list
                          items:
                            type: dict
                            keys:
                              id:
                                type: int
                                convert_types:
                                  - str
                              hash_algorithm:
                                type: str
                                valid_values:
                                  - md5
                                  - sha1
                                  - sha256
                                  - sha384
                                  - sha512
                                default: sha512
                              key:
                                type: str
                                description: Key password
                    bgp:
                      type: dict
                      description: |
                        Structured configuration and eos cli commands rendered on router_bgp.vlans
                        This configuration will not be applied to vlan aware bundles
                      keys:
                        structured_config:
                          type: dict
                          description: |
                            Custom structured config added under vlan_interfaces.<interface> for eos_cli_config_gen.
                            Overrides the setting on SVI level.
                        raw_eos_cli:
                          type: str
                          description: |
                            EOS CLI rendered directly on the VLAN interface in the final EOS configuration
                            Overrides the setting on SVI level.
                    raw_eos_cli:
                      type: str
                      description: |
                        EOS CLI rendered directly on the VLAN interface in the final EOS configuration
                        Overrides the setting on SVI level
                    structured_config:
                      type: dict
                      description: |
                        Custom structured config added under vlan_interfaces.<interface> for eos_cli_config_gen.
                        Overrides the setting on SVI level.
              l3_interfaces:
                type: list
                description: |
                  List of L3 interfaces (Optional)
                  This will create IP routed interface inside VRF. Length of interfaces, nodes and ip_addresses must match
                items:
                  type: dict
                  keys:
                    interfaces:
                      type: list
                      items:
                        type: str
                        description: Interface name
                    ip_addresses:
                      type: list
                      items:
                        type: str
                        description: IPv4_address/Mask
                    nodes:
                      type: list
                      items:
                        type: str
                        description: Node
                    description:
                      type: str
                    enabled:
                      type: bool
                    mtu:
                      type: int
                      convert_types:
                        - str
                    raw_eos_cli:
                      type: str
                      description: |
                        EOS CLI rendered directly on the VLAN interface in the final EOS configuration
                        Overrides the setting on SVI level.
                    structured_config:
                      type: dict
                      description: |
                        Custom structured config added under vlan_interfaces.<interface> for eos_cli_config_gen.
                        Overrides the setting on SVI level.
                    ospf:
                      type: dict
                      description: OSPF interface configuration
                      keys:
                        enabled:
                          type: bool
                        point_to_point:
                          type: bool
                          default: false
                        area:
                          type: int
                          convert_types:
                            - str
                          description: OSPF area id
                          default: 0
                        cost:
                          type: int
                          convert_types:
                            - str
                          description: OSPF link cost
                        authentication:
                          type: str
                          valid_values:
                            - simple
                            - message-digest
                        simple_auth_key:
                          type: str
                          description: Password used with simple authentication
                        message_digest_keys:
                          type: list
                          items:
                            type: dict
                            keys:
                              id:
                                type: int
                                convert_types:
                                  - str
                              hash_algorithm:
                                type: str
                                valid_values:
                                  - md5
                                  - sha1
                                  - sha256
                                  - sha384
                                  - sha512
                                default: sha512
                              key:
                                type: str
                                description: Key password
              static_routes:
                type: list
                description: |
                  Dictionary of static routes for v4 and/or v6 (Optional).
                  This will create static routes inside the tenant VRF.
                  If nodes are not specified, all l3leafs that carry the VRF will also be applied the static routes.
                  If a node has a static route in the VRF, redistribute static will be automatically enabled in that VRF.
                  This automatic behavior can be overridden non-selectively with the redistribute_static knob for the VRF.
                items:
                  type: dict
                  keys:
                    destination_address_prefix:
                      type: str
                      description: IPv4_address/Mask
                    gateway:
                      type: str
                      description: IPv4_address
                    distance:
                      type: int
                      convert_types:
                        - str
                      min: 1
                      max: 255
                    tag:
                      type: int
                      convert_types:
                        - str
                      min: 0
                      max: 4294967295
                    name:
                      type: str
                      description: description
                    metric:
                      type: int
                      convert_types:
                        - str
                      min: 0
                      max: 4294967295
                    interface:
                      type: str
                    nodes:
                      type: list
                      items:
                        type: str
              ipv6_static_routes:
                type: list
                items:
                  type: dict
                  keys:
                    destination_address_prefix:
                      type: str
                      description: IPv4_address/Mask
                    gateway:
                      type: str
                      format: "ipv6"
                    distance:
                      type: int
                      convert_types:
                        - str
                      min: 1
                      max: 255
                    tag:
                      type: int
                      convert_types:
                        - str
                      min: 0
                      max: 4294967295
                    name:
                      type: str
                      description: description
                    metric:
                      type: int
                      convert_types:
                        - str
                      min: 0
                      max: 4294967295
                    interface:
                      type: str
                    nodes:
                      type: list
                      items:
                        type: str
              redistribute_static:
                type: bool
                description: Non-selectively enabling or disabling redistribute static inside the VRF (Optional).
              bgp_peers:
                type: list
                primary_key: ip_address
                convert_types:
                  - dict
                description: |
                  Dictionary of BGP peer definitions (Optional).
                  This will configure BGP neighbors inside the tenant VRF for peering with external devices.
                  The configured peer will automatically be activated for ipv4 or ipv6 address family based on the ip address.
                  Note, only ipv4 and ipv6 address families are currently supported in eos_designs.
                  For other address families, use custom_structured configuration with eos_cli_config_gen.
                items:
                  type: dict
                  keys:
                    ip_address:
                      type: str
                      description: IPv4_address or IPv6_address
                    remote_as:
                      type: int
                      convert_types:
                        - str
                      description: Remote ASN
                    description:
                      type: str
                    password:
                      type: str
                      description: Encrypted password
                    send_community:
                      type: str
                      description: |
                        'all' or a combination of 'standard', 'extended', 'large' and 'link-bandwidth (w/options)'
                    next_hop_self:
                      type: bool
                    timers:
                      type: str
                      description: BGP Keepalive and Hold Timer values in seconds as string <0-3600> <0-3600>
                    maximum_routes:
                      type: int
                      convert_types:
                        - str
                      min: 0
                      max: 4294967294
                      description: Maximum number of routes (0 means unlimited)
                    default_originate:
                      type: dict
                      keys:
                        always:
                          type: bool
                    update_source:
                      type: str
                    ebgp_multihop:
                      type: int
                      convert_types:
                        - str
                      min: 1
                      max: 255
                      description: Time-to-live in range of hops
                    nodes:
                      type: list
                      items:
                        type: str
                      description: Nodes is required to restrict configuration of BGP neighbors to certain nodes in the network.
                    set_ipv4_next_hop:
                      type: str
                      description: |
                        IPv4_address
                        Next hop settings can be either ipv4 or ipv6 for one neighbor, this will be applied by a uniquely generated route-map per neighbor.
                        Next hop takes precedence over route_map_out.
                    set_ipv6_next_hop:
                      type: str
                      description: |
                        IPv6_address
                        Next hop settings can be either ipv4 or ipv6 for one neighbor, this will be applied by a uniquely generated route-map per neighbor.
                        Next hop takes precedence over route_map_out.
                    route_map_out:
                      type: str
                      description: Route-map name
                    route_map_in:
                      type: str
                      description: Route-map name
                    prefix_list_in:
                      type: str
                      description: Prefix list name
                    prefix_list_out:
                      type: str
                      description: Prefix list name
                    local_as:
                      type: str
                      convert_types:
                        - int
                      description: |
                        Local BGP ASN
                        eg. "65001.1200"
                    weight:
                      type: int
                      convert_types:
                        - str
                      min: 0
                      max: 65535
                    bfd:
                      type: bool
              bgp:
                type: dict
                keys:
                  raw_eos_cli:
                    type: str
                    description: |
                      EOS CLI rendered directly on the VLAN interface in the final EOS configuration
                      Overrides the setting on SVI level.
                  structured_config:
                    type: dict
                    description: |
                      Custom structured config added under vlan_interfaces.<interface> for eos_cli_config_gen.
                      Overrides the setting on SVI level.
              bgp_peer_groups:
                type: list
                description: |
                  Dictionary of BGP peer groups definitions (Optional).
                  This will configure BGP peer groups to be used inside the tenant VRF for peering with external devices.
                  Since BGP peer groups are configured at higher BGP level, shared between VRFs,
                  peer_group names should not overlap between VRFs.
                items:
                  type: dict
                  keys:
                    name:
                      type: str
                      description: BGP peer group name
                    remote_as:
                      type: int
                      convert_types:
                        - str
                      description: Remote ASN
                    description:
                      type: str
                    send_community:
                      type: str
                      description: |
                        'all' or a combination of 'standard', 'extended', 'large' and 'link-bandwidth (w/options)'
                    next_hop_self:
                      type: bool
                    maximum_routes:
                      type: int
                      convert_types:
                        - str
                      min: 0
                      max: 4294967294
                    default_originate:
                      type: dict
                      keys:
                        enabled:
                          type: bool
                        always:
                          type: bool
                    update_source:
                      type: str
                    ebgp_multihop:
                      type: int
                      convert_types:
                        - str
                      min: 1
                      max: 255
                    nodes:
                      type: list
                      items:
                        type: str
                      description: |
                        Nodes is required to restrict configuration of BGP neighbors to certain nodes in the network.
                        If not set the peer-group is created on the device which has a bgp_peer mapped to corresponding peer_group.
                    set_ipv4_next_hop:
                      type: str
                      description: |
                        IPv4_address
                        Next hop settings can be either ipv4 or ipv6 for one neighbor, this will be applied by a uniquely generated route-map per neighbor.
                        Next hop takes precedence over route_map_out.
                    set_ipv6_next_hop:
                      type: str
                      description: |
                        IPv6_address
                        Next hop settings can be either ipv4 or ipv6 for one neighbor, this will be applied by a uniquely generated route-map per neighbor.
                        Next hop takes precedence over route_map_out.
                    route_map_out:
                      type: str
                      description: Route-map name
                    route_map_in:
                      type: str
                      description: Route-map name
                    local_as:
                      type: str
                      convert_types:
                        - int
                      description: |
                        Local BGP ASN
                        eg. "65001.1200"
                    weight:
                      type: int
                      convert_types:
                        - str
                      min: 0
                      max: 65535
                    bfd:
                      type: bool
              additional_route_targets:
                type: list
                description: Optional configuration of extra route-targets for this VRF. Useful for route-leaking or gateway between address families.
                items:
                  type: dict
                  keys:
                    type:
                      type: str
                      valid_values:
                        - import
                        - export
                    address_family:
                      type: str
                    route_target:
                      type: str
                    nodes:
                      type: list
                      items:
                        type: str
                      description: |
                        Nodes is required to restrict configuration of BGP neighbors to certain nodes in the network.
              raw_eos_cli:
                type: str
                description: |
                  EOS CLI rendered directly on the VLAN interface in the final EOS configuration
                  Overrides the setting on SVI level.
              structured_config:
                type: dict
                description: |
                  Custom structured config added under vlan_interfaces.<interface> for eos_cli_config_gen.
                  Overrides the setting on SVI level.
        l2vlans:
          type: list
          primary_key: id
          convert_types:
            - dict
          description: Define L2 network services organized by vlan id.
          items:
            type: dict
            keys:
              id:
                type: int
                convert_types:
                  - str
                min: 1
                max: 4096
                description: VLAN id
              vni_override:
                type: int
                convert_types:
                  - str
                min: 1
                max: 16777215
                description: |
                  By default the vni will be derived from mac_vrf_vni_base
                  The vni_override, allows to override this value and statically define it.
              rt_override:
                type: int
                convert_types:
                  - str
                min: 1
                max: 16777215
                description: |
                  By default the MAC VRF RD/RT ID will be derived from mac_vrf_id_base
                  The rt_override allows us to override this value and statically define it (Optional)
              name:
                type: str
                required: true
                description: VLAN name
              tags:
                type: list
                description: |
                  Tags leveraged for networks services filtering
                  Tags are matched against filter.tags defined under Fabric Topology variables
                  Tags are also matched against the node_group name under Fabric Topology variables
                items:
                  type: str
                  default: all
              vxlan:
                type: bool
                default: true
                description: Extend this L2VLAN over VXLAN
              trunk_groups:
                type: list
                items:
                  type: str
                  description: |
                    Trunk groups are used for limiting vlans to trunk ports assigned to the same trunk group
                    Requires enable_trunk_groups: true
              evpn_l2_multicast:
                type: bool
                description: |
                  Explicitly enable or disable evpn_l2_multicast to override setting of tenants.<tenant>.evpn_l2_multicast.enabled.
                  When evpn_l2_multicast.enabled is set to true for a vlan or a tenant, igmp snooping and igmp snooping querier will always be enabled - overriding those individual settings.
              igmp_snooping_enabled:
                type: bool
                default: true
                description: Activate or deactivate IGMP snooping
              igmp_snooping_querier:
                type: dict
                description: |
                  Enable igmp snooping querier, by default using IP address of Loopback 0.
                  When enabled, igmp snooping querier will only be configured on l3 devices, i.e., uplink_type: p2p.
                keys:
                  enabled:
                    type: bool
                    default: false
                    description: Will be enabled automatically if evpn_l2_multicast is enabled.
                  source_address:
                    type: str
                    description: |
                      IPv4_address
                      If not set, IP address of "Loopback0" will be used.
                  version:
                    type: int
                    convert_types:
                      - str
                    valid_values:
                      - 1
                      - 2
                      - 3
                    default: 2
              bgp:
                type: dict
                keys:
                  raw_eos_cli:
                    type: str
                    description: |
                      EOS CLI rendered directly on the VLAN interface in the final EOS configuration
                      Overrides the setting on SVI level
