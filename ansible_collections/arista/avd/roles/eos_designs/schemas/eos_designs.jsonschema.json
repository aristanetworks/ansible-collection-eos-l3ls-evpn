{
  "type": "object",
  "properties": {
    "default_interfaces": {
      "type": "array",
      "description": "- Set default uplink, downlink, and MLAG interfaces, which will be used if these interfaces are not defined on a device (either directly or through inheritance).\n- These are defined based on the combination of node_type (e.g., l3leaf or spine) and a regex for matching the platform.\n- A list of interfaces or interface ranges can be specified.\n- Each list item supports range syntax that can be expanded into a list of interfaces. Interface range examples:\n  - Ethernet49-52/1: Expands to [ Ethernet49/1, Ethernet50/1, Ethernet51/1, Ethernet52/1 ]\n  - Ethernet1/31-34/1: Expands to [ Ethernet1/31/1, Ethernet1/32/1, Ethernet1/33/1, Ethernet1/34/1 ]\n  - Ethernet49-50,53-54: Expands to [ Ethernet49, Ethernet50, Ethernet53, Ethernet54 ]\n  - Ethernet1-2/1-4: Expands to [ Ethernet1/1, Ethernet1/2, Ethernet1/3, Ethernet1/4, Ethernet2/1, Ethernet2/2, Ethernet2/3, Ethernet2/4 ]\n- `uplink_interfaces` and `mlag_interfaces` under `default_interfaces` are directly inherited by `uplink_interfaces` and `mlag_interfaces`.\n- `downlink_interfaces` are referenced by the child switch (e.g., the leaf in a leaf/spine network). The child switch leverages an upstream switch's `default_downlink_interfaces` using the child switch ID.  This is then used to build `uplink_switch_interfaces` for that child.\n  - In the case of `max_parallel_uplinks` > 1 the `default_downlink_interfaces` are mapped with consecutive downlinks per child ID.\n  - Example for `max_parallel_uplinks: 2`, downlink interfaces will be mapped as `[ <downlink1 to leaf-id1>, <downlink2 to leaf-id1>, <downlink1 to leaf-id2>, <downlink2 to leaf-id2> ...]`\n- Please note that no default interfaces are defined in AVD itself. You will need to create your own based on the example below.\n\nExample:\n\n```yaml\ndefault_interfaces:\n  - types: [ spine, l3leaf ]\n    platforms: [ \"7050[SC]X3\", vEOS.*, default ]\n    uplink_interfaces: [ Ethernet49-54/1 ]\n    mlag_interfaces: [ Ethernet55-56/1 ]\n    downlink_interfaces: [ Ethernet1-32/1 ]\n```\n",
      "items": {
        "type": "object",
        "properties": {
          "types": {
            "type": "array",
            "description": "List of node type keys",
            "items": {
              "type": "string"
            },
            "title": "Types"
          },
          "platforms": {
            "type": "array",
            "description": "List of platform families\nThis is defined as a Python regular expression that matches the full platform type\n",
            "items": {
              "type": "string",
              "description": "Arista platform family regular expression"
            },
            "title": "Platforms"
          },
          "uplink_interfaces": {
            "type": "array",
            "description": "List of uplink interfaces or uplink interface ranges",
            "items": {
              "type": "string",
              "description": "Interface range or interface"
            },
            "title": "Uplink Interfaces"
          },
          "mlag_interfaces": {
            "type": "array",
            "description": "List of MLAG interfaces or MLAG interface ranges",
            "items": {
              "type": "string",
              "description": "Interface range or interface"
            },
            "title": "MLAG Interfaces"
          },
          "downlink_interfaces": {
            "type": "array",
            "description": "List of downlink interfaces or downlink interface ranges",
            "items": {
              "type": "string",
              "description": "Interface range or interface"
            },
            "title": "Downlink Interfaces"
          }
        },
        "required": [
          "types",
          "platforms"
        ],
        "additionalProperties": false
      },
      "title": "Default Interfaces"
    },
    "default_node_types": {
      "type": "array",
      "description": "Uses hostname matches against a regular expression to determine the node type.",
      "items": {
        "type": "object",
        "properties": {
          "node_type": {
            "type": "string",
            "description": "Resulting node type when regex matches",
            "title": "Node Type"
          },
          "match_hostnames": {
            "type": "array",
            "description": "Regular expressions to match against hostnames",
            "items": {
              "type": "string",
              "description": "Regex needs to match full hostname (i.e. is bounded by ^ and $ elements)"
            },
            "title": "Match Hostnames"
          }
        },
        "required": [
          "node_type",
          "match_hostnames"
        ],
        "additionalProperties": false
      },
      "title": "Default Node Types"
    }
  },
  "additionalProperties": true
}