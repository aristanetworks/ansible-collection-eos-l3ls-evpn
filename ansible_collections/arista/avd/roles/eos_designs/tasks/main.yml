---
- name: Verify Requirements
  tags: [always, avd_req]
  delegate_to: localhost
  when: avd_requirements is not defined
  arista.avd.verify_requirements:
    requirements: "{{ lookup('file', requirements_path ~ '/requirements.txt').splitlines() }}"
    avd_ignore_requirements: "{{ avd_ignore_requirements | default(false) }}"
  vars:
    requirements_path: "{{ (role_path | split('/'))[0:-2] | join('/') }}"
  run_once: true
  register: avd_requirements

- name: Set eos_designs facts
  tags: [build, provision, facts]
  arista.avd.eos_designs_facts:
    avd_switch_facts: true
    #cprofile_file: "eos_designs_facts.prof"
    template_output: true
    schema: "{{ lookup('ansible.builtin.file', role_schema_path) | from_yaml }}"
    conversion_mode: "{{ avd_data_conversion_mode }}"
    validation_mode: "{{ avd_data_validation_mode }}"
  check_mode: false
  run_once: true

- name: Set eos_designs facts per device
  tags: [build, provision, facts]
  ansible.builtin.set_fact:
    switch: "{{ avd_switch_facts[inventory_hostname].switch }}"
  delegate_to: localhost
  changed_when: false

- name: Generate YAML file with hostvars (only for debugging)
  tags: [debug, never]
  ansible.builtin.template:
    src: debug/generate-debug-vars.j2
    dest: "{{ structured_dir }}/{{ inventory_hostname }}-debug-vars.yml"
    mode: 0664
  delegate_to: localhost
  changed_when: false

- name: Generate device configuration in structured format
  tags: [build, provision]
  arista.avd.yaml_templates_to_facts:
    templates: "{{ templates.structured_config }}"
    dest: "{{ structured_dir }}/{{ inventory_hostname }}.{{ avd_structured_config_file_format }}"
    #cprofile_file: "structured-{{inventory_hostname}}.prof"
    template_output: true
    schema: "{{ lookup('ansible.builtin.file', role_schema_path) | from_yaml }}"
    conversion_mode: "{{ avd_data_conversion_mode }}"
    validation_mode: "{{ avd_data_validation_mode }}"
    output_schema: "{{ lookup('ansible.builtin.file', structured_config_schema_path) | from_yaml }}"
  delegate_to: localhost
  check_mode: false
  register: structured_config

- name: Generate fabric documentation
  tags: [build, provision, documentation]
  run_once: true
  delegate_to: localhost
  check_mode: false
  ansible.builtin.copy:
    content: "{{ lookup('template', 'documentation/fabric-documentation.j2') | arista.avd.add_md_toc(skip_lines=3) }}"
    dest: "{{ fabric_dir }}/{{ fabric_name }}-documentation.md"
    mode: 0664

- name: Generate fabric point-to-point links summary in csv format.
  tags: [build, provision, documentation]
  ansible.builtin.template:
    src: documentation/fabric-p2p-links.j2
    dest: "{{ fabric_dir }}/{{ fabric_name }}-p2p-links.csv"
    mode: 0664
  delegate_to: localhost
  run_once: true
  check_mode: false

- name: Generate fabric topology in csv format.
  tags: [build, provision, documentation]
  ansible.builtin.template:
    src: documentation/fabric-topology.j2
    dest: "{{ fabric_dir }}/{{ fabric_name }}-topology.csv"
    mode: 0664
  delegate_to: localhost
  run_once: true
  check_mode: false

- name: Remove avd_switch_facts
  tags: [build, provision, facts, remove_avd_switch_facts]
  ansible.builtin.set_fact:
    avd_switch_facts: null
  run_once: true
  check_mode: false
