{% if not generate_default_config is arista.avd.defined(false) %}
!RANCID-CONTENT-TYPE: arista
{% endif %}
{# eos - System Boot Configuration #}
{% if boot is arista.avd.defined %}
!
{%     if boot.secret.key is arista.avd.defined %}
{%         if boot.secret.hash_algorithm is arista.avd.defined('md5') %}
{%             set hash_algorithm = 5 %}
{%         endif %}
boot secret {{ hash_algorithm | arista.avd.default('sha512') }} {{ boot.secret.key }}
{%     endif %}
{% endif %}
{# terminal settings: width and length #}
{% if terminal is arista.avd.defined %}
!
{%     if terminal.width is arista.avd.defined %}
terminal width {{ terminal.width }}
{%     endif %}
{%     if terminal.length is arista.avd.defined %}
terminal length {{ terminal.length }}
{%     endif %}
{% endif %}
{# cli prompt #}
{% if prompt is arista.avd.defined %}
!
prompt {{ prompt }}
{% endif %}
{# eos - aliases #}
{% if aliases is arista.avd.defined %}
!
{{ aliases }}
{% endif %}
{# eos - Hardware counters #}
{% if hardware_counters.features is arista.avd.defined %}
!
{%     for feature in hardware_counters.features %}
{%         if 'name' in feature %}
hardware counter feature {{ feature.name }} {{ feature.direction }}
{%         else %}
{%             for feat in feature | arista.avd.convert_dicts('name','direction') %}
hardware counter feature {{ feat.name }} {{ feat.direction }}
{%             endfor %}
{%         endif %}
{%     endfor %}
{% endif %}
{# eos - Service Routing Configuration #}
{% if service_routing_configuration_bgp.no_equals_default is arista.avd.defined(true) %}
!
service routing configuration bgp no-equals-default
{% endif %}
{# eos - TerminAttr #}
{% if daemon_terminattr is arista.avd.defined %}
{%     set cvp_config = namespace() %}
!
daemon TerminAttr
{%     set cvp_config.cli = "exec /usr/bin/TerminAttr" %}
{%     for cluster in daemon_terminattr.clusters | arista.avd.natural_sort('name') %}
{%         set cvp_config.cli = cvp_config.cli ~  " -cvopt " ~ cluster.name ~ ".addr=" ~ cluster.cvaddrs | join(',') %}
{%         if cluster.cvauth.method is arista.avd.defined('key') %}
{%             set cvp_config.cli = cvp_config.cli ~ " -cvopt " ~ cluster.name ~ ".auth=key," ~ cluster.cvauth.key | arista.avd.default('') %}
{%         elif cluster.cvauth.method is arista.avd.defined('token') and cluster.cvauth.token_file is arista.avd.defined %}
{%             set cvp_config.cli = cvp_config.cli ~ " -cvopt " ~ cluster.name ~ ".auth=token," ~ cluster.cvauth.token_file %}
{%         elif cluster.cvauth.method is arista.avd.defined('token-secure') and cluster.cvauth.token_file is arista.avd.defined %}
{%             set cvp_config.cli = cvp_config.cli ~ " -cvopt " ~ cluster.name ~ ".auth=token-secure," ~ cluster.cvauth.token_file %}
{%         endif %}
{%         if cluster.cvvrf is arista.avd.defined %}
{%             set cvp_config.cli = cvp_config.cli ~ " -cvopt " ~ cluster.name ~ ".vrf=" ~ cluster.cvvrf %}
{%         endif %}
{%         if cluster.cvsourceip is arista.avd.defined %}
{%             set cvp_config.cli = cvp_config.cli ~ " -cvopt " ~ cluster.name ~ ".sourceip=" ~ cluster.cvsourceip %}
{%         endif %}
{%         if cluster.cvproxy is arista.avd.defined %}
{%             set cvp_config.cli = cvp_config.cli ~ " -cvopt " ~ cluster.name ~ ".proxy=" ~ cluster.cvproxy %}
{%         endif %}
{%         if cluster.cvobscurekeyfile is arista.avd.defined %}
{%             set cvp_config.cli = cvp_config.cli ~ " -cvopt " ~ cluster.name ~ ".obscurekeyfile=" ~ cluster.cvobscurekeyfile %}
{%         endif %}
{%     endfor %}
{%     if daemon_terminattr.cvaddrs is arista.avd.defined %}
{%         set cvp_config.cli = cvp_config.cli ~ " -cvaddr=" ~ daemon_terminattr.cvaddrs | join(',') %}
{%         if daemon_terminattr.cvauth.method is arista.avd.defined('key') %}
{%             set cvp_config.cli = cvp_config.cli ~ " -cvauth=key," ~ daemon_terminattr.cvauth.key | arista.avd.default('') %}
{%         elif daemon_terminattr.cvauth.method is arista.avd.defined('token') and daemon_terminattr.cvauth.token_file is arista.avd.defined %}
{%             set cvp_config.cli = cvp_config.cli ~ " -cvauth=token," ~ daemon_terminattr.cvauth.token_file %}
{%         elif daemon_terminattr.cvauth.method is arista.avd.defined('token-secure') and daemon_terminattr.cvauth.token_file is arista.avd.defined %}
{%             set cvp_config.cli = cvp_config.cli ~ " -cvauth=token-secure," ~ daemon_terminattr.cvauth.token_file %}
{%         endif %}
{%     endif %}
{%     if daemon_terminattr.cvvrf is arista.avd.defined %}
{%         set cvp_config.cli = cvp_config.cli ~ " -cvvrf=" ~ daemon_terminattr.cvvrf %}
{%     endif %}
{%     if daemon_terminattr.cvsourceip is arista.avd.defined %}
{%         set cvp_config.cli = cvp_config.cli ~ " -cvsourceip=" ~ daemon_terminattr.cvsourceip %}
{%     endif %}
{%     if daemon_terminattr.cvgnmi is arista.avd.defined(true) %}
{%         set cvp_config.cli = cvp_config.cli ~ " -cvgnmi" %}
{%     endif %}
{%     if daemon_terminattr.cvobscurekeyfile is arista.avd.defined(true) %}
{%         set cvp_config.cli = cvp_config.cli ~ " -cvobscurekeyfile" %}
{%     endif %}
{%     if daemon_terminattr.disable_aaa is arista.avd.defined(true) %}
{%         set cvp_config.cli = cvp_config.cli ~ " -disableaaa" %}
{%     endif %}
{%     if daemon_terminattr.cvproxy is arista.avd.defined %}
{%         set cvp_config.cli = cvp_config.cli ~ " -cvproxy=" ~ daemon_terminattr.cvproxy %}
{%     endif %}
{%     if daemon_terminattr.grpcaddr is arista.avd.defined %}
{%         set cvp_config.cli = cvp_config.cli ~ " -grpcaddr=" ~ daemon_terminattr.grpcaddr %}
{%     endif %}
{%     if daemon_terminattr.grpcreadonly is arista.avd.defined(true) %}
{%         set cvp_config.cli = cvp_config.cli ~ " -grpcreadonly" %}
{%     endif %}
{%     if daemon_terminattr.smashexcludes is arista.avd.defined %}
{%         set cvp_config.cli = cvp_config.cli ~ " -smashexcludes=" ~ daemon_terminattr.smashexcludes %}
{%     endif %}
{%     if daemon_terminattr.ingestexclude is arista.avd.defined %}
{%         set cvp_config.cli = cvp_config.cli ~ " -ingestexclude=" ~ daemon_terminattr.ingestexclude %}
{%     endif %}
{%     if daemon_terminattr.taillogs is arista.avd.defined %}
{%         set cvp_config.cli = cvp_config.cli ~ " -taillogs=" ~ daemon_terminattr.taillogs %}
{%     else %}
{%         set cvp_config.cli = cvp_config.cli ~ " -taillogs" %}
{%     endif %}
{%     if daemon_terminattr.ecodhcpaddr is arista.avd.defined %}
{%         set cvp_config.cli = cvp_config.cli ~ " -ecodhcpaddr=" ~ daemon_terminattr.ecodhcpaddr %}
{%     endif %}
{%     if daemon_terminattr.ipfix is arista.avd.defined(true) %}
{%         set cvp_config.cli = cvp_config.cli ~ " -ipfix" %}
{%     elif daemon_terminattr.ipfix is arista.avd.defined(false) %}
{%         set cvp_config.cli = cvp_config.cli ~ " -ipfix=false" %}
{%     endif %}
{%     if daemon_terminattr.ipfixaddr is arista.avd.defined %}
{%         set cvp_config.cli = cvp_config.cli ~ " -ipfixaddr=" ~ daemon_terminattr.ipfixaddr %}
{%     endif %}
{%     if daemon_terminattr.sflow is arista.avd.defined(true) %}
{%         set cvp_config.cli = cvp_config.cli ~ " -sflow" %}
{%     elif daemon_terminattr.sflow is arista.avd.defined(false) %}
{%         set cvp_config.cli = cvp_config.cli ~ " -sflow=false" %}
{%     endif %}
{%     if daemon_terminattr.sflowaddr is arista.avd.defined %}
{%         set cvp_config.cli = cvp_config.cli ~ " -sflowaddr=" ~ daemon_terminattr.sflowaddr %}
{%     endif %}
   {{ cvp_config.cli }}
   no shutdown
{% endif %}
{# eos - daemons #}
{% if daemons is arista.avd.defined %}
{%     for daemon in daemons | arista.avd.natural_sort('name') %}
!
daemon {{ daemon.name }}
{%         if daemon.exec is arista.avd.defined %}
   exec {{ daemon.exec }}
{%         endif %}
{%         if daemon.enabled is arista.avd.defined(false) %}
   shutdown
{%         else %}
   no shutdown
{%         endif %}
{%     endfor %}
{% endif %}
{% if dhcp_relay is arista.avd.defined %}
!
dhcp relay
{%     for server in dhcp_relay.servers | arista.avd.natural_sort %}
   server {{ server }}
{%     endfor %}
{%     if dhcp_relay.tunnel_requests_disabled is arista.avd.defined(true) %}
   tunnel requests disabled
{%     elif dhcp_relay.tunnel_requests_disabled is arista.avd.defined(false) %}
   no tunnel requests disabled
{%     endif %}
{% endif %}
{# eos - ip dhcp relay #}
{% if ip_dhcp_relay.information_option is arista.avd.defined(true) %}
!
ip dhcp relay information option
{% endif %}
{# switchport default mode #}
{% if switchport_default.mode is arista.avd.defined('routed') %}
!
switchport default mode routed
{% elif switchport_default.mode is arista.avd.defined('access') %}
!
switchport default mode access
{% endif %}
{# switchport default phone #}
{% if switchport_default.phone.cos is arista.avd.defined %}
!
switchport default phone cos {{ switchport_default.phone.cos }}
{% endif %}
{% if switchport_default.phone.trunk is arista.avd.defined and switchport_default.phone.trunk == 'untagged' %}
!
switchport default phone trunk untagged
{% endif %}
{% if switchport_default.phone.vlan is arista.avd.defined and switchport_default.phone.vlan %}
!
switchport default phone vlan {{ switchport_default.phone.vlan }}
{% endif %}
{# Internal VLAN allocation policy  #}
{% if  vlan_internal_order.allocation is arista.avd.defined
   and vlan_internal_order.range.beginning is arista.avd.defined
   and vlan_internal_order.range.ending is arista.avd.defined %}
!
vlan internal order {{ vlan_internal_order.allocation }} range {{ vlan_internal_order.range.beginning }} {{ vlan_internal_order.range.ending }}
{% endif %}
{# eos - IP IGMP Snooping #}
{% if ip_igmp_snooping is arista.avd.defined and ip_igmp_snooping != { "globally_enabled": true } %}
!
{%     if ip_igmp_snooping.globally_enabled is arista.avd.defined(false) %}
no ip igmp snooping
{%     else %}
{%         set proxy_cli = [] %}
{%         if ip_igmp_snooping.proxy is arista.avd.defined(true) %}
{%             do proxy_cli.append("ip igmp snooping proxy") %}
{%         endif %}
{%         if ip_igmp_snooping.robustness_variable is arista.avd.defined %}
ip igmp snooping robustness-variable {{ ip_igmp_snooping.robustness_variable }}
{%         endif %}
{%         if ip_igmp_snooping.restart_query_interval is arista.avd.defined %}
ip igmp snooping restart query-interval {{ ip_igmp_snooping.restart_query_interval }}
{%         endif %}
{%         if ip_igmp_snooping.interface_restart_query is arista.avd.defined %}
ip igmp snooping interface-restart-query {{ ip_igmp_snooping.interface_restart_query }}
{%         endif %}
{%         if ip_igmp_snooping.fast_leave is arista.avd.defined(false) %}
no ip igmp snooping fast-leave
{%         elif ip_igmp_snooping.fast_leave is arista.avd.defined(true) %}
ip igmp snooping fast-leave
{%         endif %}
{%         if ip_igmp_snooping.vlans is arista.avd.defined %}
{%             for vlan in ip_igmp_snooping.vlans | arista.avd.natural_sort('id') %}
{%                 if vlan.enabled is arista.avd.defined(false) %}
no ip igmp snooping vlan {{ vlan.id }}
{%                 elif vlan.enabled is arista.avd.defined(true) %}
ip igmp snooping vlan {{ vlan.id }}
{%                 endif %}
{%                 if vlan.querier is arista.avd.defined %}
{%                     if vlan.querier.enabled is arista.avd.defined(true) %}
ip igmp snooping vlan {{ vlan.id }} querier
{%                     elif vlan.querier.enabled is arista.avd.defined(false) %}
no ip igmp snooping vlan {{ vlan.id }} querier
{%                     endif %}
{%                     if vlan.querier.address is arista.avd.defined %}
ip igmp snooping vlan {{ vlan.id }} querier address {{ vlan.querier.address }}
{%                     endif %}
{%                     if vlan.querier.query_interval is arista.avd.defined %}
ip igmp snooping vlan {{ vlan.id }} querier query-interval {{ vlan.querier.query_interval }}
{%                     endif %}
{%                     if vlan.querier.max_response_time is arista.avd.defined %}
ip igmp snooping vlan {{ vlan.id }} querier max-response-time {{ vlan.querier.max_response_time }}
{%                     endif %}
{%                     if vlan.querier.last_member_query_interval is arista.avd.defined %}
ip igmp snooping vlan {{ vlan.id }} querier last-member-query-interval {{ vlan.querier.last_member_query_interval }}
{%                     endif %}
{%                     if vlan.querier.last_member_query_count is arista.avd.defined %}
ip igmp snooping vlan {{ vlan.id }} querier last-member-query-count {{ vlan.querier.last_member_query_count }}
{%                     endif %}
{%                     if vlan.querier.startup_query_interval is arista.avd.defined %}
ip igmp snooping vlan {{ vlan.id }} querier startup-query-interval {{ vlan.querier.startup_query_interval }}
{%                     endif %}
{%                     if vlan.querier.startup_query_count is arista.avd.defined %}
ip igmp snooping vlan {{ vlan.id }} querier startup-query-count {{ vlan.querier.startup_query_count }}
{%                     endif %}
{%                     if vlan.querier.version is arista.avd.defined %}
ip igmp snooping vlan {{ vlan.id }} querier version {{ vlan.querier.version }}
{%                     endif %}
{%                 endif %}
{%                 if vlan.max_groups is arista.avd.defined %}
ip igmp snooping vlan {{ vlan.id }} max-groups {{ vlan.max_groups }}
{%                 endif %}
{%                 if vlan.fast_leave is arista.avd.defined(true) %}
ip igmp snooping vlan {{ vlan.id }} fast-leave
{%                 elif vlan.fast_leave is arista.avd.defined(false) %}
no ip igmp snooping vlan {{ vlan.id }} fast-leave
{%                 endif %}
{%                 if vlan.proxy is arista.avd.defined(true) %}
{%                     do proxy_cli.append("ip igmp snooping vlan " ~ vlan.id ~ " proxy") %}
{%                 elif vlan.proxy is arista.avd.defined(false) %}
{%                     do proxy_cli.append("no ip igmp snooping vlan " ~ vlan.id ~ " proxy") %}
{%                 endif %}
{%             endfor %}
{%         endif %}
{%         if ip_igmp_snooping.querier is arista.avd.defined %}
{%             if ip_igmp_snooping.querier.enabled is arista.avd.defined(true) %}
ip igmp snooping querier
{%             elif ip_igmp_snooping.querier.enabled is arista.avd.defined(false) %}
no ip igmp snooping querier
{%             endif %}
{%             if ip_igmp_snooping.querier.address is arista.avd.defined %}
ip igmp snooping querier address {{ ip_igmp_snooping.querier.address }}
{%             endif %}
{%             if ip_igmp_snooping.querier.query_interval is arista.avd.defined %}
ip igmp snooping querier query-interval {{ ip_igmp_snooping.querier.query_interval }}
{%             endif %}
{%             if ip_igmp_snooping.querier.max_response_time is arista.avd.defined %}
ip igmp snooping querier max-response-time {{ ip_igmp_snooping.querier.max_response_time }}
{%             endif %}
{%             if ip_igmp_snooping.querier.last_member_query_interval is arista.avd.defined %}
ip igmp snooping querier last-member-query-interval {{ ip_igmp_snooping.querier.last_member_query_interval }}
{%             endif %}
{%             if ip_igmp_snooping.querier.last_member_query_count is arista.avd.defined %}
ip igmp snooping querier last-member-query-count {{ ip_igmp_snooping.querier.last_member_query_count }}
{%             endif %}
{%             if ip_igmp_snooping.querier.startup_query_interval is arista.avd.defined %}
ip igmp snooping querier startup-query-interval {{ ip_igmp_snooping.querier.startup_query_interval }}
{%             endif %}
{%             if ip_igmp_snooping.querier.startup_query_count is arista.avd.defined %}
ip igmp snooping querier startup-query-count {{ ip_igmp_snooping.querier.startup_query_count }}
{%             endif %}
{%             if ip_igmp_snooping.querier.version is arista.avd.defined %}
ip igmp snooping querier version {{ ip_igmp_snooping.querier.version }}
{%             endif %}
{%         endif %}
{%         if proxy_cli | length > 0 %}
!
{{ proxy_cli | join("\n") }}
{%         endif %}
{%     endif %}
{% endif %}
{# eos - Event monitor #}
{% if event_monitor.enabled is arista.avd.defined(true) %}
!
event-monitor
{% endif %}
{# eos - load interval #}
{% if load_interval.default is arista.avd.defined %}
!
load-interval default {{ load_interval.default }}
{% endif %}
{# eos - interface defaults #}
{% if interface_defaults is arista.avd.defined %}
!
interface defaults
{%     if interface_defaults.ethernet is arista.avd.defined %}
   ethernet
{%         if interface_defaults.ethernet.shutdown is arista.avd.defined(true) %}
      shutdown
{%         elif interface_defaults.ethernet.shutdown is arista.avd.defined(false) %}
      no shutdown
{%         endif %}
{%     endif %}
{%     if interface_defaults.mtu is arista.avd.defined %}
   mtu {{ interface_defaults.mtu }}
{%     endif %}
{% endif %}
{# eos - interface profiles #}
{% if interface_profiles is arista.avd.defined %}
{%     for interface_profile in interface_profiles | arista.avd.natural_sort('name') %}
!
interface profile {{ interface_profile.name }}
{%         if interface_profile.commands is arista.avd.defined %}
{%             for command in interface_profile.commands %}
   command {{ command }}
{%             endfor %}
{%         endif %}
{%     endfor %}
{% endif %}
{# transceiver qsfp default mode #}
{# cannot be disabled in current EOS releases #}
{% if not generate_default_config is arista.avd.defined(false) %}
!
transceiver qsfp default-mode 4x10G
{% endif %}
{# eos - Errdisable #}
{% if errdisable is arista.avd.defined %}
!
{%     for cause in errdisable.detect.causes | arista.avd.natural_sort %}
{%         if cause in ['acl','arp-inspection','dot1x','link-change','tapagg','xcvr-misconfigured',
                        'xcvr-overheat','xcvr-power-unsupported','xcvr-unsupported'] %}
errdisable detect cause {{ cause }}
{%         endif %}
{%     endfor %}
{%     for cause in errdisable.recovery.causes | arista.avd.natural_sort %}
{%         if cause in ['arp-inspection','bpduguard','dot1x','hitless-reload-down','lacp-rate-limit',
                        'link-flap','no-internal-vlan','portchannelguard','portsec','speed-misconfigured',
                        'tapagg','uplink-failure-detection','xcvr-misconfigured','xcvr-overheat',
                        'xcvr-power-unsupported','xcvr-unsupported'] %}
errdisable recovery cause {{ cause }}
{%         endif %}
{%     endfor %}
{%     if errdisable.recovery.interval is arista.avd.defined %}
errdisable recovery interval {{ errdisable.recovery.interval }}
{%     endif %}
{% endif %}
{# eos - Service Routing Procols Model #}
{% if service_routing_protocols_model is arista.avd.defined("multi-agent") %}
!
service routing protocols model multi-agent
{% endif %}
{% if queue_monitor_length is arista.avd.defined and queue_monitor_length.enabled is not arista.avd.defined(false) %}
!
queue-monitor length
{%     if queue_monitor_length.log is arista.avd.defined %}
queue-monitor length log {{ queue_monitor_length.log }}
{%     endif %}
{%     if queue_monitor_length.notifying is arista.avd.defined(true) %}
queue-monitor length notifying
{%     endif %}
{%     if queue_monitor_length.cpu.thresholds.high is arista.avd.defined %}
{%         if queue_monitor_length.cpu.thresholds.low is arista.avd.defined %}
queue-monitor length cpu thresholds {{ queue_monitor_length.cpu.thresholds.high }} {{ queue_monitor_length.cpu.thresholds.low }}
{%         else %}
queue-monitor length cpu threshold {{ queue_monitor_length.cpu.thresholds.high }}
{%         endif %}
{%     endif %}
{% endif %}
{# eos - lldp #}
{% if lldp is arista.avd.defined %}
!
{%     if lldp.run is arista.avd.defined(false) %}
no lldp run
{%     endif %}
{%     if lldp.timer is arista.avd.defined %}
lldp timer {{ lldp.timer }}
{%     endif %}
{%     if lldp.timer_reinitialization is arista.avd.defined %}
lldp timer reinitialization {{ lldp.timer_reinitialization }}
{%     endif %}
{%     if lldp.holdtime is arista.avd.defined %}
lldp hold-time {{ lldp.holdtime }}
{%     endif %}
{%     if lldp.management_address is arista.avd.defined %}
lldp management-address {{ lldp.management_address }}
{%     endif %}
{%     if lldp.vrf is arista.avd.defined %}
lldp management-address vrf {{ lldp.vrf }}
{%     endif %}
{%     if lldp.receive_packet_tagged_drop is arista.avd.defined(true) %}
lldp receive packet tagged drop
{%     endif %}
{%     if lldp.tlvs is arista.avd.defined %}
{%         for tlv in lldp.tlvs %}
{%             if tlv.name is arista.avd.defined and tlv.transmit is arista.avd.defined %}
{%                 set lldp_tlv_transmit_cli = "lldp tlv transmit " ~ tlv.name %}
{%                 if tlv.transmit is arista.avd.defined(false) %}
{%                     set lldp_tlv_transmit_cli = "no " ~ lldp_tlv_transmit_cli %}
{%                 endif %}
{{ lldp_tlv_transmit_cli }}
{%             endif %}
{%         endfor %}
{%     endif %}
{% endif %}
{# eos - lacp #}
{% if lacp is arista.avd.defined %}
!
{%     if lacp.port_id.range.begin is arista.avd.defined and lacp.port_id.range.end is arista.avd.defined %}
lacp port-id range {{ lacp.port_id.range.begin }} {{ lacp.port_id.range.end }}
{%     endif %}
{%     if lacp.rate_limit.default is arista.avd.defined(true) %}
lacp rate-limit default
{%     elif lacp.rate_limit.default is arista.avd.defined(false) %}
no lacp rate-limit default
{%     endif %}
{%     if lacp.system_priority is arista.avd.defined %}
lacp system-priority {{ lacp.system_priority }}
{%     endif %}
{% endif %}
{# eos - logging #}
{% if logging is arista.avd.defined %}
!
{%     if logging.buffered.level is arista.avd.defined('disabled') %}
no logging buffered
{%     elif logging.buffered.level is arista.avd.defined %}
{%         set logging_buffered_cli = "logging buffered" %}
{%         if logging.buffered.size is arista.avd.defined %}
{%             set logging_buffered_cli = logging_buffered_cli ~ " " ~ logging.buffered.size %}
{%         endif %}
{%         set logging_buffered_cli = logging_buffered_cli ~ " " ~ logging.buffered.level %}
{{ logging_buffered_cli }}
{%     endif %}
{%     if logging.trap is arista.avd.defined('disabled') %}
no logging trap
{%     elif logging.trap is arista.avd.defined %}
logging trap {{ logging.trap }}
{%     endif %}
{%     if logging.console is arista.avd.defined('disabled') %}
no logging console
{%     elif logging.console is arista.avd.defined %}
logging console {{ logging.console }}
{%     endif %}
{%     if logging.monitor is arista.avd.defined('disabled') %}
no logging monitor
{%     elif logging.monitor is arista.avd.defined %}
logging monitor {{ logging.monitor }}
{%     endif %}
{%     if logging.synchronous.level is arista.avd.defined('disabled') %}
no logging synchronous
{%     elif logging.synchronous is arista.avd.defined %}
logging synchronous level {{ logging.synchronous.level | arista.avd.default("critical") }}
{%     endif %}
{%     for vrf in logging.vrfs | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
{%         for host in vrf.hosts | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
{%             set logging_host_cli = "logging" %}
{%             if vrf.name != "default" %}
{%                 set logging_host_cli = logging_host_cli ~ " vrf " ~ vrf.name %}
{%             endif %}
{%             set logging_host_cli = logging_host_cli ~ " host " ~ host.name %}
{%             if host.ports is arista.avd.defined() %}
{%                 set logging_host_cli = logging_host_cli ~ ' ' ~ host.ports | join(' ') %}
{%             endif %}
{%             if host.protocol is arista.avd.defined() and host.protocol is not arista.avd.defined("udp") %}
{%                 set logging_host_cli = logging_host_cli ~ " protocol " ~ host.protocol | lower %}
{%             endif %}
{{ logging_host_cli }}
{%         endfor %}
{%     endfor %}
{%     if logging.format.timestamp is arista.avd.defined %}
logging format timestamp {{ logging.format.timestamp }}
{%     endif %}
{%     if logging.format.hostname is arista.avd.defined('fqdn') %}
logging format hostname fqdn
{%     elif logging.format.hostname is arista.avd.defined('ipv4') %}
logging format hostname ipv4
{%     endif %}
{%     if logging.format.sequence_numbers is arista.avd.defined(true) %}
logging format sequence-numbers
{%     endif %}
{%     if logging.facility is arista.avd.defined %}
logging facility {{ logging.facility }}
{%     endif %}
{%     if logging.source_interface is arista.avd.defined %}
logging source-interface {{ logging.source_interface }}
{%     endif %}
{%     for vrf in logging.vrfs | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
{%         set logging_cli = "logging" %}
{%         if vrf.source_interface is arista.avd.defined %}
{%             if vrf.name != "default" %}
{%                 set logging_cli = logging_cli ~ " vrf " ~ vrf.name %}
{%             endif %}
{%             set logging_cli = logging_cli ~ " source-interface " ~ vrf.source_interface %}
{{ logging_cli }}
{%         endif %}
{%     endfor %}
{%     for match_list in logging.policy.match.match_lists | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
logging policy match match-list {{ match_list.name }} {{ match_list.action }}
{%     endfor %}
{% endif %}
{# MCS client #}
{% if mcs_client is arista.avd.defined %}
!
mcs client
{%     if mcs_client.shutdown is arista.avd.defined(true) %}
   shutdown
{%     elif mcs_client.shutdown is arista.avd.defined(false) %}
   no shutdown
{%     endif %}
{%     if mcs_client.cvx_secondary.name is arista.avd.defined %}
   !
   cvx secondary {{ mcs_client.cvx_secondary.name }}
{%         if mcs_client.cvx_secondary.shutdown is arista.avd.defined(false) %}
      no shutdown
{%         elif mcs_client.cvx_secondary.shutdown is arista.avd.defined(true) %}
      shutdown
{%         endif %}
{%         for server_host in mcs_client.cvx_secondary.server_hosts | arista.avd.natural_sort %}
      server host {{ server_host }}
{%         endfor %}
{%     endif %}
{% endif %}
{# eos - match-lists #}
{% if match_list_input is arista.avd.defined %}
!
{%     for match_list in match_list_input.string | arista.avd.natural_sort('name') %}
match-list input string {{ match_list.name }}
{%         for sequence in match_list.sequence_numbers | arista.avd.natural_sort('sequence') %}
{%             if sequence.match_regex is arista.avd.defined %}
   {{ sequence.sequence }} match regex {{ sequence.match_regex }}
{%             endif %}
{%         endfor %}
{%     endfor %}
{% endif %}
{# eos - as path #}
{% if as_path is arista.avd.defined %}
!
{%     if as_path.regex_mode is arista.avd.defined %}
ip as-path regex-mode {{ as_path.regex_mode }}
{%     endif %}
{%     for as_path_access_list in as_path.access_lists | arista.avd.natural_sort('name') %}
{%         if as_path_access_list.name is arista.avd.defined and as_path_access_list.entries is arista.avd.defined %}
{%             for as_path_access_list_entry in as_path_access_list.entries %}
{%                 if as_path_access_list_entry.type is arista.avd.defined and as_path_access_list_entry.match is arista.avd.defined %}
{%                     set as_path_access_list_cli = "ip as-path access-list " ~ as_path_access_list.name %}
{%                     set as_path_access_list_cli = as_path_access_list_cli ~ " " ~ as_path_access_list_entry.type %}
{%                     set as_path_access_list_cli = as_path_access_list_cli ~ " " ~ as_path_access_list_entry.match %}
{%                     set as_path_access_list_cli = as_path_access_list_cli ~ " " ~ as_path_access_list_entry.origin | arista.avd.default('any') %}
{{ as_path_access_list_cli }}
{%                 endif %}
{%             endfor %}
{%         endif %}
{%     endfor %}
{% endif %}
{# eos - MAC security #}
{% if mac_security is arista.avd.defined %}
!
mac security
{%     if mac_security.license.license_name is arista.avd.defined and mac_security.license.license_key is arista.avd.defined %}
   license {{ mac_security.license.license_name }} {{ mac_security.license.license_key }}
{%     endif %}
{%     if mac_security.fips_restrictions is arista.avd.defined(true) %}
   fips restrictions
{%     endif %}
   !
{%     for profile in mac_security.profiles | arista.avd.natural_sort('name') %}
   profile {{ profile.name }}
{%         if profile.cipher is arista.avd.defined %}
      cipher {{ profile.cipher }}
{%         endif %}
{%         for connection_key in profile.connection_keys | arista.avd.natural_sort('id') %}
{%             if connection_key.encrypted_key is arista.avd.defined %}
{%                 set key_cli = "key " ~ connection_key.id ~ " 7 " ~ connection_key.encrypted_key %}
{%                 if connection_key.fallback is arista.avd.defined %}
{%                     set key_cli = key_cli ~ " fallback" %}
{%                 endif %}
      {{ key_cli }}
{%             endif %}
{%         endfor %}
{%         if profile.mka.session.rekey_period is arista.avd.defined %}
      mka session rekey-period {{ profile.mka.session.rekey_period }}
{%         endif %}
{%         if profile.sci is arista.avd.defined(true) %}
      sci
{%         endif %}
{%     endfor %}
{% endif %}
{# hostname #}
{% if not generate_default_config is arista.avd.defined(false) %}
!
hostname {{ inventory_hostname }}
{% endif %}
{# eos - domain lookup #}
{% if ip_domain_lookup is arista.avd.defined %}
{%     for source in ip_domain_lookup.source_interfaces | arista.avd.natural_sort('name') %}
{%         set ip_domain_cli = "ip domain lookup" %}
{%         if source.vrf is arista.avd.defined %}
{%             set ip_domain_cli = ip_domain_cli ~ " vrf " ~ source.vrf %}
{%         endif %}
{%         set ip_domain_cli = ip_domain_cli ~ " source-interface " ~ source.name %}
{{ ip_domain_cli }}
{%     endfor %}
{% endif %}
{# eos - name-server #}
{% for node in name_server.nodes | arista.avd.natural_sort %}
{%     if name_server.source.vrf is arista.avd.defined %}
ip name-server vrf {{ name_server.source.vrf }} {{ node }}
{%     else %}
ip name-server {{ node }}
{%     endif %}
{% endfor %}
{# eos - dns domain #}
{% if dns_domain is arista.avd.defined %}
dns domain {{ dns_domain }}
{% endif %}
{# eos - domain-list #}
{% if domain_list is arista.avd.defined %}
{%     for domain in domain_list | arista.avd.natural_sort %}
ip domain-list {{ domain }}
{%     endfor %}
{% endif %}
{# eos - object-tracking #}
{% if trackers is arista.avd.defined %}
!
{%     for tracked_obj in trackers | arista.avd.natural_sort('name') %}
{%         if tracked_obj.name is arista.avd.defined and tracked_obj.interface is arista.avd.defined %}
{%             set tracked_obj_cli = "track " ~ tracked_obj.name ~ " interface " ~ tracked_obj.interface ~ " " ~ tracked_obj.tracked_property | arista.avd.default("line-protocol") %}
{{ tracked_obj_cli }}
{%         endif %}
{%     endfor %}
{% endif %}
{# eos - NTP #}
{% if ntp is arista.avd.defined %}
!
{%     for authentication_key in ntp.authentication_keys | arista.avd.natural_sort('id') %}
{%         if authentication_key.id is arista.avd.defined and
              authentication_key.key is arista.avd.defined and
              authentication_key.hash_algorithm is arista.avd.defined %}
ntp authentication-key {{ authentication_key.id }} {{ authentication_key.hash_algorithm }} {{ authentication_key.key }}
{%         endif %}
{%     endfor %}
{%     if ntp.trusted_keys is arista.avd.defined %}
ntp trusted-key {{ ntp.trusted_keys }}
{%     endif %}
{%     if ntp.authenticate_servers_only is arista.avd.defined(true) %}
ntp authenticate servers
{%     elif ntp.authenticate is arista.avd.defined(true) %}
ntp authenticate
{%     endif %}
{%     if ntp.local_interface.name is arista.avd.defined %}
{%         set ntp_int_cli = "ntp local-interface" %}
{%         if ntp.local_interface.vrf is arista.avd.defined and ntp.local_interface.vrf != 'default' %}
{%             set ntp_int_cli = ntp_int_cli ~ " vrf " ~ ntp.local_interface.vrf %}
{%         endif %}
{%         set ntp_int_cli = ntp_int_cli ~ " " ~ ntp.local_interface.name %}
{{ ntp_int_cli }}
{%     endif %}
{%     for server in ntp.servers | arista.avd.natural_sort('name') %}
{%         if server.name is arista.avd.defined %}
{%             set ntp_server_cli = "ntp server" %}
{%             if server.vrf is arista.avd.defined and server.vrf != 'default' %}
{%                 set ntp_server_cli = ntp_server_cli ~ " vrf " ~ server.vrf %}
{%             endif %}
{%             set ntp_server_cli = ntp_server_cli ~ " " ~ server.name %}
{%             if server.preferred is arista.avd.defined(true) %}
{%                 set ntp_server_cli = ntp_server_cli ~ " prefer" %}
{%             endif %}
{%             if server.burst is arista.avd.defined(true) %}
{%                 set ntp_server_cli = ntp_server_cli ~ " burst" %}
{%             endif %}
{%             if server.iburst is arista.avd.defined(true) %}
{%                 set ntp_server_cli = ntp_server_cli ~ " iburst" %}
{%             endif %}
{%             if server.version is arista.avd.defined %}
{%                 set ntp_server_cli = ntp_server_cli ~ " version " ~ server.version %}
{%             endif %}
{%             if server.minpoll is arista.avd.defined %}
{%                 set ntp_server_cli = ntp_server_cli ~ " minpoll " ~ server.minpoll %}
{%             endif %}
{%             if server.maxpoll is arista.avd.defined %}
{%                 set ntp_server_cli = ntp_server_cli ~ " maxpoll " ~ server.maxpoll %}
{%             endif %}
{%             if server.local_interface is arista.avd.defined %}
{%                 set ntp_server_cli = ntp_server_cli ~ " local-interface " ~ server.local_interface %}
{%             endif %}
{%             if server.key is arista.avd.defined %}
{%                 set ntp_server_cli = ntp_server_cli ~ " key " ~ server.key %}
{%             endif %}
{{ ntp_server_cli }}
{%         endif %}
{%     endfor %}
{% endif %}
{# eos - PTP #}
{% if ptp is arista.avd.defined %}
!
{%     if ptp.clock_identity is arista.avd.defined %}
ptp clock-identity {{ ptp.clock_identity }}
{%     endif %}
{%     if ptp.source.ip is arista.avd.defined %}
ptp source ip {{ ptp.source.ip }}
{%     endif %}
{%     if ptp.priority1 is arista.avd.defined %}
ptp priority1 {{ ptp.priority1 }}
{%     endif %}
{%     if ptp.priority2 is arista.avd.defined %}
ptp priority2 {{ ptp.priority2 }}
{%     endif %}
{%     if ptp.ttl is arista.avd.defined %}
ptp ttl {{ ptp.ttl }}
{%     endif %}
{%     if ptp.domain is arista.avd.defined %}
ptp domain {{ ptp.domain }}
{%     endif %}
{%     if ptp.message_type.general.dscp is arista.avd.defined %}
ptp message-type general dscp {{ ptp.message_type.general.dscp }} default
{%     endif %}
{%     if ptp.message_type.event.dscp is arista.avd.defined %}
ptp message-type event dscp {{ ptp.message_type.event.dscp }} default
{%     endif %}
{%     if ptp.mode is arista.avd.defined %}
ptp mode {{ ptp.mode }}
{%     endif %}
{%     if ptp.forward_unicast is arista.avd.defined(true) %}
ptp forward-unicast
{%     endif %}
{%     if ptp.monitor.enabled is arista.avd.defined(false) %}
no ptp monitor
{%     elif ptp.monitor is arista.avd.defined %}
{%         if ptp.monitor.threshold.offset_from_master is arista.avd.defined %}
ptp monitor threshold offset-from-master {{ ptp.monitor.threshold.offset_from_master }}
{%         endif %}
{%         if ptp.monitor.threshold.mean_path_delay is arista.avd.defined %}
ptp monitor threshold mean-path-delay {{ ptp.monitor.threshold.mean_path_delay }}
{%         endif %}
{%         if ptp.monitor.threshold.drop.offset_from_master is arista.avd.defined %}
ptp monitor threshold offset-from-master {{ ptp.monitor.threshold.drop.offset_from_master }} nanoseconds drop
{%         endif %}
{%         if ptp.monitor.threshold.drop.mean_path_delay is arista.avd.defined %}
ptp monitor threshold mean-path-delay {{ ptp.monitor.threshold.drop.mean_path_delay }} nanoseconds drop
{%         endif %}
{%         if ptp.monitor.missing_message.intervals is arista.avd.defined %}
{%             if ptp.monitor.missing_message.intervals.announce is arista.avd.defined %}
ptp monitor threshold missing-message announce {{ ptp.monitor.missing_message.intervals.announce }} intervals
{%             endif %}
{%             if ptp.monitor.missing_message.intervals.follow_up is arista.avd.defined %}
ptp monitor threshold missing-message follow-up {{ ptp.monitor.missing_message.intervals.follow_up }} intervals
{%             endif %}
{%             if ptp.monitor.missing_message.intervals.sync is arista.avd.defined %}
ptp monitor threshold missing-message sync {{ ptp.monitor.missing_message.intervals.sync }} intervals
{%             endif %}
{%         endif %}
{%         if ptp.monitor.missing_message.sequence_ids.enabled is arista.avd.defined(false) %}
no ptp monitor sequence-id
{%         elif ptp.monitor.missing_message.sequence_ids.enabled is arista.avd.defined(true) %}
ptp monitor sequence-id
{%             if ptp.monitor.missing_message.sequence_ids.announce is arista.avd.defined %}
ptp monitor threshold missing-message announce {{ ptp.monitor.missing_message.sequence_ids.announce }} sequence-ids
{%             endif %}
{%             if ptp.monitor.missing_message.sequence_ids.delay_resp is arista.avd.defined %}
ptp monitor threshold missing-message delay-resp {{ ptp.monitor.missing_message.sequence_ids.delay_resp }} sequence-ids
{%             endif %}
{%             if ptp.monitor.missing_message.sequence_ids.follow_up is arista.avd.defined %}
ptp monitor threshold missing-message follow-up {{ ptp.monitor.missing_message.sequence_ids.follow_up }} sequence-ids
{%             endif %}
{%             if ptp.monitor.missing_message.sequence_ids.sync is arista.avd.defined %}
ptp monitor threshold missing-message sync {{ ptp.monitor.missing_message.sequence_ids.sync }} sequence-ids
{%             endif %}
{%         endif %}
{%     endif %}
{% endif %}
{% if radius_servers is arista.avd.defined %}
!
{%     for radius_server in radius_servers %}
{%         if radius_server.host is arista.avd.defined %}
{%             set radius_cli = "radius-server host " ~ radius_server.host %}
{%         endif %}
{%         if radius_server.vrf is arista.avd.defined %}
{%             set radius_cli = radius_cli ~ " vrf " ~ radius_server.vrf %}
{%         endif %}
{%         if radius_server.key is arista.avd.defined %}
{%             set radius_cli = radius_cli ~ " key 7 " ~ radius_server.key %}
{%         endif %}
{{ radius_cli }}
{%     endfor %}
{% endif %}
{# eos - Router L2 VPN #}
{% if router_l2_vpn is arista.avd.defined %}
!
router l2-vpn
{%     if router_l2_vpn.nd_rs_flooding_disabled is arista.avd.defined(true) %}
   nd rs flooding disabled
{%     endif %}
{%     if router_l2_vpn.virtual_router_nd_ra_flooding_disabled is arista.avd.defined(true) %}
   virtual-router neighbor advertisement flooding disabled
{%     endif %}
{%     if router_l2_vpn.arp_selective_install is arista.avd.defined(true) %}
   arp selective-install
{%     endif %}
{%     if router_l2_vpn.arp_proxy.prefix_list is arista.avd.defined %}
   arp proxy prefix-list {{ router_l2_vpn.arp_proxy.prefix_list }}
{%     endif %}
{% endif %}
{# eos - SFlow #}
{% if sflow is arista.avd.defined %}
!
{%     if sflow.sample is arista.avd.defined %}
{%         set sample_cli = "sflow sample " %}
{%         if sflow.dangerous is arista.avd.defined(true) %}
{%             set sample_cli = sample_cli ~ "dangerous " %}
{%         endif %}
{%         set sample_cli = sample_cli ~ sflow.sample %}
{{ sample_cli }}
{%     endif %}
{%     for vrf in sflow.vrfs | arista.avd.natural_sort('name') %}
{%         for destination in vrf.destinations | arista.avd.natural_sort('destination') %}
{%             set vrf_cli = "sflow vrf " ~ vrf.name ~ " destination " ~ destination.destination %}
{%             if destination.port is arista.avd.defined %}
{%                 set vrf_cli = vrf_cli ~ " " ~ destination.port %}
{%             endif %}
{{ vrf_cli }}
{%         endfor %}
{%         if vrf.source_interface is arista.avd.defined %}
sflow vrf {{ vrf.name }} source-interface {{ vrf.source_interface }}
{%         endif %}
{%     endfor %}
{%     for destination in sflow.destinations | arista.avd.natural_sort('destination') %}
{%         set destination_cli = "sflow destination " ~ destination.destination %}
{%         if destination.port is arista.avd.defined %}
{%             set destination_cli = destination_cli ~ " " ~ destination.port %}
{%         endif %}
{{ destination_cli }}
{%     endfor %}
{%     if sflow.source_interface is arista.avd.defined %}
sflow source-interface {{ sflow.source_interface }}
{%     endif %}
{%     if sflow.run is arista.avd.defined(true) %}
sflow run
{%     endif %}
{%     if sflow.interface.disable.default is arista.avd.defined(true) %}
sflow interface disable default
{%     endif %}
{%     if sflow.hardware_acceleration.enabled is arista.avd.defined(true) %}
sflow hardware acceleration
{%     endif %}
{%     if sflow.hardware_acceleration.sample is arista.avd.defined %}
sflow hardware acceleration sample {{ sflow.hardware_acceleration.sample }}
{%     endif %}
{%     for module in sflow.hardware_acceleration.modules | arista.avd.natural_sort('name') %}
{%         if module.name is arista.avd.defined %}
{%             if module.enabled is arista.avd.defined(false) %}
{%                 set module_cli = "no sflow hardware acceleration module " ~ module.name %}
{%             else %}
{%                 set module_cli = "sflow hardware acceleration module " ~ module.name %}
{%             endif %}
{{ module_cli }}
{%         endif %}
{%     endfor %}
{% endif %}
{# eos - Redundancy #}
{% if redundancy is arista.avd.defined %}
!
redundancy
{%     if redundancy.protocol is arista.avd.defined %}
   protocol {{ redundancy.protocol }}
{%     endif %}
{% endif %}
{# eos - qos profiles #}
{% for profile in qos_profiles | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
!
qos profile {{ profile.name }}
{%     if profile.trust is arista.avd.defined %}
{%         if profile.trust == 'disabled' %}
   no qos trust
{%         else %}
   qos trust {{ profile.trust }}
{%         endif %}
{%     endif %}
{%     if profile.cos is arista.avd.defined %}
   qos cos {{ profile.cos }}
{%     endif %}
{%     if profile.dscp is arista.avd.defined %}
   qos dscp {{ profile.dscp }}
{%     endif %}
{%     if profile.shape.rate is arista.avd.defined %}
   shape rate {{ profile.shape.rate }}
{%     endif %}
{%     if profile.service_policy.type.qos_input is arista.avd.defined %}
   service-policy type qos input {{ profile.service_policy.type.qos_input }}
{%     endif %}
{%     for tx_queue in profile.tx_queues | arista.avd.convert_dicts('id') | arista.avd.natural_sort('id') %}
   !
   tx-queue {{ tx_queue.id }}
{%         if tx_queue.bandwidth_percent is arista.avd.defined %}
      bandwidth percent {{ tx_queue.bandwidth_percent }}
{%         elif tx_queue.bandwidth_guaranteed_percent is arista.avd.defined %}
      bandwidth guaranteed percent {{ tx_queue.bandwidth_guaranteed_percent }}
{%         endif %}
{%         if tx_queue.priority is arista.avd.defined %}
      {{ tx_queue.priority }}
{%         endif %}
{%         if tx_queue.shape.rate is arista.avd.defined %}
      shape rate {{ tx_queue.shape.rate }}
{%         endif %}
{%     endfor %}
{%     for uc_tx_queue in profile.uc_tx_queues | arista.avd.convert_dicts('id') | arista.avd.natural_sort('id') %}
   !
   uc-tx-queue {{ uc_tx_queue.id }}
{%         if uc_tx_queue.bandwidth_percent is arista.avd.defined %}
      bandwidth percent {{ uc_tx_queue.bandwidth_percent }}
{%         elif uc_tx_queue.bandwidth_guaranteed_percent is arista.avd.defined %}
      bandwidth guaranteed percent {{ uc_tx_queue.bandwidth_guaranteed_percent }}
{%         endif %}
{%         if uc_tx_queue.priority is arista.avd.defined %}
      {{ uc_tx_queue.priority }}
{%         endif %}
{%         if uc_tx_queue.shape.rate is arista.avd.defined %}
      shape rate {{ uc_tx_queue.shape.rate }}
{%         endif %}
{%     endfor %}
{%     for mc_tx_queue in profile.mc_tx_queues | arista.avd.convert_dicts('id') | arista.avd.natural_sort('id') %}
   !
   mc-tx-queue {{ mc_tx_queue.id }}
{%         if mc_tx_queue.bandwidth_percent is arista.avd.defined %}
      bandwidth percent {{ mc_tx_queue.bandwidth_percent }}
{%         elif mc_tx_queue.bandwidth_guaranteed_percent is arista.avd.defined %}
      bandwidth guaranteed percent {{ mc_tx_queue.bandwidth_guaranteed_percent }}
{%         endif %}
{%         if mc_tx_queue.priority is arista.avd.defined %}
      {{ mc_tx_queue.priority }}
{%         endif %}
{%         if mc_tx_queue.shape.rate is arista.avd.defined %}
      shape rate {{ mc_tx_queue.shape.rate }}
{%         endif %}
{%     endfor %}
{% endfor %}
{# eos - SNMP Settings#}
{% if snmp_server is arista.avd.defined %}
!
{%     if snmp_server.engine_ids.local is arista.avd.defined %}
snmp-server engineID local {{ snmp_server.engine_ids.local }}
{%     endif %}
{%     if snmp_server.contact is arista.avd.defined %}
snmp-server contact {{ snmp_server.contact }}
{%     endif %}
{%     if snmp_server.location is arista.avd.defined %}
snmp-server location {{ snmp_server.location }}
{%     endif %}
{%     if snmp_server.engine_ids.remotes is arista.avd.defined %}
{%         for engine_id in snmp_server.engine_ids.remotes %}
{%             if engine_id.id is arista.avd.defined and engine_id.address is arista.avd.defined %}
{%                 set remote_engine_ids_cli =  "snmp-server engineID remote " ~ engine_id.address %}
{%                 if engine_id.udp_port is arista.avd.defined %}
{%                     set remote_engine_ids_cli =  remote_engine_ids_cli ~ " udp-port " ~  engine_id.udp_port %}
{%                 endif %}
{%                 set remote_engine_ids_cli = remote_engine_ids_cli ~ " " ~ engine_id.id %}
{{ remote_engine_ids_cli }}
{%             endif %}
{%         endfor %}
{%     endif %}
{%     if snmp_server.ipv4_acls is arista.avd.defined %}
{%         for acl in snmp_server.ipv4_acls %}
{%             set acl_cli = "snmp-server ipv4 access-list " ~ acl.name %}
{%             if acl.vrf is arista.avd.defined %}
{%                 set acl_cli = acl_cli ~ " vrf " ~ acl.vrf %}
{%             endif %}
{{ acl_cli }}
{%         endfor %}
{%     endif %}
{%     if snmp_server.ipv6_acls is arista.avd.defined %}
{%         for acl in snmp_server.ipv6_acls %}
{%             set acl_cli = "snmp-server ipv6 access-list " ~ acl.name %}
{%             if acl.vrf is arista.avd.defined %}
{%                 set acl_cli = acl_cli ~ " vrf " ~ acl.vrf %}
{%             endif %}
{{ acl_cli }}
{%         endfor %}
{%     endif %}
{%     if snmp_server.local_interfaces is arista.avd.defined %}
{%         for local_interface in snmp_server.local_interfaces | arista.avd.convert_dicts('name') %}
{%             set interface_snmp_cli = "snmp-server" %}
{%             if local_interface.vrf is arista.avd.defined %}
{%                 set interface_snmp_cli = interface_snmp_cli ~ " vrf " ~ local_interface.vrf %}
{%             endif %}
{%             set interface_snmp_cli = interface_snmp_cli ~ " local-interface " ~ local_interface.name %}
{{ interface_snmp_cli }}
{%         endfor %}
{%     endif %}
{%     if snmp_server.views is arista.avd.defined %}
{%         for view in snmp_server.views %}
{%             if view.name is arista.avd.defined %}
{%                 set view_cli = "snmp-server view " ~ view.name %}
{%             endif %}
{%             if view.MIB_family_name is arista.avd.defined %}
{%                 set view_cli = view_cli ~ " " ~ view.MIB_family_name ~ " " %}
{%             endif %}
{%             if view.included is arista.avd.defined(true) %}
{%                 set view_cli = view_cli ~ "included" %}
{%             elif view.included is arista.avd.defined(false) %}
{%                 set view_cli = view_cli ~ "excluded" %}
{%             endif %}
{{ view_cli }}
{%         endfor %}
{%     endif %}
{%     if snmp_server.communities is arista.avd.defined %}
{%         for community in snmp_server.communities | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
{%             set communities_cli = "snmp-server community " ~ community.name %}
{%             if community.view is arista.avd.defined %}
{%                 set communities_cli = communities_cli ~ " view " ~ community.view %}
{%             endif %}
{%             if community.access is arista.avd.defined %}
{%                 set communities_cli = communities_cli ~ " " ~ community.access %}
{%             else %}
{%                 set communities_cli = communities_cli ~ " ro" %}
{%             endif %}
{%             if community.access_list_ipv6 is arista.avd.defined %}
{%                 set communities_cli = communities_cli ~ " ipv6 " ~ community.access_list_ipv6.name %}
{%             endif %}
{%             if community.access_list_ipv4 is arista.avd.defined %}
{%                 set communities_cli = communities_cli ~ " " ~ community.access_list_ipv4.name %}
{%             endif %}
{{ communities_cli }}
{%         endfor %}
{%     endif %}
{%     if snmp_server.groups is arista.avd.defined %}
{%         for group in snmp_server.groups %}
{%             if group.name is arista.avd.defined %}
{%                 set group_cli = "snmp-server group " ~ group.name %}
{%             endif %}
{%             if group.version is arista.avd.defined %}
{%                 set group_cli = group_cli ~ " " ~ group.version %}
{%             endif %}
{%             if group.authentication is arista.avd.defined and group.version is arista.avd.defined('v3') %}
{%                 set group_cli = group_cli ~ " " ~ group.authentication %}
{%             endif %}
{%             if group.read is arista.avd.defined %}
{%                 set group_cli = group_cli ~ " read " ~ group.read %}
{%             endif %}
{%             if group.write is arista.avd.defined %}
{%                 set group_cli = group_cli ~ " write " ~ group.write %}
{%             endif %}
{%             if group.notify is arista.avd.defined %}
{%                 set group_cli = group_cli ~ " notify " ~ group.notify %}
{%             endif %}
{{ group_cli }}
{%         endfor %}
{%     endif %}
{%     if snmp_server.users is arista.avd.defined %}
{%         for user in snmp_server.users %}
{%             if user.name is arista.avd.defined %}
{%                 set user_cli = "snmp-server user " ~ user.name %}
{%             endif %}
{%             if user.group is arista.avd.defined %}
{%                 set user_cli = user_cli ~ " " ~ user.group %}
{%             endif %}
{%             if user.remote_address is arista.avd.defined and user.version is arista.avd.defined('v3') %}
{%                 set user_cli = user_cli ~ " remote " ~ user.remote_address %}
{%                 if user.udp_port is arista.avd.defined %}
{%                     set user_cli = user_cli ~ " udp-port " ~ user.udp_port %}
{%                 endif %}
{%             endif %}
{%             if user.version is arista.avd.defined %}
{%                 set user_cli = user_cli ~ " " ~ user.version %}
{%             endif %}
{%             if user.auth is arista.avd.defined
                  and user.version is arista.avd.defined('v3')
                  and user.auth_passphrase is arista.avd.defined %}
{%                 if user.localized is arista.avd.defined %}
{%                     set user_cli = user_cli ~ " localized " ~ user.localized %}
{%                 endif %}
{%                 set user_cli = user_cli ~ " auth " ~ user.auth ~ " " ~ user.auth_passphrase %}
{%                 if user.priv is arista.avd.defined
                      and user.priv_passphrase is arista.avd.defined %}
{%                     set user_cli = user_cli ~ " priv " ~ user.priv ~ " " ~ user.priv_passphrase %}
{%                 endif %}
{%             endif %}
{{ user_cli }}
{%         endfor %}
{%     endif %}
{%     if snmp_server.hosts is arista.avd.defined %}
{%         for host in snmp_server.hosts %}
{%             if host.host is arista.avd.defined %}
{%                 set host_cli = "snmp-server host " ~ host.host %}
{%                 if host.vrf is arista.avd.defined %}
{%                     set host_cli = host_cli ~ " vrf " ~ host.vrf %}
{%                 endif %}
{%                 if host.users is arista.avd.defined
                      and host.version | arista.avd.default('3') | string == '3' %}
{%                     for user in host.users %}
{%                         if user.username is arista.avd.defined
                              and user.authentication_level is arista.avd.defined %}
{{ host_cli }} version 3 {{ user.authentication_level }} {{ user.username }}
{%                         endif %}
{%                     endfor %}
{%                 elif host.community is arista.avd.defined
                        and host.version | arista.avd.default('2c') | string in ['1', '2c'] %}
{{ host_cli }} version {{ host.version | arista.avd.default('2c') }} {{ host.community }}
{%                 endif %}
{%             endif %}
{%         endfor %}
{%     endif %}
{%     if snmp_server.traps.enable is arista.avd.defined(true) %}
snmp-server enable traps
{%     elif snmp_server.traps.enable is arista.avd.defined(false) %}
no snmp-server enable traps
{%     endif %}
{%     for snmp_trap in snmp_server.traps.snmp_traps | arista.avd.natural_sort("name") %}
{%         if snmp_trap.enabled is arista.avd.defined(false) %}
no snmp-server enable traps {{ snmp_trap.name }}
{%         else %}
snmp-server enable traps {{ snmp_trap.name }}
{%         endif %}
{%     endfor %}
{%     if snmp_server.vrfs is arista.avd.defined %}
{%         for vrf in snmp_server.vrfs %}
{%             if vrf.enable is arista.avd.defined(true) %}
snmp-server vrf {{ vrf.name }}
{%             else %}
no snmp-server vrf {{ vrf.name }}
{%             endif %}
{%         endfor %}
{%     endif %}
{% endif %}
{# eos - hardware settings #}
{% if hardware.access_list.mechanism is arista.avd.defined %}
!
hardware access-list mechanism {{ hardware.access_list.mechanism }}
{% endif %}
{% if hardware.speed_groups is arista.avd.defined %}
!
{%     for speed_group in hardware.speed_groups | arista.avd.convert_dicts('speed_group') %}
{%         if speed_group.serdes is arista.avd.defined %}
hardware speed-group {{ speed_group.speed_group }} serdes {{ speed_group.serdes }}
{%         endif %}
{%     endfor %}
{% endif %}
{# spanning-tree #}
{% if spanning_tree is arista.avd.defined %}
!
{%     if spanning_tree.root_super is arista.avd.defined(true) %}
spanning-tree root super
{%     endif %}
{%     if spanning_tree.mode is arista.avd.defined() %}
spanning-tree mode {{ spanning_tree.mode }}
{%     endif %}
{%     if spanning_tree.no_spanning_tree_vlan is arista.avd.defined %}
no spanning-tree vlan-id {{ spanning_tree.no_spanning_tree_vlan }}
{%     endif %}
{%     if spanning_tree.mst.pvst_border is arista.avd.defined(true) %}
spanning-tree mst pvst border
{%     endif %}
{%     if spanning_tree.edge_port.bpduguard_default is arista.avd.defined(true) %}
spanning-tree edge-port bpduguard default
{%     elif spanning_tree.edge_port.bpduguard_default is arista.avd.defined(false) %}
no spanning-tree edge-port bpduguard default
{%     endif %}
{%     if spanning_tree.edge_port.bpdufilter_default is arista.avd.defined(true) %}
spanning-tree edge-port bpdufilter default
{%     elif spanning_tree.edge_port.bpdufilter_default is arista.avd.defined(false) %}
no spanning-tree edge-port bpdufilter default
{%     endif %}
{%     if spanning_tree.bpduguard_rate_limit is arista.avd.defined %}
{%         if spanning_tree.bpduguard_rate_limit.default is arista.avd.defined(false) %}
no spanning-tree bpduguard rate-limit default
{%         elif spanning_tree.bpduguard_rate_limit.default is arista.avd.defined(true) %}
spanning-tree bpduguard rate-limit default
{%         endif %}
{%         if spanning_tree.bpduguard_rate_limit.count is arista.avd.defined %}
spanning-tree bpduguard rate-limit count {{ spanning_tree.bpduguard_rate_limit.count }}
{%         endif %}
{%     endif %}
{%     if spanning_tree.mode is arista.avd.defined('mstp') %}
{%         for mst_instance in spanning_tree.mst_instances | arista.avd.natural_sort('id') %}
{%             if mst_instance.priority is arista.avd.defined %}
spanning-tree mst {{ mst_instance.id }} priority {{ mst_instance.priority }}
{%             endif %}
{%         endfor %}
{%     elif spanning_tree.mode is arista.avd.defined('rapid-pvst') %}
{%         for vlan_id in spanning_tree.rapid_pvst_instances | arista.avd.natural_sort('id') %}
{%             if vlan_id.priority is arista.avd.defined %}
spanning-tree vlan-id {{ vlan_id.id }} priority {{ vlan_id.priority }}
{%             endif %}
{%         endfor %}
{%     else %}
{%         if spanning_tree.rstp_priority is arista.avd.defined %}
spanning-tree priority {{ spanning_tree.rstp_priority }}
{%         endif %}
{%     endif %}
{%     if spanning_tree.mst.configuration is arista.avd.defined %}
!
spanning-tree mst configuration
{%         if spanning_tree.mst.configuration.name is arista.avd.defined %}
   name {{ spanning_tree.mst.configuration.name }}
{%         endif %}
{%         if spanning_tree.mst.configuration.revision is arista.avd.defined %}
   revision {{ spanning_tree.mst.configuration.revision }}
{%         endif %}
{%         for instance in spanning_tree.mst.configuration.instances | arista.avd.natural_sort('id') %}
{%             if instance.vlans is arista.avd.defined %}
   instance {{ instance.id }} vlan {{ instance.vlans }}
{%             endif %}
{%         endfor %}
{%     endif %}
{% endif %}
{# eos - platform #}
{% if platform is arista.avd.defined %}
!
{%     if platform.trident.forwarding_table_partition is arista.avd.defined %}
platform trident forwarding-table partition {{ platform.trident.forwarding_table_partition }}
{%     endif %}
{%     if platform.sand is arista.avd.defined %}
{%         for qos_map in platform.sand.qos_maps | arista.avd.natural_sort('traffic_class') %}
{%             if qos_map.traffic_class is arista.avd.defined and qos_map.to_network_qos is arista.avd.defined %}
platform sand qos map traffic-class {{ qos_map.traffic_class }} to network-qos {{ qos_map.to_network_qos }}
{%             endif %}
{%         endfor %}
{%         if platform.sand.lag.hardware_only is arista.avd.defined(true) %}
platform sand lag hardware-only
{%         endif %}
{%         if platform.sand.lag.mode is arista.avd.defined %}
platform sand lag mode {{ platform.sand.lag.mode }}
{%         endif %}
{%         if platform.sand.forwarding_mode is arista.avd.defined %}
platform sand forwarding mode {{ platform.sand.forwarding_mode }}
{%         endif %}
{%         if platform.sand.multicast_replication.default is arista.avd.defined %}
platform sand multicast replication default {{ platform.sand.multicast_replication.default }}
{%         endif %}
{%     endif %}
{% endif %}
{# eos - transceiver settings #}
{% if service_unsupported_transceiver.license_name is arista.avd.defined and service_unsupported_transceiver.license_key is arista.avd.defined %}
!
service unsupported-transceiver {{ service_unsupported_transceiver.license_name }} {{ service_unsupported_transceiver.license_key }}
{% endif %}
{# eos - AAA Group Servers#}
{% if tacacs_servers is arista.avd.defined %}
!
{%     for host in tacacs_servers.hosts | arista.avd.natural_sort %}
{%         if host.host is arista.avd.defined %}
{%             set host_cli = "tacacs-server host " ~ host.host %}
{%         endif %}
{%         if host.single_connection is arista.avd.defined(true) %}
{%             set host_cli = host_cli ~ " single-connection" %}
{%         endif %}
{%         if host.vrf is arista.avd.defined %}
{%             if host.vrf != 'default' %}
{%                 set host_cli = host_cli ~ " vrf " ~ host.vrf %}
{%             endif %}
{%         endif %}
{%         if host.timeout is arista.avd.defined %}
{%             set host_cli = host_cli ~ " timeout " ~ host.timeout %}
{%         endif %}
{%         if host.key is arista.avd.defined %}
{%             set host_cli = host_cli ~ " key " ~ host.key_type | arista.avd.default('7') ~ ' ' ~ host.key %}
{%         endif %}
{{ host_cli }}
{%     endfor %}
{%     if tacacs_servers.policy_unknown_mandatory_attribute_ignore is arista.avd.defined(true) %}
tacacs-server policy unknown-mandatory-attribute ignore
{%     endif %}
{% endif %}
{# eos - AAA Group Servers#}
{% if aaa_server_groups is arista.avd.defined %}
{%     for aaa_server_group in aaa_server_groups %}
{%         if aaa_server_group.type is arista.avd.defined and aaa_server_group.name is arista.avd.defined %}
!
aaa group server {{ aaa_server_group.type }} {{ aaa_server_group.name }}
{%             if aaa_server_group.servers is arista.avd.defined %}
{%                 for server in aaa_server_group.servers %}
{%                     if server.server is arista.avd.defined %}
{%                         set server_cli = "server " ~ server.server %}
{%                         if server.vrf is arista.avd.defined %}
{%                             set server_cli = server_cli ~ " vrf " ~ server.vrf %}
{%                         endif %}
   {{ server_cli }}
{%                     endif %}
{%                 endfor %}
{%             endif %}
{%         endif %}
{%     endfor %}
{% endif %}
{# aaa delimiter #}
{% if aaa_authentication is arista.avd.defined or aaa_authorization is arista.avd.defined or aaa_accounting is arista.avd.defined %}
!
{% endif %}
{# eos - aaa authentication #}
{% if aaa_authentication is arista.avd.defined %}
{%     if aaa_authentication.login.default is arista.avd.defined %}
aaa authentication login default {{ aaa_authentication.login.default }}
{%     endif %}
{%     if aaa_authentication.login.console is arista.avd.defined %}
aaa authentication login console {{ aaa_authentication.login.console }}
{%     endif %}
{%     if aaa_authentication.enable.default is arista.avd.defined %}
aaa authentication enable default {{ aaa_authentication.enable.default }}
{%     endif %}
{%     if aaa_authentication.dot1x.default is arista.avd.defined %}
aaa authentication dot1x default {{ aaa_authentication.dot1x.default }}
{%     endif %}
{%     if aaa_authentication.policies.on_failure_log is arista.avd.defined(true) %}
aaa authentication policy on-failure log
{%     endif %}
{%     if aaa_authentication.policies.on_success_log is arista.avd.defined(true) %}
aaa authentication policy on-success log
{%     endif %}
{%     if aaa_authentication.policies.local.allow_nopassword is arista.avd.defined(true) %}
aaa authentication policy local allow-nopassword-remote-login
{%     endif %}
{%     if aaa_authentication.policies.lockout.failure is arista.avd.defined and aaa_authentication.policies.lockout.duration is arista.avd.defined %}
{%         set lockout_cli = "aaa authentication policy lockout failure " ~ aaa_authentication.policies.lockout.failure %}
{%         if aaa_authentication.policies.lockout.window is arista.avd.defined %}
{%             set lockout_cli = lockout_cli ~ " window " ~ aaa_authentication.policies.lockout.window %}
{%         endif %}
{%         set lockout_cli = lockout_cli ~ " duration " ~ aaa_authentication.policies.lockout.duration %}
{{ lockout_cli }}
{%     endif %}
{% endif %}
{# eos - aaa authorization #}
{% if aaa_authorization is arista.avd.defined %}
{%     if aaa_authorization.serial_console is arista.avd.defined(true) %}
aaa authorization serial-console
{%     endif %}
{%     if aaa_authorization.exec.default is arista.avd.defined %}
aaa authorization exec default {{ aaa_authorization.exec.default }}
{%     endif %}
{%     if aaa_authorization.config_commands is arista.avd.defined(false) %}
no aaa authorization config-commands
{%     endif %}
{%     if aaa_authorization.commands.all_default is arista.avd.defined %}
aaa authorization commands all default {{ aaa_authorization.commands.all_default }}
{%     endif %}
{%     for command_level in aaa_authorization.commands.privilege | arista.avd.natural_sort %}
{%         if command_level.level is arista.avd.defined and command_level.default is arista.avd.defined %}
{%             set commands_privilege_cli = "aaa authorization commands " ~ command_level.level ~ " default " ~ command_level.default %}
{{ commands_privilege_cli }}
{%         endif %}
{%     endfor %}
{% endif %}
{# eos - aaa accounting #}
{% if aaa_accounting is arista.avd.defined %}
{%     if aaa_accounting.exec.console.type is arista.avd.defined and aaa_accounting.exec.console.group is arista.avd.defined %}
aaa accounting exec console {{ aaa_accounting.exec.console.type }} group {{ aaa_accounting.exec.console.group }}
{%     endif %}
{%     if aaa_accounting.commands.console is arista.avd.defined %}
{%         for command_default in aaa_accounting.commands.console %}
{%             if command_default.commands is arista.avd.defined and command_default.type is arista.avd.defined %}
{%                 set aaa_accounting_commands_commands_console_cli = "aaa accounting commands " ~ command_default.commands ~ " console " ~ command_default.type %}
{%                 if command_default.group is arista.avd.defined %}
{%                     set aaa_accounting_commands_commands_console_cli = aaa_accounting_commands_commands_console_cli ~ " group " ~ command_default.group %}
{%                 endif %}
{%                 if command_default.logging is arista.avd.defined(true) %}
{%                     set aaa_accounting_commands_commands_console_cli = aaa_accounting_commands_commands_console_cli ~ " logging" %}
{%                 endif %}
{%             endif %}
{{ aaa_accounting_commands_commands_console_cli }}
{%         endfor %}
{%     endif %}
{%     if aaa_accounting.exec.default.type is arista.avd.defined and aaa_accounting.exec.default.group is arista.avd.defined %}
aaa accounting exec default {{ aaa_accounting.exec.default.type }} group {{ aaa_accounting.exec.default.group }}
{%     endif %}
{%     if aaa_accounting.system.default.type is arista.avd.defined and aaa_accounting.system.default.group is arista.avd.defined %}
aaa accounting system default {{ aaa_accounting.system.default.type }} group {{ aaa_accounting.system.default.group }}
{%     endif %}
{%     if aaa_accounting.commands.default is arista.avd.defined %}
{%         for command_default in aaa_accounting.commands.default %}
{%             if command_default.commands is arista.avd.defined and command_default.type is arista.avd.defined %}
{%                 set aaa_accounting_commands_commands_default_cli = "aaa accounting commands " ~ command_default.commands ~ " default " ~ command_default.type %}
{%                 if command_default.group is arista.avd.defined %}
{%                     set aaa_accounting_commands_commands_default_cli = aaa_accounting_commands_commands_default_cli ~ " group " ~ command_default.group %}
{%                 endif %}
{%                 if command_default.logging is arista.avd.defined(true) %}
{%                     set aaa_accounting_commands_commands_default_cli = aaa_accounting_commands_commands_default_cli ~ " logging" %}
{%                 endif %}
{%             endif %}
{{ aaa_accounting_commands_commands_default_cli }}
{%         endfor %}
{%     endif %}
{% endif %}
{# eos - Enable password #}
{% if enable_password is arista.avd.defined %}
{%     if enable_password.key is arista.avd.defined %}
!
{%         if enable_password.hash_algorithm is arista.avd.defined('md5') %}
enable password 5 {{ enable_password.key }}
{%         elif enable_password.hash_algorithm is arista.avd.defined('sha512') %}
enable password sha512 {{ enable_password.key }}
{%         endif %}
{%     endif %}
{% elif not generate_default_config is arista.avd.defined(false) %}
!
no enable password
{% endif %}
{# eos - aaa root #}
{% if aaa_root is arista.avd.defined %}
{%     if aaa_root.secret.sha512_password is arista.avd.defined %}
aaa root secret sha512 {{ aaa_root.secret.sha512_password }}
{%     endif %}
{% elif not generate_default_config is arista.avd.defined(false) %}
no aaa root
{% endif %}
{# eos - local users #}
{% if local_users is arista.avd.defined %}
!
{%     for local_user in local_users | arista.avd.natural_sort('name') %}
{%         set local_user_cli = "username " ~ local_user.name %}
{%         if local_user.privilege is arista.avd.defined %}
{%             set local_user_cli = local_user_cli ~ " privilege " ~ local_user.privilege %}
{%         endif %}
{%         if local_user.role is arista.avd.defined %}
{%             set local_user_cli = local_user_cli ~ " role " ~ local_user.role %}
{%         endif %}
{%         if local_user.sha512_password is arista.avd.defined %}
{%             set local_user_cli = local_user_cli ~ " secret sha512 " ~ local_user.sha512_password %}
{%         elif local_user.no_password is arista.avd.defined(true) %}
{%             set local_user_cli = local_user_cli ~ " nopassword" %}
{%         endif %}
{{ local_user_cli }}
{%         if local_user.ssh_key is arista.avd.defined %}
{%             set local_ssh_key_cli = "username " ~ local_user.name %}
{%             set local_ssh_key_cli = local_ssh_key_cli ~ " ssh-key " ~ local_user.ssh_key %}
{{ local_ssh_key_cli }}
{%         endif %}
{%     endfor %}
{% endif %}
{# eos - roles #}
{% if roles is arista.avd.defined %}
!
{%     for role in roles %}
{%         if role.name is arista.avd.defined %}
role {{ role.name }}
{%             if role.sequence_numbers is arista.avd.defined %}
{%                 for sequence in role.sequence_numbers %}
{%                     if sequence.action is arista.avd.defined and sequence.command is arista.avd.defined %}
{%                         set sequence_cli = "" %}
{%                         if sequence.sequence is arista.avd.defined %}
{%                             set sequence_cli = sequence.sequence ~ " " %}
{%                         endif %}
{%                         set sequence_cli = sequence_cli ~ sequence.action %}
{%                         if sequence.mode is arista.avd.defined %}
{%                             set sequence_cli = sequence_cli ~ " mode " ~ sequence.mode %}
{%                         endif %}
{%                         set sequence_cli = sequence_cli ~ " command " ~ sequence.command %}
   {{ sequence_cli }}
{%                     endif %}
{%                 endfor %}
{%             endif %}
{%         endif %}
{%     endfor %}
{% endif %}
{# eos - tap-aggregation #}
{% if tap_aggregation is arista.avd.defined %}
!
tap aggregation
{%     if tap_aggregation.mode.exclusive is arista.avd.defined %}
{%         if tap_aggregation.mode.exclusive.enabled is arista.avd.defined(true) %}
{%             set mode_cli = "mode exclusive" %}
{%             if tap_aggregation.mode.exclusive.profile is arista.avd.defined %}
{%                 set mode_cli = mode_cli ~ " profile " ~ tap_aggregation.mode.exclusive.profile %}
{%             endif %}
   {{ mode_cli }}
{%         endif %}
{%         for interface in tap_aggregation.mode.exclusive.no_errdisable | arista.avd.natural_sort %}
   mode exclusive no-errdisable {{ interface }}
{%         endfor %}
{%     endif %}
{%     if tap_aggregation.encapsulation_dot1br_strip is arista.avd.defined(true) %}
   encapsulation dot1br strip
{%     endif %}
{%     if tap_aggregation.encapsulation_vn_tag_strip is arista.avd.defined(true) %}
   encapsulation vn-tag strip
{%     endif %}
{%     if tap_aggregation.protocol_lldp_trap is arista.avd.defined(true) %}
   protocol lldp trap
{%     endif %}
{%     if tap_aggregation.truncation_size is arista.avd.defined %}
   truncation size {{ tap_aggregation.truncation_size }}
{%     endif %}
{%     if tap_aggregation.mac.timestamp.replace_source_mac is arista.avd.defined(true) %}
   mac timestamp replace source-mac
{%     elif tap_aggregation.mac.timestamp.header is arista.avd.defined %}
{%         if tap_aggregation.mac.timestamp.header.format is arista.avd.defined %}
   mac timestamp header format {{ tap_aggregation.mac.timestamp.header.format }}
{%         endif %}
{%         if tap_aggregation.mac.timestamp.header.eth_type is arista.avd.defined %}
   mac timestamp header eth-type {{ tap_aggregation.mac.timestamp.header.eth_type }}
{%         endif %}
{%     endif %}
{%     if tap_aggregation.mac.fcs_append is arista.avd.defined(true) %}
   mac fcs append
{%     elif tap_aggregation.mac.fcs_error is arista.avd.defined %}
   mac fcs-error {{ tap_aggregation.mac.fcs_error }}
{%     endif %}
{% endif %}
{# eos - Clock #}
{% if clock is arista.avd.defined %}
!
{%     if clock.timezone is arista.avd.defined %}
clock timezone {{ clock.timezone }}
{%     endif %}
{% endif %}
{# eos - VLANs #}
{% for vlan in vlans | arista.avd.natural_sort('id') %}
!
vlan {{ vlan.id }}
{%     if vlan.name is arista.avd.defined %}
   name {{ vlan.name }}
{%     endif %}
{%     if vlan.state is arista.avd.defined %}
   state {{ vlan.state }}
{%     endif %}
{%     for trunk_group in vlan.trunk_groups | arista.avd.natural_sort %}
   trunk group {{ trunk_group }}
{%     endfor %}
{%     if vlan.private_vlan.type is arista.avd.defined and
          vlan.private_vlan.primary_vlan is arista.avd.defined %}
   private-vlan {{ vlan.private_vlan.type }} primary vlan {{ vlan.private_vlan.primary_vlan }}
{%     endif %}
{% endfor %}
{# eos - VRFs #}
{% for vrf in vrfs | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
{%     if vrf.name != 'default' %}
!
vrf instance {{ vrf.name }}
{%         if vrf.description is arista.avd.defined %}
   description {{ vrf.description }}
{%         endif %}
{%     endif %}
{% endfor %}
{% if link_tracking_groups is arista.avd.defined %}
!
{%     for link_tracking_group in link_tracking_groups | arista.avd.natural_sort('name') %}
{%         if link_tracking_group.name is arista.avd.defined %}
link tracking group {{ link_tracking_group.name }}
{%             if link_tracking_group.links_minimum is arista.avd.defined %}
   links minimum {{ link_tracking_group.links_minimum }}
{%             endif %}
{%             if link_tracking_group.recovery_delay is arista.avd.defined %}
   recovery delay {{ link_tracking_group.recovery_delay }}
{%             endif %}
{%         endif %}
{%     endfor %}
{% endif %}
{# cvx #}
{% if cvx is arista.avd.defined %}
!
cvx
{%     if cvx.shutdown is arista.avd.defined(true) %}
   shutdown
{%     elif cvx.shutdown is arista.avd.defined(false) %}
   no shutdown
{%     endif %}
{%     if cvx.services is arista.avd.defined %}
{%         if cvx.services.mcs is arista.avd.defined %}
   service mcs
{%             if cvx.services.mcs.redis.password is arista.avd.defined %}
      redis password {{ cvx.services.mcs.redis.password_type | arista.avd.default("7") }} {{ cvx.services.mcs.redis.password }}
{%             endif %}
{%             if cvx.services.mcs.shutdown is arista.avd.defined(false) %}
      no shutdown
{%             elif cvx.services.mcs.shutdown is arista.avd.defined(true) %}
      shutdown
{%             endif %}
{%         endif %}
{%     endif %}
{% endif %}
{# eos- Port-Channel Interfaces #}
{% for port_channel_interface in port_channel_interfaces | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
!
interface {{ port_channel_interface.name }}
{%     if port_channel_interface.description is arista.avd.defined %}
   description {{ port_channel_interface.description }}
{%     endif %}
{%     if port_channel_interface.logging.event.link_status is arista.avd.defined(true) %}
   logging event link-status
{%     elif port_channel_interface.logging.event.link_status is arista.avd.defined(false) %}
   no logging event link-status
{%     endif %}
{%     if port_channel_interface.shutdown is arista.avd.defined(true) %}
   shutdown
{%     elif port_channel_interface.shutdown is arista.avd.defined(false) %}
   no shutdown
{%     endif %}
{%     if port_channel_interface.mtu is arista.avd.defined %}
   mtu {{ port_channel_interface.mtu }}
{%     endif %}
{%     if port_channel_interface.type is arista.avd.defined("routed") %}
   no switchport
{%     elif port_channel_interface.type | arista.avd.default in ['l3dot1q', 'l2dot1q'] %}
{%         if port_channel_interface.vlan_id is arista.avd.defined and
              port_channel_interface.type == 'l2dot1q' %}
   vlan id {{ port_channel_interface.vlan_id }}
{%         endif %}
{%         if port_channel_interface.encapsulation_dot1q_vlan is arista.avd.defined %}
   encapsulation dot1q vlan {{ port_channel_interface.encapsulation_dot1q_vlan }}
{%         elif port_channel_interface.encapsulation_vlan.client.dot1q.vlan is arista.avd.defined() %}
{%             set encapsulation_cli = "client dot1q " ~ port_channel_interface.encapsulation_vlan.client.dot1q.vlan %}
{%             if port_channel_interface.encapsulation_vlan.network.dot1q.vlan is arista.avd.defined() %}
{%                 set encapsulation_cli = encapsulation_cli ~ " network dot1q " ~ port_channel_interface.encapsulation_vlan.network.dot1q.vlan %}
{%             elif port_channel_interface.encapsulation_vlan.network.client is arista.avd.defined(true) %}
{%                 set encapsulation_cli = encapsulation_cli ~ " network client" %}
{%             endif %}
{%         elif port_channel_interface.encapsulation_vlan.client.dot1q.inner is arista.avd.defined and port_channel_interface.encapsulation_vlan.client.dot1q.outer is arista.avd.defined %}
{%             set encapsulation_cli = "client dot1q outer " ~ port_channel_interface.encapsulation_vlan.client.dot1q.outer ~ " inner " ~ port_channel_interface.encapsulation_vlan.client.dot1q.inner %}
{%             if port_channel_interface.encapsulation_vlan.network.dot1q.inner is arista.avd.defined and port_channel_interface.encapsulation_vlan.network.dot1q.outer is arista.avd.defined %}
{%                 set encapsulation_cli = encapsulation_cli ~ " network dot1q outer " ~ port_channel_interface.encapsulation_vlan.network.dot1q.inner ~ " inner " ~ port_channel_interface.encapsulation_vlan.network.dot1q.outer %}
{%             elif port_channel_interface.encapsulation_vlan.network.dot1q.client is arista.avd.defined(true) %}
{%                 set encapsulation_cli = encapsulation_cli ~ " network client" %}
{%             endif %}
{%         elif port_channel_interface.encapsulation_vlan.client.unmatched is arista.avd.defined(true) %}
{%             set encapsulation_cli = "client unmatched" %}
{%         endif %}
{%         if encapsulation_cli is arista.avd.defined %}
   encapsulation vlan
      {{ encapsulation_cli }}
{%         endif %}
{%     else %}
   switchport
{%     endif %}
{%     if port_channel_interface.mode is arista.avd.defined("access") %}
   switchport access vlan {{ port_channel_interface.vlans }}
{%     endif %}
{%     if port_channel_interface.vlans is arista.avd.defined and port_channel_interface.mode is arista.avd.defined("trunk") %}
   switchport trunk allowed vlan {{ port_channel_interface.vlans }}
{%     endif %}
{%     if port_channel_interface.mode is arista.avd.defined and port_channel_interface.mode in ['trunk', 'trunk phone'] %}
{%         if port_channel_interface.native_vlan_tag is arista.avd.defined(true) %}
   switchport trunk native vlan tag
{%         elif port_channel_interface.native_vlan is arista.avd.defined %}
   switchport trunk native vlan {{ port_channel_interface.native_vlan }}
{%         endif %}
{%     endif %}
{%     if port_channel_interface.phone.vlan is arista.avd.defined %}
   switchport phone vlan {{ port_channel_interface.phone.vlan }}
{%     endif %}
{%     if port_channel_interface.phone.trunk is arista.avd.defined %}
   switchport phone trunk {{ port_channel_interface.phone.trunk }}
{%     endif %}
{%     if port_channel_interface.mode is arista.avd.defined("trunk") %}
   switchport mode {{ port_channel_interface.mode }}
{%     endif %}
{%     for  trunk_group in port_channel_interface.trunk_groups | arista.avd.natural_sort %}
   switchport trunk group {{ trunk_group }}
{%     endfor %}
{%     if port_channel_interface.trunk_private_vlan_secondary is arista.avd.defined(true) %}
   switchport trunk private-vlan secondary
{%     elif port_channel_interface.trunk_private_vlan_secondary is arista.avd.defined(false) %}
   no switchport trunk private-vlan secondary
{%     endif %}
{%     if port_channel_interface.pvlan_mapping is arista.avd.defined %}
   switchport pvlan mapping {{ port_channel_interface.pvlan_mapping }}
{%     endif %}
{%     for vlan_translation in port_channel_interface.vlan_translations | arista.avd.natural_sort %}
{%         if vlan_translation.from is arista.avd.defined and vlan_translation.to is arista.avd.defined %}
{%             set vlan_translation_cli = 'switchport vlan translation' %}
{%             if vlan_translation.direction | arista.avd.default in ['in', 'out'] %}
{%                 set vlan_translation_cli = vlan_translation_cli ~ ' ' ~ vlan_translation.direction %}
{%             endif %}
{%             set vlan_translation_cli = vlan_translation_cli ~ ' ' ~ vlan_translation.from %}
{%             set vlan_translation_cli = vlan_translation_cli ~ ' ' ~ vlan_translation.to %}
   {{ vlan_translation_cli }}
{%         endif %}
{%     endfor %}
{%     if port_channel_interface.l2_protocol.encapsulation_dot1q_vlan is arista.avd.defined %}
   l2-protocol encapsulation dot1q vlan {{ port_channel_interface.l2_protocol.encapsulation_dot1q_vlan }}
{%     endif %}
{%     if port_channel_interface.evpn_ethernet_segment.identifier | arista.avd.default(port_channel_interface.esi) is arista.avd.defined or port_channel_interface.evpn_ethernet_segment is arista.avd.defined %}
   evpn ethernet-segment
{%         if port_channel_interface.evpn_ethernet_segment.identifier | arista.avd.default(port_channel_interface.esi) is arista.avd.defined %}
      identifier {{ port_channel_interface.evpn_ethernet_segment.identifier | arista.avd.default(port_channel_interface.esi) }}
{%         endif %}
{%         if port_channel_interface.evpn_ethernet_segment.redundancy is arista.avd.defined %}
      redundancy {{ port_channel_interface.evpn_ethernet_segment.redundancy }}
{%         endif %}
{%         if port_channel_interface.evpn_ethernet_segment.designated_forwarder_election is arista.avd.defined %}
{%             if port_channel_interface.evpn_ethernet_segment.designated_forwarder_election.algorithm is arista.avd.defined("modulus") %}
      designated-forwarder election algorithm modulus
{%             elif port_channel_interface.evpn_ethernet_segment.designated_forwarder_election.algorithm is arista.avd.defined("preference") and port_channel_interface.evpn_ethernet_segment.designated_forwarder_election.preference_value is arista.avd.defined %}
{%                 set dfe_algo_cli = "designated-forwarder election algorithm preference " ~ port_channel_interface.evpn_ethernet_segment.designated_forwarder_election.preference_value %}
{%                 if port_channel_interface.evpn_ethernet_segment.designated_forwarder_election.dont_preempt is arista.avd.defined(true) %}
{%                     set dfe_algo_cli = dfe_algo_cli ~ " dont-preempt" %}
{%                 endif %}
      {{ dfe_algo_cli }}
{%             endif %}
{%             if port_channel_interface.evpn_ethernet_segment.designated_forwarder_election.hold_time is arista.avd.defined %}
{%                 set dfe_hold_time_cli = "designated-forwarder election hold-time " ~ port_channel_interface.evpn_ethernet_segment.designated_forwarder_election.hold_time %}
{%                 if port_channel_interface.evpn_ethernet_segment.designated_forwarder_election.subsequent_hold_time is arista.avd.defined %}
{%                     set dfe_hold_time_cli = dfe_hold_time_cli ~ " subsequent-hold-time " ~ port_channel_interface.evpn_ethernet_segment.designated_forwarder_election.subsequent_hold_time %}
{%                 endif %}
      {{ dfe_hold_time_cli }}
{%             endif %}
{%             if port_channel_interface.evpn_ethernet_segment.designated_forwarder_election.candidate_reachability_required is arista.avd.defined(true) %}
      designated-forwarder election candidate reachability required
{%             elif port_channel_interface.evpn_ethernet_segment.designated_forwarder_election.candidate_reachability_required is arista.avd.defined(false) %}
      no designated-forwarder election candidate reachability required
{%             endif %}
{%         endif %}
{%         if port_channel_interface.evpn_ethernet_segment.mpls.tunnel_flood_filter_time is arista.avd.defined %}
      mpls tunnel flood filter time {{ port_channel_interface.evpn_ethernet_segment.mpls.tunnel_flood_filter_time }}
{%         endif %}
{%         if port_channel_interface.evpn_ethernet_segment.mpls.shared_index is arista.avd.defined %}
      mpls shared index {{ port_channel_interface.evpn_ethernet_segment.mpls.shared_index }}
{%         endif %}
{%         if port_channel_interface.evpn_ethernet_segment.route_target | arista.avd.default(port_channel_interface.rt) is arista.avd.defined %}
      route-target import {{ port_channel_interface.evpn_ethernet_segment.route_target | arista.avd.default(port_channel_interface.rt) }}
{%         endif %}
{%     endif %}
{%     if port_channel_interface.snmp_trap_link_change is arista.avd.defined(false) %}
   no snmp trap link-change
{%     elif port_channel_interface.snmp_trap_link_change is arista.avd.defined(true) %}
   snmp trap link-change
{%     endif %}
{%     if port_channel_interface.lacp_id is arista.avd.defined %}
   lacp system-id {{ port_channel_interface.lacp_id }}
{%     endif %}
{%     if port_channel_interface.lacp_fallback_timeout is arista.avd.defined %}
   port-channel lacp fallback timeout {{ port_channel_interface.lacp_fallback_timeout }}
{%     endif %}
{%     if port_channel_interface.lacp_fallback_mode is arista.avd.defined %}
   port-channel lacp fallback {{ port_channel_interface.lacp_fallback_mode }}
{%     endif %}
{%     if port_channel_interface.mlag is arista.avd.defined %}
   mlag {{ port_channel_interface.mlag }}
{%     endif %}
{%     if port_channel_interface.qos.trust is arista.avd.defined %}
{%         if port_channel_interface.qos.trust == 'disabled' %}
   no qos trust
{%         else %}
   qos trust {{ port_channel_interface.qos.trust }}
{%         endif %}
{%     endif %}
{%     if port_channel_interface.qos.dscp is arista.avd.defined %}
   qos dscp {{ port_channel_interface.qos.dscp }}
{%     endif %}
{%     if port_channel_interface.qos.cos is arista.avd.defined %}
   qos cos {{ port_channel_interface.qos.cos }}
{%     endif %}
{%     if port_channel_interface.shape.rate is arista.avd.defined %}
   shape rate {{ port_channel_interface.shape.rate }}
{%     endif %}
{%     if port_channel_interface.spanning_tree_portfast is arista.avd.defined("edge") %}
   spanning-tree portfast
{%     elif port_channel_interface.spanning_tree_portfast is arista.avd.defined("network") %}
   spanning-tree portfast network
{%     endif %}
{%     if port_channel_interface.spanning_tree_bpduguard is arista.avd.defined(true) or port_channel_interface.spanning_tree_bpduguard is arista.avd.defined("enabled") %}
   spanning-tree bpduguard enable
{%     elif port_channel_interface.spanning_tree_bpduguard is arista.avd.defined("disabled") %}
   spanning-tree bpduguard disable
{%     endif %}
{%     if port_channel_interface.spanning_tree_bpdufilter is arista.avd.defined(true) or port_channel_interface.spanning_tree_bpdufilter is arista.avd.defined("enabled") %}
   spanning-tree bpdufilter enable
{%     elif port_channel_interface.spanning_tree_bpdufilter is arista.avd.defined("disabled") %}
   spanning-tree bpdufilter disable
{%     endif %}
{%     if port_channel_interface.spanning_tree_guard is arista.avd.defined %}
{%         if port_channel_interface.spanning_tree_guard == 'disabled' %}
   spanning-tree guard none
{%         else %}
   spanning-tree guard {{ port_channel_interface.spanning_tree_guard }}
{%         endif %}
{%     endif %}
{%     if port_channel_interface.vrf is arista.avd.defined %}
   vrf {{ port_channel_interface.vrf }}
{%     endif %}
{%     if port_channel_interface.ip_proxy_arp is arista.avd.defined(true) %}
   ip proxy-arp
{%     endif %}
{%     if port_channel_interface.ip_address is arista.avd.defined %}
   ip address {{ port_channel_interface.ip_address }}
{%     endif %}
{%     if port_channel_interface.ipv6_enable is arista.avd.defined(true) %}
   ipv6 enable
{%     endif %}
{%     if port_channel_interface.ipv6_address is arista.avd.defined %}
   ipv6 address {{ port_channel_interface.ipv6_address }}
{%     endif %}
{%     if port_channel_interface.ipv6_address_link_local is arista.avd.defined %}
   ipv6 address {{ port_channel_interface.ipv6_address_link_local }} link-local
{%     endif %}
{%     if port_channel_interface.ipv6_nd_ra_disabled is arista.avd.defined(true) %}
   ipv6 nd ra disabled
{%     endif %}
{%     if port_channel_interface.ipv6_nd_managed_config_flag is arista.avd.defined(true) %}
   ipv6 nd managed-config-flag
{%     endif %}
{%     if port_channel_interface.ipv6_nd_prefixes is arista.avd.defined %}
{%         for ipv6_nd_prefix in port_channel_interface.ipv6_nd_prefixes | arista.avd.convert_dicts('ipv6_prefix') %}
{%             set ipv6_nd_prefix_cli = "ipv6 nd prefix " ~ ipv6_nd_prefix.ipv6_prefix %}
{%             if ipv6_nd_prefix.valid_lifetime is arista.avd.defined %}
{%                 set ipv6_nd_prefix_cli = ipv6_nd_prefix_cli ~ " " ~ ipv6_nd_prefix.valid_lifetime %}
{%             endif %}
{%             if ipv6_nd_prefix.preferred_lifetime is arista.avd.defined %}
{%                 set ipv6_nd_prefix_cli = ipv6_nd_prefix_cli ~ " " ~ ipv6_nd_prefix.preferred_lifetime  %}
{%             endif %}
{%             if ipv6_nd_prefix.no_autoconfig_flag is arista.avd.defined(true) %}
{%                 set ipv6_nd_prefix_cli = ipv6_nd_prefix_cli ~ " no-autoconfig" %}
{%             endif %}
   {{ ipv6_nd_prefix_cli }}
{%         endfor %}
{%     endif %}
{%     if port_channel_interface.access_group_in is arista.avd.defined %}
   ip access-group {{ port_channel_interface.access_group_in }} in
{%     endif %}
{%     if port_channel_interface.access_group_out is arista.avd.defined %}
   ip access-group {{ port_channel_interface.access_group_out }} out
{%     endif %}
{%     if port_channel_interface.ipv6_access_group_in is arista.avd.defined %}
   ipv6 access-group {{ port_channel_interface.ipv6_access_group_in }} in
{%     endif %}
{%     if port_channel_interface.ipv6_access_group_out is arista.avd.defined %}
   ipv6 access-group {{ port_channel_interface.ipv6_access_group_out }} out
{%     endif %}
{%     if port_channel_interface.mac_access_group_in is arista.avd.defined %}
   mac access-group {{ port_channel_interface.mac_access_group_in }} in
{%     endif %}
{%     if port_channel_interface.mac_access_group_out is arista.avd.defined %}
   mac access-group {{ port_channel_interface.mac_access_group_out }} out
{%     endif %}
{%     if port_channel_interface.ospf_network_point_to_point is arista.avd.defined(true) %}
   ip ospf network point-to-point
{%     endif %}
{%     if port_channel_interface.ospf_area is arista.avd.defined %}
   ip ospf area {{ port_channel_interface.ospf_area }}
{%     endif %}
{%     if port_channel_interface.ospf_cost is arista.avd.defined %}
   ip ospf cost {{ port_channel_interface.ospf_cost }}
{%     endif %}
{%     if port_channel_interface.ospf_authentication is arista.avd.defined('simple') %}
   ip ospf authentication
{%     elif port_channel_interface.ospf_authentication is arista.avd.defined('message-digest') %}
   ip ospf authentication message-digest
{%     endif %}
{%     if port_channel_interface.ospf_authentication_key is arista.avd.defined %}
   ip ospf authentication-key 7 {{ port_channel_interface.ospf_authentication_key }}
{%     endif %}
{%     for ospf_message_digest_key in port_channel_interface.ospf_message_digest_keys | arista.avd.convert_dicts('id') | arista.avd.natural_sort('id') %}
{%         if ospf_message_digest_key.hash_algorithm is arista.avd.defined and ospf_message_digest_key.key is arista.avd.defined %}
   ip ospf message-digest-key {{ ospf_message_digest_key.id }} {{ ospf_message_digest_key.hash_algorithm }} 7 {{ ospf_message_digest_key.key }}
{%         endif %}
{%     endfor %}
{%     if port_channel_interface.pim.ipv4.sparse_mode is arista.avd.defined(true) %}
   pim ipv4 sparse-mode
{%     endif %}
{%     if port_channel_interface.pim.ipv4.dr_priority is arista.avd.defined %}
   pim ipv4 dr-priority {{ port_channel_interface.pim.ipv4.dr_priority }}
{%     endif %}
{%     if port_channel_interface.vmtracer is arista.avd.defined(true) %}
   vmtracer vmware-esx
{%     endif %}
{%     if port_channel_interface.ptp.enable is arista.avd.defined(true) %}
   ptp enable
{%     endif %}
{%     if port_channel_interface.ptp.announce.interval is arista.avd.defined %}
   ptp announce interval {{ port_channel_interface.ptp.announce.interval }}
{%     endif %}
{%     if port_channel_interface.ptp.announce.timeout is arista.avd.defined %}
   ptp announce timeout {{ port_channel_interface.ptp.announce.timeout }}
{%     endif %}
{%     if port_channel_interface.ptp.delay_req is arista.avd.defined %}
   ptp delay-req interval {{ port_channel_interface.ptp.delay_req }}
{%     endif %}
{%     if port_channel_interface.ptp.delay_mechanism is arista.avd.defined %}
   ptp delay-mechanism {{ port_channel_interface.ptp.delay_mechanism }}
{%     endif %}
{%     if port_channel_interface.ptp.sync_message.interval is arista.avd.defined %}
   ptp sync-message interval {{ port_channel_interface.ptp.sync_message.interval }}
{%     endif %}
{%     if port_channel_interface.ptp.role is arista.avd.defined %}
   ptp role {{ port_channel_interface.ptp.role }}
{%     endif %}
{%     if port_channel_interface.ptp.vlan is arista.avd.defined %}
   ptp vlan {{ port_channel_interface.ptp.vlan }}
{%     endif %}
{%     if port_channel_interface.ptp.transport is arista.avd.defined %}
   ptp transport {{ port_channel_interface.ptp.transport }}
{%     endif %}
{%     if port_channel_interface.service_profile is arista.avd.defined %}
   service-profile {{ port_channel_interface.service_profile }}
{%     endif %}
{%     for section in port_channel_interface.storm_control | arista.avd.natural_sort %}
{%         if port_channel_interface.storm_control[section].unit is arista.avd.defined("pps") %}
   storm-control {{ section | replace("_", "-") }} level pps {{ port_channel_interface.storm_control[section].level }}
{%         else %}
   storm-control {{ section | replace("_", "-") }} level {{ port_channel_interface.storm_control[section].level }}
{%         endif %}
{%     endfor %}
{%     if port_channel_interface.bfd.interval is arista.avd.defined and
          port_channel_interface.bfd.min_rx is arista.avd.defined and
          port_channel_interface.bfd.multiplier is arista.avd.defined %}
   bfd interval {{ port_channel_interface.bfd.interval }} min-rx {{ port_channel_interface.bfd.min_rx }} multiplier {{ port_channel_interface.bfd.multiplier }}
{%     endif %}
{%     if port_channel_interface.bfd.echo is arista.avd.defined(true) %}
   bfd echo
{%     elif port_channel_interface.bfd.echo is arista.avd.defined(false) %}
   no bfd echo
{%     endif %}
{%     for link_tracking_group in port_channel_interface.link_tracking_groups | arista.avd.natural_sort('name') %}
{%         if link_tracking_group.name is arista.avd.defined and link_tracking_group.direction is arista.avd.defined %}
   link tracking group {{ link_tracking_group.name }} {{ link_tracking_group.direction }}
{%         endif %}
{%     endfor %}
{%     if port_channel_interface.service_policy.pbr.input is arista.avd.defined %}
   service-policy type pbr input {{ port_channel_interface.service_policy.pbr.input }}
{%     endif %}
{%     if port_channel_interface.mpls.ip is arista.avd.defined(true) %}
   mpls ip
{%     elif port_channel_interface.mpls.ip is arista.avd.defined(false) %}
   no mpls ip
{%     endif %}
{%     if port_channel_interface.mpls.ldp.interface is arista.avd.defined(true) %}
   mpls ldp interface
{%     elif port_channel_interface.mpls.ldp.interface is arista.avd.defined(false) %}
   no mpls ldp interface
{%     endif %}
{%     if port_channel_interface.mpls.ldp.igp_sync is arista.avd.defined(true) %}
   mpls ldp igp sync
{%     endif %}
{%     if port_channel_interface.isis_enable is arista.avd.defined %}
   isis enable {{ port_channel_interface.isis_enable }}
{%     endif %}
{%     if port_channel_interface.isis_circuit_type is arista.avd.defined %}
   isis circuit-type {{ port_channel_interface.isis_circuit_type }}
{%     endif %}
{%     if port_channel_interface.isis_metric is arista.avd.defined %}
   isis metric {{ port_channel_interface.isis_metric }}
{%     endif %}
{%     if port_channel_interface.isis_passive is arista.avd.defined(true) %}
   isis passive
{%     endif %}
{%     if port_channel_interface.isis_network_point_to_point is arista.avd.defined(true) %}
   isis network point-to-point
{%     endif %}
{%     if port_channel_interface.isis_hello_padding is arista.avd.defined(false) %}
   no isis hello padding
{%     elif port_channel_interface.isis_hello_padding is arista.avd.defined(true) %}
   isis hello padding
{%     endif %}
{%     if port_channel_interface.isis_authentication_mode is arista.avd.defined and
          port_channel_interface.isis_authentication_mode in ["text", "md5"] %}
   isis authentication mode {{ port_channel_interface.isis_authentication_mode }}
{%     endif %}
{%     if port_channel_interface.isis_authentication_key is arista.avd.defined %}
   isis authentication key 7 {{ port_channel_interface.isis_authentication_key }}
{%     endif %}
{%     if port_channel_interface.traffic_policy.input is arista.avd.defined %}
   traffic-policy input {{ port_channel_interface.traffic_policy.input }}
{%     endif %}
{%     if port_channel_interface.traffic_policy.output is arista.avd.defined %}
   traffic-policy output {{ port_channel_interface.traffic_policy.output }}
{%     endif %}
{%     if port_channel_interface.eos_cli is arista.avd.defined %}
   {{ port_channel_interface.eos_cli | indent(3, false) }}
{%     endif %}
{% endfor %}
{# eos - Ethernet Interfaces #}
{% for ethernet_interface in ethernet_interfaces | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
{%     if ethernet_interface.channel_group.id is arista.avd.defined and ethernet_interface.channel_group.mode is arista.avd.defined %}
{%         set port_channel_interface_name = 'Port-Channel' ~ ethernet_interface.channel_group.id %}
{%         if port_channel_interfaces | arista.avd.default([]) |
                                        arista.avd.convert_dicts('name') |
                                        selectattr('name', 'arista.avd.defined', port_channel_interface_name) |
                                        selectattr('lacp_fallback_mode', 'arista.avd.defined', 'individual') |
                                        length > 0 %}
{%             set print_ethernet = true %}
{%         endif %}
{%     else %}
{%         set print_ethernet = true %}
{%     endif %}
!
interface {{ ethernet_interface.name }}
{%     if print_ethernet is arista.avd.defined(true) %}
{%         if ethernet_interface.profile is arista.avd.defined %}
   profile {{ ethernet_interface.profile }}
{%         endif %}
{%     endif %}
{%     if ethernet_interface.description is arista.avd.defined %}
   description {{ ethernet_interface.description }}
{%     endif %}
{%     if ethernet_interface.shutdown is arista.avd.defined(true) %}
   shutdown
{%     elif ethernet_interface.shutdown is arista.avd.defined(false) %}
   no shutdown
{%     endif %}
{%     if print_ethernet is arista.avd.defined(true) %}
{%         if ethernet_interface.mtu is arista.avd.defined %}
   mtu {{ ethernet_interface.mtu }}
{%         endif %}
{%     endif %}
{%     if ethernet_interface.logging.event is arista.avd.defined %}
{%         if ethernet_interface.logging.event.link_status is arista.avd.defined(true) %}
   logging event link-status
{%         elif ethernet_interface.logging.event.link_status is arista.avd.defined(false) %}
   no logging event link-status
{%         endif %}
{%         if ethernet_interface.logging.event.congestion_drops is arista.avd.defined(true) %}
   logging event congestion-drops
{%         elif ethernet_interface.logging.event.congestion_drops is arista.avd.defined(false) %}
   no logging event congestion-drops
{%         endif %}
{%     endif %}
{%     if print_ethernet is arista.avd.defined(true) %}
{%         if ethernet_interface.flowcontrol.received is arista.avd.defined %}
   flowcontrol receive {{ ethernet_interface.flowcontrol.received }}
{%         endif %}
{%     endif %}
{%     if ethernet_interface.speed is arista.avd.defined %}
   speed {{ ethernet_interface.speed }}
{%     endif %}
{%     if print_ethernet is arista.avd.defined(true) %}
{%         if ethernet_interface.l2_mtu is arista.avd.defined %}
   l2 mtu {{ ethernet_interface.l2_mtu }}
{%         endif %}
{%     endif %}
{%     if ethernet_interface.mac_security.profile is arista.avd.defined %}
   mac security profile {{ ethernet_interface.mac_security.profile }}
{%     endif %}
{%     if ethernet_interface.error_correction_encoding.enabled is arista.avd.defined(false) %}
   no error-correction encoding
{%     else %}
{%         if ethernet_interface.error_correction_encoding.fire_code is arista.avd.defined(true) %}
   error-correction encoding fire-code
{%         elif ethernet_interface.error_correction_encoding.fire_code is arista.avd.defined(false) %}
   no error-correction encoding fire-code
{%         endif %}
{%         if ethernet_interface.error_correction_encoding.reed_solomon is arista.avd.defined(true) %}
   error-correction encoding reed-solomon
{%         elif ethernet_interface.error_correction_encoding.reed_solomon is arista.avd.defined(false) %}
   no error-correction encoding reed-solomon
{%         endif %}
{%     endif %}
{%     if print_ethernet is arista.avd.defined(true) %}
{%         if ethernet_interface.mode is arista.avd.defined('access') or ethernet_interface.mode is arista.avd.defined('dot1q-tunnel') %}
{%             if ethernet_interface.vlans is arista.avd.defined %}
   switchport access vlan {{ ethernet_interface.vlans }}
{%             endif %}
{%         endif %}
{%         if ethernet_interface.mode is arista.avd.defined and ethernet_interface.mode in ['trunk', 'trunk phone'] %}
{%             if ethernet_interface.native_vlan_tag is arista.avd.defined(true) %}
   switchport trunk native vlan tag
{%             elif ethernet_interface.native_vlan is arista.avd.defined %}
   switchport trunk native vlan {{ ethernet_interface.native_vlan }}
{%             endif %}
{%         endif %}
{%         if ethernet_interface.phone.vlan is arista.avd.defined %}
   switchport phone vlan {{ ethernet_interface.phone.vlan }}
{%         endif %}
{%         if ethernet_interface.phone.trunk is arista.avd.defined %}
   switchport phone trunk {{ ethernet_interface.phone.trunk }}
{%         endif %}
{%         for vlan_translation in ethernet_interface.vlan_translations | arista.avd.natural_sort %}
{%             if vlan_translation.from is arista.avd.defined and vlan_translation.to is arista.avd.defined %}
{%                 set vlan_translation_cli = 'switchport vlan translation' %}
{%                 if vlan_translation.direction | arista.avd.default in ['in', 'out'] %}
{%                     set vlan_translation_cli = vlan_translation_cli ~ ' ' ~ vlan_translation.direction %}
{%                 endif %}
{%                 set vlan_translation_cli = vlan_translation_cli ~ ' ' ~ vlan_translation.from %}
{%                 set vlan_translation_cli = vlan_translation_cli ~ ' ' ~ vlan_translation.to %}
   {{ vlan_translation_cli }}
{%             endif %}
{%         endfor %}
{%         if ethernet_interface.mode is arista.avd.defined('trunk') %}
{%             if ethernet_interface.vlans is arista.avd.defined %}
   switchport trunk allowed vlan {{ ethernet_interface.vlans }}
{%             endif %}
{%         endif %}
{%         if ethernet_interface.mode is arista.avd.defined %}
   switchport mode {{ ethernet_interface.mode }}
{%         endif %}
{%         for trunk_group in ethernet_interface.trunk_groups | arista.avd.natural_sort %}
   switchport trunk group {{ trunk_group }}
{%         endfor %}
{%         if ethernet_interface.type is arista.avd.defined('routed') %}
   no switchport
{%         elif ethernet_interface.type | arista.avd.default in ['l3dot1q', 'l2dot1q'] %}
{%             if ethernet_interface.vlan_id is arista.avd.defined and
                  ethernet_interface.type == 'l2dot1q' %}
   vlan id {{ ethernet_interface.vlan_id }}
{%             endif %}
{%             if ethernet_interface.encapsulation_dot1q_vlan is arista.avd.defined %}
   encapsulation dot1q vlan {{ ethernet_interface.encapsulation_dot1q_vlan }}
{%             elif ethernet_interface.encapsulation_vlan.client.dot1q.vlan is arista.avd.defined() %}
{%                 set encapsulation_cli = "client dot1q " ~ ethernet_interface.encapsulation_vlan.client.dot1q.vlan %}
{%                 if ethernet_interface.encapsulation_vlan.network.dot1q.vlan is arista.avd.defined() %}
{%                     set encapsulation_cli = encapsulation_cli ~ " network dot1q " ~ ethernet_interface.encapsulation_vlan.network.dot1q.vlan %}
{%                 elif ethernet_interface.encapsulation_vlan.network.client is arista.avd.defined(true) %}
{%                     set encapsulation_cli = encapsulation_cli ~ " network client" %}
{%                 endif %}
{%             elif ethernet_interface.encapsulation_vlan.client.dot1q.inner is arista.avd.defined and ethernet_interface.encapsulation_vlan.client.dot1q.outer is arista.avd.defined %}
{%                 set encapsulation_cli = "client dot1q outer " ~ ethernet_interface.encapsulation_vlan.client.dot1q.outer ~ " inner " ~ ethernet_interface.encapsulation_vlan.client.dot1q.inner %}
{%                 if ethernet_interface.encapsulation_vlan.network.dot1q.inner is arista.avd.defined and ethernet_interface.encapsulation_vlan.network.dot1q.outer is arista.avd.defined %}
{%                     set encapsulation_cli = encapsulation_cli ~ " network dot1q outer " ~ ethernet_interface.encapsulation_vlan.network.dot1q.inner ~ " inner " ~ ethernet_interface.encapsulation_vlan.network.dot1q.outer %}
{%                 elif ethernet_interface.encapsulation_vlan.network.dot1q.client is arista.avd.defined(true) %}
{%                     set encapsulation_cli = encapsulation_cli ~ " network client" %}
{%                 endif %}
{%             elif ethernet_interface.encapsulation_vlan.client.unmatched is arista.avd.defined(true) %}
{%                 set encapsulation_cli = "client unmatched" %}
{%             endif %}
{%             if encapsulation_cli is arista.avd.defined %}
   encapsulation vlan
      {{ encapsulation_cli }}
{%             endif %}
{%         else %}
   switchport
{%         endif %}
{%         if ethernet_interface.trunk_private_vlan_secondary is arista.avd.defined(true) %}
   switchport trunk private-vlan secondary
{%         elif ethernet_interface.trunk_private_vlan_secondary is arista.avd.defined(false) %}
   no switchport trunk private-vlan secondary
{%         endif %}
{%         if ethernet_interface.pvlan_mapping is arista.avd.defined %}
   switchport pvlan mapping {{ ethernet_interface.pvlan_mapping }}
{%         endif %}
{%         if ethernet_interface.l2_protocol.encapsulation_dot1q_vlan is arista.avd.defined %}
   l2-protocol encapsulation dot1q vlan {{ ethernet_interface.l2_protocol.encapsulation_dot1q_vlan }}
{%         endif %}
{%         if ethernet_interface.evpn_ethernet_segment is arista.avd.defined %}
   evpn ethernet-segment
{%             if ethernet_interface.evpn_ethernet_segment.identifier is arista.avd.defined %}
      identifier {{ ethernet_interface.evpn_ethernet_segment.identifier }}
{%             endif %}
{%             if ethernet_interface.evpn_ethernet_segment.redundancy is arista.avd.defined %}
      redundancy {{ ethernet_interface.evpn_ethernet_segment.redundancy }}
{%             endif %}
{%             if ethernet_interface.evpn_ethernet_segment.designated_forwarder_election is arista.avd.defined %}
{%                 if ethernet_interface.evpn_ethernet_segment.designated_forwarder_election.algorithm is arista.avd.defined("modulus") %}
      designated-forwarder election algorithm modulus
{%                 elif ethernet_interface.evpn_ethernet_segment.designated_forwarder_election.algorithm is arista.avd.defined("preference") and ethernet_interface.evpn_ethernet_segment.designated_forwarder_election.preference_value is arista.avd.defined %}
{%                     set dfe_algo_cli = "designated-forwarder election algorithm preference " ~ ethernet_interface.evpn_ethernet_segment.designated_forwarder_election.preference_value %}
{%                     if ethernet_interface.evpn_ethernet_segment.designated_forwarder_election.dont_preempt is arista.avd.defined(true) %}
{%                         set dfe_algo_cli = dfe_algo_cli ~ " dont-preempt" %}
{%                     endif %}
      {{ dfe_algo_cli }}
{%                 endif %}
{%                 if ethernet_interface.evpn_ethernet_segment.designated_forwarder_election.hold_time is arista.avd.defined %}
{%                     set dfe_hold_time_cli = "designated-forwarder election hold-time " ~ ethernet_interface.evpn_ethernet_segment.designated_forwarder_election.hold_time %}
{%                     if ethernet_interface.evpn_ethernet_segment.designated_forwarder_election.subsequent_hold_time is arista.avd.defined %}
{%                         set dfe_hold_time_cli = dfe_hold_time_cli ~ " subsequent-hold-time " ~ ethernet_interface.evpn_ethernet_segment.designated_forwarder_election.subsequent_hold_time %}
{%                     endif %}
      {{ dfe_hold_time_cli }}
{%                 endif %}
{%                 if ethernet_interface.evpn_ethernet_segment.designated_forwarder_election.candidate_reachability_required is arista.avd.defined(true) %}
      designated-forwarder election candidate reachability required
{%                 elif ethernet_interface.evpn_ethernet_segment.designated_forwarder_election.candidate_reachability_required is arista.avd.defined(false) %}
      no designated-forwarder election candidate reachability required
{%                 endif %}
{%             endif %}
{%             if ethernet_interface.evpn_ethernet_segment.mpls.tunnel_flood_filter_time is arista.avd.defined %}
      mpls tunnel flood filter time {{ ethernet_interface.evpn_ethernet_segment.mpls.tunnel_flood_filter_time }}
{%             endif %}
{%             if ethernet_interface.evpn_ethernet_segment.mpls.shared_index is arista.avd.defined %}
      mpls shared index {{ ethernet_interface.evpn_ethernet_segment.mpls.shared_index }}
{%             endif %}
{%             if ethernet_interface.evpn_ethernet_segment.route_target is arista.avd.defined %}
      route-target import {{ ethernet_interface.evpn_ethernet_segment.route_target }}
{%             endif %}
{%         endif %}
{%         if ethernet_interface.dot1x is arista.avd.defined %}
{%             if ethernet_interface.dot1x.pae.mode is arista.avd.defined %}
   dot1x pae {{ ethernet_interface.dot1x.pae.mode }}
{%             endif %}
{%             if ethernet_interface.dot1x.authentication_failure is arista.avd.defined %}
{%                 if ethernet_interface.dot1x.authentication_failure.action is arista.avd.defined('allow') and
                      ethernet_interface.dot1x.authentication_failure.allow_vlan is arista.avd.defined %}
   dot1x authentication failure action traffic allow vlan {{ ethernet_interface.dot1x.authentication_failure.allow_vlan }}
{%                 elif ethernet_interface.dot1x.authentication_failure.action is arista.avd.defined('drop') %}
   dot1x authentication failure action traffic drop
{%                 endif %}
{%             endif %}
{%             if ethernet_interface.dot1x.reauthentication is arista.avd.defined(true) %}
   dot1x reauthentication
{%             endif %}
{%             if ethernet_interface.dot1x.port_control is arista.avd.defined %}
   dot1x port-control {{ ethernet_interface.dot1x.port_control }}
{%             endif %}
{%             if ethernet_interface.dot1x.port_control_force_authorized_phone is arista.avd.defined(true) %}
   dot1x port-control force-authorized phone
{%             elif ethernet_interface.dot1x.port_control_force_authorized_phone is arista.avd.defined(false) %}
   no dot1x port-control force-authorized phone
{%             endif %}
{%             if ethernet_interface.dot1x.host_mode is arista.avd.defined %}
{%                 if ethernet_interface.dot1x.host_mode.mode is arista.avd.defined('single-host') %}
   dot1x host-mode single-host
{%                 elif ethernet_interface.dot1x.host_mode.mode is arista.avd.defined('multi-host') %}
{%                     set host_mode_cli = "dot1x host-mode multi-host" %}
{%                     if ethernet_interface.dot1x.host_mode.multi_host_authenticated is arista.avd.defined(true) %}
{%                         set host_mode_cli = host_mode_cli ~ " authenticated" %}
{%                     endif %}
   {{ host_mode_cli }}
{%                 endif %}
{%             endif %}
{%             if ethernet_interface.dot1x.mac_based_authentication.enabled is arista.avd.defined(true) %}
{%                 if ethernet_interface.dot1x.mac_based_authentication.host_mode_common is arista.avd.defined(true) %}
   dot1x mac based authentication host-mode common
{%                     if ethernet_interface.dot1x.mac_based_authentication.always is arista.avd.defined(true) %}
   dot1x mac based authentication always
{%                     endif %}
{%                 else %}
{%                     set auth_cli = "dot1x mac based authentication" %}
{%                     if ethernet_interface.dot1x.mac_based_authentication.always is arista.avd.defined(true) %}
{%                         set auth_cli = auth_cli ~ " always" %}
{%                     endif %}
   {{ auth_cli }}
{%                 endif %}
{%             endif %}
{%             if ethernet_interface.dot1x.timeout is arista.avd.defined %}
{%                 if ethernet_interface.dot1x.timeout.quiet_period is arista.avd.defined %}
   dot1x timeout quiet-period {{ ethernet_interface.dot1x.timeout.quiet_period }}
{%                 endif %}
{%                 if ethernet_interface.dot1x.timeout.reauth_timeout_ignore is arista.avd.defined(true) %}
   dot1x timeout reauth-timeout-ignore always
{%                 endif %}
{%                 if ethernet_interface.dot1x.timeout.tx_period is arista.avd.defined %}
   dot1x timeout tx-period {{ ethernet_interface.dot1x.timeout.tx_period }}
{%                 endif %}
{%                 if ethernet_interface.dot1x.timeout.reauth_period is arista.avd.defined %}
   dot1x timeout reauth-period {{ ethernet_interface.dot1x.timeout.reauth_period }}
{%                 endif %}
{%                 if ethernet_interface.dot1x.timeout.idle_host is arista.avd.defined %}
   dot1x timeout idle-host {{ ethernet_interface.dot1x.timeout.idle_host }} seconds
{%                 endif %}
{%             endif %}
{%             if ethernet_interface.dot1x.reauthorization_request_limit is arista.avd.defined %}
   dot1x reauthorization request limit {{ ethernet_interface.dot1x.reauthorization_request_limit }}
{%             endif %}
{%         endif %}
{%         if ethernet_interface.snmp_trap_link_change is arista.avd.defined(false) %}
   no snmp trap link-change
{%         elif ethernet_interface.snmp_trap_link_change is arista.avd.defined(true) %}
   snmp trap link-change
{%         endif %}
{%         if ethernet_interface.vrf is arista.avd.defined %}
   vrf {{ ethernet_interface.vrf }}
{%         endif %}
{%         if ethernet_interface.ip_proxy_arp is arista.avd.defined(true) %}
   ip proxy-arp
{%         endif %}
{%         if ethernet_interface.ip_address is arista.avd.defined %}
   ip address {{ ethernet_interface.ip_address }}
{%             if ethernet_interface.ip_address_secondaries is arista.avd.defined %}
{%                 for ip_address_secondary in ethernet_interface.ip_address_secondaries %}
   ip address {{ ip_address_secondary }} secondary
{%                 endfor %}
{%             endif %}
{%             for ip_helper in ethernet_interface.ip_helpers | arista.avd.convert_dicts('ip_helper') | arista.avd.natural_sort('ip_helper') %}
{%                 set ip_helper_cli = "ip helper-address " ~ ip_helper.ip_helper %}
{%                 if ip_helper.vrf is arista.avd.defined %}
{%                     set ip_helper_cli = ip_helper_cli ~ " vrf " ~ ip_helper.vrf %}
{%                 endif %}
{%                 if ip_helper.source_interface is arista.avd.defined %}
{%                     set ip_helper_cli = ip_helper_cli ~ " source-interface " ~ ip_helper.source_interface %}
{%                 endif %}
   {{ ip_helper_cli }}
{%             endfor %}
{%         endif %}
{%         if ethernet_interface.bfd.interval is arista.avd.defined and
              ethernet_interface.bfd.min_rx is arista.avd.defined and
              ethernet_interface.bfd.multiplier is arista.avd.defined %}
   bfd interval {{ ethernet_interface.bfd.interval }} min-rx {{ ethernet_interface.bfd.min_rx }} multiplier {{ ethernet_interface.bfd.multiplier }}
{%         endif %}
{%         if ethernet_interface.bfd.echo is arista.avd.defined(true) %}
   bfd echo
{%         elif ethernet_interface.bfd.echo is arista.avd.defined(false) %}
   no bfd echo
{%         endif %}
{%         if ethernet_interface.ipv6_enable is arista.avd.defined(true) %}
   ipv6 enable
{%         endif %}
{%         if ethernet_interface.ipv6_address is arista.avd.defined %}
   ipv6 address {{ ethernet_interface.ipv6_address }}
{%         endif %}
{%         if ethernet_interface.ipv6_address_link_local is arista.avd.defined %}
   ipv6 address {{ ethernet_interface.ipv6_address_link_local }} link-local
{%         endif %}
{%         if ethernet_interface.ipv6_nd_ra_disabled is arista.avd.defined(true) %}
   ipv6 nd ra disabled
{%         endif %}
{%         if ethernet_interface.ipv6_nd_managed_config_flag is arista.avd.defined(true) %}
   ipv6 nd managed-config-flag
{%         endif %}
{%         if ethernet_interface.ipv6_nd_prefixes is arista.avd.defined %}
{%             for prefix in ethernet_interface.ipv6_nd_prefixes | arista.avd.convert_dicts('ipv6_prefix') %}
{%                 set ipv6_nd_prefix_cli = "ipv6 nd prefix " ~ prefix.ipv6_prefix %}
{%                 if prefix.valid_lifetime is arista.avd.defined %}
{%                     set ipv6_nd_prefix_cli = ipv6_nd_prefix_cli ~ " " ~ prefix.valid_lifetime %}
{%                     if prefix.preferred_lifetime is arista.avd.defined %}
{%                         set ipv6_nd_prefix_cli = ipv6_nd_prefix_cli ~ " " ~ prefix.preferred_lifetime %}
{%                     endif %}
{%                 endif %}
{%                 if prefix.no_autoconfig_flag is arista.avd.defined(true) %}
{%                     set ipv6_nd_prefix_cli = ipv6_nd_prefix_cli ~ " no-autoconfig" %}
{%                 endif %}
   {{ ipv6_nd_prefix_cli }}
{%             endfor %}
{%         endif %}
{%     endif %}
{%     if ethernet_interface.channel_group.id is arista.avd.defined and ethernet_interface.channel_group.mode is arista.avd.defined %}
   channel-group {{ ethernet_interface.channel_group.id }} mode {{ ethernet_interface.channel_group.mode }}
{%         if ethernet_interface.lacp_timer.mode is arista.avd.defined %}
   lacp timer {{ ethernet_interface.lacp_timer.mode }}
{%         endif %}
{%         if ethernet_interface.lacp_timer.multiplier is arista.avd.defined %}
   lacp timer multiplier {{ ethernet_interface.lacp_timer.multiplier }}
{%         endif %}
{%         if ethernet_interface.lacp_port_priority is arista.avd.defined %}
   lacp port-priority {{ ethernet_interface.lacp_port_priority }}
{%         endif %}
{%     endif %}
{%     if print_ethernet is arista.avd.defined(true) %}
{%         if ethernet_interface.mpls.ldp.igp_sync is arista.avd.defined(true) %}
   mpls ldp igp sync
{%         endif %}
{%         if ethernet_interface.mpls.ldp.interface is arista.avd.defined(true) %}
   mpls ldp interface
{%         elif ethernet_interface.mpls.ldp.interface is arista.avd.defined(false) %}
   no mpls ldp interface
{%         endif %}
{%         if ethernet_interface.lldp.transmit is arista.avd.defined(false) %}
   no lldp transmit
{%         endif %}
{%         if ethernet_interface.lldp.receive is arista.avd.defined(false) %}
   no lldp receive
{%         endif %}
{%         if ethernet_interface.lldp.ztp_vlan is arista.avd.defined %}
   lldp tlv transmit ztp vlan {{ ethernet_interface.lldp.ztp_vlan }}
{%         endif %}
{%         if ethernet_interface.access_group_in is arista.avd.defined %}
   ip access-group {{ ethernet_interface.access_group_in }} in
{%         endif %}
{%         if ethernet_interface.access_group_out is arista.avd.defined %}
   ip access-group {{ ethernet_interface.access_group_out }} out
{%         endif %}
{%         if ethernet_interface.ipv6_access_group_in is arista.avd.defined %}
   ipv6 access-group {{ ethernet_interface.ipv6_access_group_in }} in
{%         endif %}
{%         if ethernet_interface.ipv6_access_group_out is arista.avd.defined %}
   ipv6 access-group {{ ethernet_interface.ipv6_access_group_out }} out
{%         endif %}
{%         if ethernet_interface.mac_access_group_in is arista.avd.defined %}
   mac access-group {{ ethernet_interface.mac_access_group_in }} in
{%         endif %}
{%         if ethernet_interface.mac_access_group_out is arista.avd.defined %}
   mac access-group {{ ethernet_interface.mac_access_group_out }} out
{%         endif %}
{%         if ethernet_interface.multicast is arista.avd.defined %}
{%             if ethernet_interface.multicast.ipv4.boundaries is arista.avd.defined %}
{%                 for boundary in ethernet_interface.multicast.ipv4.boundaries %}
{%                     set boundary_cli = "multicast ipv4 boundary " ~ boundary.boundary %}
{%                     if boundary.out is arista.avd.defined(true) %}
{%                         set boundary_cli = boundary_cli ~ " out" %}
{%                     endif %}
   {{ boundary_cli }}
{%                 endfor %}
{%             endif %}
{%             if ethernet_interface.multicast.ipv6.boundaries is arista.avd.defined %}
{%                 for boundary in ethernet_interface.multicast.ipv6.boundaries %}
   multicast ipv6 boundary {{ boundary.boundary }} out
{%                 endfor %}
{%             endif %}
{%             if ethernet_interface.multicast.ipv4.static is arista.avd.defined(true) %}
   multicast ipv4 static
{%             endif %}
{%             if ethernet_interface.multicast.ipv6.static is arista.avd.defined(true) %}
   multicast ipv6 static
{%             endif %}
{%         endif %}
{%         if ethernet_interface.mpls.ip is arista.avd.defined(true) %}
   mpls ip
{%         elif ethernet_interface.mpls.ip is arista.avd.defined(false) %}
   no mpls ip
{%         endif %}
{%         if ethernet_interface.ospf_cost is arista.avd.defined %}
   ip ospf cost {{ ethernet_interface.ospf_cost }}
{%         endif %}
{%         if ethernet_interface.ospf_network_point_to_point is arista.avd.defined(true) %}
   ip ospf network point-to-point
{%         endif %}
{%         if ethernet_interface.ospf_authentication is arista.avd.defined('simple') %}
   ip ospf authentication
{%         elif ethernet_interface.ospf_authentication is arista.avd.defined('message-digest') %}
   ip ospf authentication message-digest
{%         endif %}
{%         if ethernet_interface.ospf_authentication_key is arista.avd.defined %}
   ip ospf authentication-key 7 {{ ethernet_interface.ospf_authentication_key }}
{%         endif %}
{%         if ethernet_interface.ospf_area is arista.avd.defined %}
   ip ospf area {{ ethernet_interface.ospf_area }}
{%         endif %}
{%         for ospf_message_digest_key in ethernet_interface.ospf_message_digest_keys | arista.avd.convert_dicts('id') | arista.avd.natural_sort('id') %}
{%             if ospf_message_digest_key.hash_algorithm is arista.avd.defined and ospf_message_digest_key.key is arista.avd.defined %}
   ip ospf message-digest-key {{ ospf_message_digest_key.id }} {{ ospf_message_digest_key.hash_algorithm }} 7 {{ ospf_message_digest_key.key }}
{%             endif %}
{%         endfor %}
{%         if ethernet_interface.pim.ipv4.sparse_mode is arista.avd.defined(true) %}
   pim ipv4 sparse-mode
{%         endif %}
{%         if ethernet_interface.pim.ipv4.dr_priority is arista.avd.defined %}
   pim ipv4 dr-priority {{ ethernet_interface.pim.ipv4.dr_priority }}
{%         endif %}
{%         if ethernet_interface.qos.trust is arista.avd.defined %}
{%             if ethernet_interface.qos.trust == 'disabled' %}
   no qos trust
{%             else %}
   qos trust {{ ethernet_interface.qos.trust }}
{%             endif %}
{%         endif %}
{%         if ethernet_interface.qos.cos is arista.avd.defined %}
   qos cos {{ ethernet_interface.qos.cos }}
{%         endif %}
{%         if ethernet_interface.qos.dscp is arista.avd.defined %}
   qos dscp {{ ethernet_interface.qos.dscp }}
{%         endif %}
{%         if ethernet_interface.shape.rate is arista.avd.defined %}
   shape rate {{ ethernet_interface.shape.rate }}
{%         endif %}
{%         if ethernet_interface.priority_flow_control.enabled is arista.avd.defined(true) %}
   priority-flow-control on
{%         elif ethernet_interface.priority_flow_control.enabled is arista.avd.defined(false) %}
   no priority-flow-control
{%         endif %}
{%         for priority_block in ethernet_interface.priority_flow_control.priorities | arista.avd.natural_sort %}
{%             if priority_block.priority is arista.avd.defined %}
{%                 if priority_block.no_drop is arista.avd.defined(true) %}
   priority-flow-control priority {{ priority_block.priority }} no-drop
{%                 elif priority_block.no_drop is arista.avd.defined(false) %}
   priority-flow-control priority {{ priority_block.priority }} drop
{%                 endif %}
{%             endif %}
{%         endfor %}
{%         for section in ethernet_interface.storm_control | arista.avd.natural_sort %}
{%             if ethernet_interface.storm_control[section].level is arista.avd.defined %}
{%                 if ethernet_interface.storm_control[section].unit is arista.avd.defined('pps') %}
   storm-control {{ section | replace("_", "-") }} level pps {{ ethernet_interface.storm_control[section].level }}
{%                 else %}
   storm-control {{ section | replace("_", "-") }} level {{ ethernet_interface.storm_control[section].level }}
{%                 endif %}
{%             endif %}
{%         endfor %}
{%         if ethernet_interface.ptp.enable is arista.avd.defined(true) %}
   ptp enable
{%         endif %}
{%         if ethernet_interface.ptp.sync_message.interval is arista.avd.defined %}
   ptp sync-message interval {{ ethernet_interface.ptp.sync_message.interval }}
{%         endif %}
{%         if ethernet_interface.ptp.delay_mechanism is arista.avd.defined %}
   ptp delay-mechanism {{ ethernet_interface.ptp.delay_mechanism }}
{%         endif %}
{%         if ethernet_interface.ptp.announce.interval is arista.avd.defined %}
   ptp announce interval {{ ethernet_interface.ptp.announce.interval }}
{%         endif %}
{%         if ethernet_interface.ptp.transport is arista.avd.defined %}
   ptp transport {{ ethernet_interface.ptp.transport }}
{%         endif %}
{%         if ethernet_interface.ptp.announce.timeout is arista.avd.defined %}
   ptp announce timeout {{ ethernet_interface.ptp.announce.timeout }}
{%         endif %}
{%         if ethernet_interface.ptp.delay_req is arista.avd.defined %}
   ptp delay-req interval {{ ethernet_interface.ptp.delay_req }}
{%         endif %}
{%         if ethernet_interface.ptp.role is arista.avd.defined %}
   ptp role {{ ethernet_interface.ptp.role }}
{%         endif %}
{%         if ethernet_interface.ptp.vlan is arista.avd.defined %}
   ptp vlan {{ ethernet_interface.ptp.vlan }}
{%         endif %}
{%         if ethernet_interface.service_policy.pbr.input is arista.avd.defined %}
   service-policy type pbr input {{ ethernet_interface.service_policy.pbr.input }}
{%         endif %}
{%         if ethernet_interface.service_profile is arista.avd.defined %}
   service-profile {{ ethernet_interface.service_profile }}
{%         endif %}
{%         if ethernet_interface.isis_enable is arista.avd.defined %}
   isis enable {{ ethernet_interface.isis_enable }}
{%         endif %}
{%         if ethernet_interface.isis_circuit_type is arista.avd.defined %}
   isis circuit-type {{ ethernet_interface.isis_circuit_type }}
{%         endif %}
{%         if ethernet_interface.isis_metric is arista.avd.defined %}
   isis metric {{ ethernet_interface.isis_metric }}
{%         endif %}
{%         if ethernet_interface.isis_passive is arista.avd.defined(true) %}
   isis passive
{%         endif %}
{%         if ethernet_interface.isis_hello_padding is arista.avd.defined(false) %}
   no isis hello padding
{%         elif ethernet_interface.isis_hello_padding is arista.avd.defined(true) %}
   isis hello padding
{%         endif %}
{%         if ethernet_interface.isis_network_point_to_point is arista.avd.defined(true) %}
   isis network point-to-point
{%         endif %}
{%         if ethernet_interface.isis_authentication_mode is arista.avd.defined and
              ethernet_interface.isis_authentication_mode in ["text", "md5"] %}
   isis authentication mode {{ ethernet_interface.isis_authentication_mode }}
{%         endif %}
{%         if ethernet_interface.isis_authentication_key is arista.avd.defined %}
   isis authentication key 7 {{ ethernet_interface.isis_authentication_key }}
{%         endif %}
{%         if ethernet_interface.spanning_tree_portfast is arista.avd.defined('edge') %}
   spanning-tree portfast
{%         elif ethernet_interface.spanning_tree_portfast is arista.avd.defined('network') %}
   spanning-tree portfast network
{%         endif %}
{%         if ethernet_interface.spanning_tree_bpduguard is arista.avd.defined(true) or ethernet_interface.spanning_tree_bpduguard is arista.avd.defined("enabled") %}
   spanning-tree bpduguard enable
{%         elif ethernet_interface.spanning_tree_bpduguard is arista.avd.defined("disabled") %}
   spanning-tree bpduguard disable
{%         endif %}
{%         if ethernet_interface.spanning_tree_bpdufilter is arista.avd.defined(true) or ethernet_interface.spanning_tree_bpdufilter is arista.avd.defined("enabled") %}
   spanning-tree bpdufilter enable
{%         elif ethernet_interface.spanning_tree_bpdufilter is arista.avd.defined("disabled") %}
   spanning-tree bpdufilter disable
{%         endif %}
{%         if ethernet_interface.spanning_tree_guard is arista.avd.defined %}
{%             if ethernet_interface.spanning_tree_guard == 'disabled' %}
   spanning-tree guard none
{%             else %}
   spanning-tree guard {{ ethernet_interface.spanning_tree_guard }}
{%             endif %}
{%         endif %}
{%         if ethernet_interface.vmtracer is arista.avd.defined(true) %}
   vmtracer vmware-esx
{%         endif %}
{%     endif %}
{%     if ethernet_interface.transceiver.media.override is arista.avd.defined %}
   transceiver media override {{ ethernet_interface.transceiver.media.override }}
{%     endif %}
{%     for link_tracking_group in ethernet_interface.link_tracking_groups | arista.avd.natural_sort %}
{%         if link_tracking_group.name is arista.avd.defined and link_tracking_group.direction is arista.avd.defined %}
   link tracking group {{ link_tracking_group.name }} {{ link_tracking_group.direction }}
{%         endif %}
{%     endfor %}
{%     if ethernet_interface.traffic_policy.input is arista.avd.defined %}
   traffic-policy input {{ ethernet_interface.traffic_policy.input }}
{%     endif %}
{%     if ethernet_interface.traffic_policy.output is arista.avd.defined %}
   traffic-policy output {{ ethernet_interface.traffic_policy.output }}
{%     endif %}
{%     if ethernet_interface.eos_cli is arista.avd.defined %}
   {{ ethernet_interface.eos_cli | indent(3, false) }}
{%     endif %}
{% endfor %}
{# eos- Loopback Interfaces #}
{% for loopback_interface in loopback_interfaces | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
!
interface {{ loopback_interface.name }}
{%     if loopback_interface.description is arista.avd.defined %}
   description {{ loopback_interface.description }}
{%     endif %}
{%     if loopback_interface.shutdown is arista.avd.defined(true) %}
   shutdown
{%     elif loopback_interface.shutdown is arista.avd.defined(false) %}
   no shutdown
{%     endif %}
{%     if loopback_interface.vrf is arista.avd.defined %}
   vrf {{ loopback_interface.vrf }}
{%     endif %}
{%     if loopback_interface.ip_proxy_arp is arista.avd.defined(true) %}
   ip proxy-arp
{%     endif %}
{%     if loopback_interface.ip_address is arista.avd.defined %}
   ip address {{ loopback_interface.ip_address }}
{%         for ip_address_secondary in loopback_interface.ip_address_secondaries | arista.avd.natural_sort %}
   ip address {{ ip_address_secondary }} secondary
{%         endfor %}
{%     endif %}
{%     if loopback_interface.ipv6_enable is arista.avd.defined(true) %}
   ipv6 enable
{%     endif %}
{%     if loopback_interface.ipv6_address is arista.avd.defined %}
   ipv6 address {{ loopback_interface.ipv6_address }}
{%     endif %}
{%     if loopback_interface.ospf_area is arista.avd.defined %}
   ip ospf area {{ loopback_interface.ospf_area }}
{%     endif %}
{%     if loopback_interface.isis_enable is arista.avd.defined %}
   isis enable {{ loopback_interface.isis_enable }}
{%     endif %}
{%     if loopback_interface.isis_passive is arista.avd.defined(true) %}
   isis passive
{%     endif %}
{%     if loopback_interface.isis_metric is arista.avd.defined %}
   isis metric {{ loopback_interface.isis_metric }}
{%     endif %}
{%     if loopback_interface.isis_network_point_to_point is arista.avd.defined(true) %}
   isis network point-to-point
{%     endif %}
{%     if loopback_interface.mpls.ldp.interface is arista.avd.defined(true) %}
   mpls ldp interface
{%     elif loopback_interface.mpls.ldp.interface is arista.avd.defined(false) %}
   no mpls ldp interface
{%     endif %}
{%     if loopback_interface.node_segment.ipv4_index is arista.avd.defined %}
   node-segment ipv4 index {{ loopback_interface.node_segment.ipv4_index }}
{%     endif %}
{%     if loopback_interface.node_segment.ipv6_index is arista.avd.defined %}
   node-segment ipv6 index {{ loopback_interface.node_segment.ipv6_index }}
{%     endif %}
{%     if loopback_interface.eos_cli is arista.avd.defined %}
   {{ loopback_interface.eos_cli | indent(3, false) }}
{%     endif %}
{% endfor %}
{# eos - Management Interfaces #}
{% for management_interface in management_interfaces | arista.avd.natural_sort('name') %}
!
interface {{ management_interface.name }}
{%     if management_interface.description is arista.avd.defined %}
   description {{ management_interface.description }}
{%     endif %}
{%     if management_interface.shutdown is arista.avd.defined(true) %}
   shutdown
{%     elif management_interface.shutdown is arista.avd.defined(false) %}
   no shutdown
{%     endif %}
{%     if management_interface.mtu is arista.avd.defined %}
   mtu {{ management_interface.mtu }}
{%     endif %}
{%     if management_interface.vrf is arista.avd.defined and management_interface.vrf is ne 'default' %}
   vrf {{ management_interface.vrf }}
{%     endif %}
{%     if management_interface.ip_address is arista.avd.defined %}
   ip address {{ management_interface.ip_address }}
{%     endif %}
{%     if management_interface.ipv6_enable is arista.avd.defined(true) %}
   ipv6 enable
{%     endif %}
{%     if management_interface.ipv6_address is arista.avd.defined %}
   ipv6 address {{ management_interface.ipv6_address }}
{%     endif %}
{% endfor %}
{# eos - VLAN Interfaces #}
{% for vlan_interface in vlan_interfaces | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
!
interface {{ vlan_interface.name }}
{%     if vlan_interface.description is arista.avd.defined %}
   description {{ vlan_interface.description }}
{%     endif %}
{%     if vlan_interface.shutdown is arista.avd.defined(true) %}
   shutdown
{%     elif vlan_interface.shutdown is arista.avd.defined(false) %}
   no shutdown
{%     endif %}
{%     if vlan_interface.mtu is arista.avd.defined %}
   mtu {{ vlan_interface.mtu }}
{%     endif %}
{%     if vlan_interface.no_autostate is arista.avd.defined(true) %}
   no autostate
{%     endif %}
{%     if vlan_interface.vrf is arista.avd.defined %}
   vrf {{ vlan_interface.vrf }}
{%     endif %}
{%     if vlan_interface.arp_aging_timeout is arista.avd.defined %}
   arp aging timeout {{ vlan_interface.arp_aging_timeout }}
{%     endif %}
{%     if vlan_interface.arp_gratuitous_accept is arista.avd.defined(true) %}
   arp gratuitous accept
{%     endif %}
{%     if vlan_interface.arp_monitor_mac_address is arista.avd.defined(true) %}
   arp monitor mac-address
{%     endif %}
{%     if vlan_interface.arp_cache_dynamic_capacity is arista.avd.defined %}
   arp cache dynamic capacity {{ vlan_interface.arp_cache_dynamic_capacity }}
{%     endif %}
{%     if vlan_interface.ip_proxy_arp is arista.avd.defined(true) %}
   ip proxy-arp
{%     endif %}
{%     if vlan_interface.ip_directed_broadcast is arista.avd.defined(true) %}
   ip directed-broadcast
{%     endif %}
{%     if vlan_interface.ip_address is arista.avd.defined %}
   ip address {{ vlan_interface.ip_address }}
{%         if vlan_interface.ip_address_secondaries is arista.avd.defined %}
{%             for ip_address_secondary in vlan_interface.ip_address_secondaries %}
   ip address {{ ip_address_secondary }} secondary
{%             endfor %}
{%         endif %}
{%     endif %}
{%     for ip_helper in vlan_interface.ip_helpers | arista.avd.convert_dicts('ip_helper') | arista.avd.natural_sort('ip_helper') %}
{%         set ip_helper_cli = "ip helper-address " ~ ip_helper.ip_helper %}
{%         if ip_helper.vrf is arista.avd.defined %}
{%             set ip_helper_cli = ip_helper_cli ~ " vrf " ~ ip_helper.vrf %}
{%         endif %}
{%         if ip_helper.source_interface is arista.avd.defined %}
{%             set ip_helper_cli = ip_helper_cli ~ " source-interface " ~ ip_helper.source_interface %}
{%         endif %}
   {{ ip_helper_cli }}
{%     endfor %}
{%     if vlan_interface.ip_igmp is arista.avd.defined(true) %}
   ip igmp
{%     endif %}
{%     if vlan_interface.ipv6_enable is arista.avd.defined(true) %}
   ipv6 enable
{%     endif %}
{%     if vlan_interface.ipv6_address is arista.avd.defined %}
   ipv6 address {{ vlan_interface.ipv6_address }}
{%     endif %}
{%     if vlan_interface.ipv6_address_link_local is arista.avd.defined %}
   ipv6 address {{ vlan_interface.ipv6_address_link_local }} link-local
{%     endif %}
{%     if vlan_interface.ipv6_address_virtual is arista.avd.defined %}
   ipv6 address virtual {{ vlan_interface.ipv6_address_virtual }}
{%     endif %}
{%     for ipv6_address_virtual in vlan_interface.ipv6_address_virtuals | arista.avd.natural_sort %}
   ipv6 address virtual {{ ipv6_address_virtual }}
{%     endfor %}
{%     if vlan_interface.ipv6_nd_ra_disabled is arista.avd.defined(true) %}
   ipv6 nd ra disabled
{%     endif %}
{%     if vlan_interface.ipv6_nd_managed_config_flag is arista.avd.defined(true) %}
   ipv6 nd managed-config-flag
{%     endif %}
{%     if vlan_interface.ipv6_nd_prefixes is arista.avd.defined %}
{%         for prefix in vlan_interface.ipv6_nd_prefixes | arista.avd.convert_dicts('ipv6_prefix') %}
{%             set ipv6_nd_prefix_cli = "ipv6 nd prefix " ~ prefix.ipv6_prefix %}
{%             if prefix.valid_lifetime is arista.avd.defined %}
{%                 set ipv6_nd_prefix_cli = ipv6_nd_prefix_cli ~ " " ~ prefix.valid_lifetime %}
{%                 if prefix.preferred_lifetime is arista.avd.defined %}
{%                     set ipv6_nd_prefix_cli = ipv6_nd_prefix_cli ~ " " ~ prefix.preferred_lifetime %}
{%                 endif %}
{%             endif %}
{%             if prefix.no_autoconfig_flag is arista.avd.defined(true) %}
{%                 set ipv6_nd_prefix_cli = ipv6_nd_prefix_cli ~ " no-autoconfig" %}
{%             endif %}
   {{ ipv6_nd_prefix_cli }}
{%         endfor %}
{%     endif %}
{%     if vlan_interface.multicast is arista.avd.defined %}
{%         if vlan_interface.multicast.ipv4.boundaries is arista.avd.defined %}
{%             for boundary in vlan_interface.multicast.ipv4.boundaries %}
{%                 set boundary_cli = "multicast ipv4 boundary " ~ boundary.boundary %}
{%                 if boundary.out is arista.avd.defined(true) %}
{%                     set boundary_cli = boundary_cli ~ " out" %}
{%                 endif %}
   {{ boundary_cli }}
{%             endfor %}
{%         endif %}
{%         if vlan_interface.multicast.ipv6.boundaries is arista.avd.defined %}
{%             for boundary in vlan_interface.multicast.ipv6.boundaries %}
   multicast ipv6 boundary {{ boundary.boundary }} out
{%             endfor %}
{%         endif %}
{%         if vlan_interface.multicast.ipv4.source_route_export.enabled is arista.avd.defined(true) %}
{%             if vlan_interface.multicast.ipv4.source_route_export.administrative_distance is arista.avd.defined %}
   multicast ipv4 source route export {{ vlan_interface.multicast.ipv4.source_route_export.administrative_distance }}
{%             else %}
   multicast ipv4 source route export
{%             endif %}
{%         endif %}
{%         if vlan_interface.multicast.ipv6.source_route_export.enabled is arista.avd.defined(true) %}
{%             if vlan_interface.multicast.ipv6.source_route_export.administrative_distance is arista.avd.defined %}
   multicast ipv6 source route export {{ vlan_interface.multicast.ipv6.source_route_export.administrative_distance }}
{%             else %}
   multicast ipv6 source route export
{%             endif %}
{%         endif %}
{%         if vlan_interface.multicast.ipv4.static is arista.avd.defined(true) %}
   multicast ipv4 static
{%         endif %}
{%         if vlan_interface.multicast.ipv6.static is arista.avd.defined(true) %}
   multicast ipv6 static
{%         endif %}
{%     endif %}
{%     if vlan_interface.access_group_in is arista.avd.defined %}
   ip access-group {{ vlan_interface.access_group_in }} in
{%     endif %}
{%     if vlan_interface.access_group_out is arista.avd.defined %}
   ip access-group {{ vlan_interface.access_group_out }} out
{%     endif %}
{%     if vlan_interface.ipv6_access_group_in is arista.avd.defined %}
   ipv6 access-group {{ vlan_interface.ipv6_access_group_in }} in
{%     endif %}
{%     if vlan_interface.ipv6_access_group_out is arista.avd.defined %}
   ipv6 access-group {{ vlan_interface.ipv6_access_group_out }} out
{%     endif %}
{%     if vlan_interface.ospf_network_point_to_point is arista.avd.defined(true) %}
   ip ospf network point-to-point
{%     endif %}
{%     if vlan_interface.ospf_area is arista.avd.defined %}
   ip ospf area {{ vlan_interface.ospf_area }}
{%     endif %}
{%     if vlan_interface.ospf_cost is arista.avd.defined %}
   ip ospf cost {{ vlan_interface.ospf_cost }}
{%     endif %}
{%     if vlan_interface.ospf_authentication is arista.avd.defined %}
{%         if vlan_interface.ospf_authentication == "simple" %}
   ip ospf authentication
{%         elif vlan_interface.ospf_authentication == "message-digest" %}
   ip ospf authentication message-digest
{%         endif %}
{%     endif %}
{%     if vlan_interface.ospf_authentication_key is arista.avd.defined %}
   ip ospf authentication-key 7 {{ vlan_interface.ospf_authentication_key }}
{%     endif %}
{%     for ospf_message_digest_key in vlan_interface.ospf_message_digest_keys | arista.avd.convert_dicts('id') | arista.avd.natural_sort('id') %}
{%         if ospf_message_digest_key.hash_algorithm is arista.avd.defined and
              ospf_message_digest_key.key is arista.avd.defined %}
   ip ospf message-digest-key {{ ospf_message_digest_key.id }} {{ ospf_message_digest_key.hash_algorithm }} 7 {{ ospf_message_digest_key.key }}
{%         endif %}
{%     endfor %}
{%     if vlan_interface.pim.ipv4.sparse_mode is arista.avd.defined(true) %}
   pim ipv4 sparse-mode
{%     endif %}
{%     if vlan_interface.pim.ipv4.dr_priority is arista.avd.defined %}
   pim ipv4 dr-priority {{ vlan_interface.pim.ipv4.dr_priority }}
{%     endif %}
{%     if vlan_interface.pim.ipv4.local_interface is arista.avd.defined %}
   pim ipv4 local-interface {{ vlan_interface.pim.ipv4.local_interface }}
{%     endif %}
{# The below "ipv6_virtual_router_address" keys will be deprecated in AVD v4.0 #}
{# This should not be mixed with the new "ipv6_virtual_router_addresses" key below to avoid conflicts. #}
{%     if vlan_interface.ipv6_virtual_router_address is arista.avd.defined %}
   ipv6 virtual-router address {{ vlan_interface.ipv6_virtual_router_address }}
{%     endif %}
{# New improved "ipv6_virtual_router_addresses" data model to support multiple VARPv6 addresses #}
{%     if vlan_interface.ipv6_virtual_router_addresses is arista.avd.defined %}
{%         for ipv6_virtual_router_address in vlan_interface.ipv6_virtual_router_addresses %}
   ipv6 virtual-router address {{ ipv6_virtual_router_address }}
{%         endfor %}
{%     endif %}
{%     if vlan_interface.isis_enable is arista.avd.defined %}
   isis enable {{ vlan_interface.isis_enable }}
{%     endif %}
{%     if vlan_interface.isis_passive is arista.avd.defined(true) %}
   isis passive
{%     endif %}
{%     if vlan_interface.isis_metric is arista.avd.defined %}
   isis metric {{ vlan_interface.isis_metric }}
{%     endif %}
{%     if vlan_interface.isis_network_point_to_point is arista.avd.defined(true) %}
   isis network point-to-point
{%     endif %}
{# The below "vrrp" keys will be deprecated in AVD v4.0 - These should not be mixed with the new "vrrp_ids" key above to avoid conflicts. #}
{%     if vlan_interface.vrrp.virtual_router is arista.avd.defined %}
{%         if vlan_interface.vrrp.priority is arista.avd.defined %}
   vrrp {{ vlan_interface.vrrp.virtual_router }} priority-level {{ vlan_interface.vrrp.priority }}
{%         endif %}
{%         if vlan_interface.vrrp.advertisement_interval is arista.avd.defined %}
   vrrp {{ vlan_interface.vrrp.virtual_router }} advertisement interval {{ vlan_interface.vrrp.advertisement_interval }}
{%         endif %}
{%         if vlan_interface.vrrp.preempt_delay_minimum is arista.avd.defined %}
   vrrp {{ vlan_interface.vrrp.virtual_router }} preempt delay minimum {{ vlan_interface.vrrp.preempt_delay_minimum }}
{%         endif %}
{%         if vlan_interface.vrrp.ipv4 is arista.avd.defined %}
   vrrp {{ vlan_interface.vrrp.virtual_router }} ipv4 {{ vlan_interface.vrrp.ipv4 }}
{%         endif %}
{%         if vlan_interface.vrrp.ipv6 is arista.avd.defined %}
   vrrp {{ vlan_interface.vrrp.virtual_router }} ipv6 {{ vlan_interface.vrrp.ipv6 }}
{%         endif %}
{%     endif %}
{# New improved "vrrp" data model to support multiple IDs #}
{%     if vlan_interface.vrrp_ids is arista.avd.defined %}
{%         for vrid in vlan_interface.vrrp_ids | arista.avd.natural_sort('id') if vrid.id is arista.avd.defined %}
{%             if vrid.priority_level is arista.avd.defined %}
   vrrp {{ vrid.id }} priority-level {{ vrid.priority_level }}
{%             endif %}
{%             if vrid.advertisement.interval is arista.avd.defined %}
   vrrp {{ vrid.id }} advertisement interval {{ vrid.advertisement.interval }}
{%             endif %}
{%             if vrid.preempt.enabled is arista.avd.defined(true) and (
                  vrid.preempt.delay.minimum is arista.avd.defined or
                  vrid.preempt.delay.reload is arista.avd.defined) %}
{%                 set delay_cli = 'vrrp ' ~ vrid.id ~ ' preempt delay' %}
{%                 if vrid.preempt.delay.minimum is arista.avd.defined %}
{%                     set delay_cli = delay_cli ~ ' minimum ' ~ vrid.preempt.delay.minimum %}
{%                 endif %}
{%                 if vrid.preempt.delay.reload is arista.avd.defined %}
{%                     set delay_cli = delay_cli ~ ' reload ' ~ vrid.preempt.delay.reload %}
{%                 endif %}
   {{ delay_cli }}
{%             endif %}
{%             if vrid.timers.delay.reload is arista.avd.defined %}
   vrrp {{ vrid.id }} timers delay reload {{ vrid.timers.delay.reload }}
{%             endif %}
{%             if vrid.ipv4.address is arista.avd.defined %}
   vrrp {{ vrid.id }} ipv4 {{ vrid.ipv4.address }}
{%             endif %}
{%             if vrid.ipv4.version is arista.avd.defined %}
   vrrp {{ vrid.id }} ipv4 version {{ vrid.ipv4.version }}
{%             endif %}
{%             if vrid.ipv6.address is arista.avd.defined %}
   vrrp {{ vrid.id }} ipv6 {{ vrid.ipv6.address }}
{%             endif %}
{%             for tracked_obj in vrid.tracked_object | arista.avd.natural_sort('name') %}
{%                 if tracked_obj.name is arista.avd.defined %}
{%                     set tracked_obj_cli = "vrrp " ~ vrid.id ~ " tracked-object " ~ tracked_obj.name %}
{%                     if tracked_obj.decrement is arista.avd.defined %}
{%                         set tracked_obj_cli = tracked_obj_cli ~ " decrement " ~ tracked_obj.decrement %}
{%                     elif tracked_obj.shutdown is arista.avd.defined(true) %}
{%                         set tracked_obj_cli = tracked_obj_cli ~ " shutdown" %}
{%                     endif %}
   {{ tracked_obj_cli }}
{%                 endif %}
{%             endfor %}
{%         endfor %}
{%     endif %}
{%     if vlan_interface.ip_attached_host_route_export.distance is arista.avd.defined %}
   ip attached-host route export {{ vlan_interface.ip_attached_host_route_export.distance }}
{%     elif vlan_interface.ip_attached_host_route_export is arista.avd.defined %}
   ip attached-host route export
{%     endif %}
{%     if vlan_interface.bfd.interval is arista.avd.defined and
          vlan_interface.bfd.min_rx is arista.avd.defined and
          vlan_interface.bfd.multiplier is arista.avd.defined %}
   bfd interval {{ vlan_interface.bfd.interval }} min-rx {{ vlan_interface.bfd.min_rx }} multiplier {{ vlan_interface.bfd.multiplier }}
{%     endif %}
{%     if vlan_interface.bfd.echo is arista.avd.defined(true) %}
   bfd echo
{%     elif vlan_interface.bfd.echo is arista.avd.defined(false) %}
   no bfd echo
{%     endif %}
{%     if vlan_interface.service_policy.pbr.input is arista.avd.defined %}
   service-policy type pbr input {{ vlan_interface.service_policy.pbr.input }}
{%     endif %}
{%     if vlan_interface.pvlan_mapping is arista.avd.defined %}
   pvlan mapping {{ vlan_interface.pvlan_mapping }}
{%     endif %}
{%     if vlan_interface.ip_virtual_router_addresses is arista.avd.defined %}
{%         for ip_virtual_router_address in vlan_interface.ip_virtual_router_addresses %}
   ip virtual-router address {{ ip_virtual_router_address }}
{%         endfor %}
{%     endif %}
{%     if vlan_interface.ip_address_virtual is arista.avd.defined %}
   ip address virtual {{ vlan_interface.ip_address_virtual }}
{%         if vlan_interface.ip_address_virtual_secondaries is arista.avd.defined %}
{%             for ip_address_virtual_secondary in vlan_interface.ip_address_virtual_secondaries %}
   ip address virtual {{ ip_address_virtual_secondary }} secondary
{%             endfor %}
{%         endif %}
{%     endif %}
{%     if vlan_interface.eos_cli is arista.avd.defined %}
   {{ vlan_interface.eos_cli | indent(3, false) }}
{%     endif %}
{% endfor %}
{# j2lint: disable=V1 #}
{# eos- VxLAN Interface #}
{% if vxlan_interface.Vxlan1 is arista.avd.defined %}
!
interface Vxlan1
{%     if vxlan_interface.Vxlan1.description is arista.avd.defined %}
   description {{ vxlan_interface.Vxlan1.description }}
{%     endif %}
{%     if vxlan_interface.Vxlan1.vxlan.source_interface is arista.avd.defined %}
   vxlan source-interface {{ vxlan_interface.Vxlan1.vxlan.source_interface }}
{%     endif %}
{%     if vxlan_interface.Vxlan1.vxlan.virtual_router_encapsulation_mac_address is arista.avd.defined %}
   vxlan virtual-router encapsulation mac-address {{ vxlan_interface.Vxlan1.vxlan.virtual_router_encapsulation_mac_address }}
{%     endif %}
{%     if vxlan_interface.Vxlan1.vxlan.udp_port is arista.avd.defined %}
   vxlan udp-port {{ vxlan_interface.Vxlan1.vxlan.udp_port }}
{%     endif %}
{%     if vxlan_interface.Vxlan1.vxlan.flood_vtep_learned_data_plane is arista.avd.defined(true) %}
   vxlan flood vtep learned data-plane
{%     endif %}
{%     for vlan in vxlan_interface.Vxlan1.vxlan.vlans | arista.avd.convert_dicts('id') | arista.avd.natural_sort('id') %}
{%         if vlan.vni is arista.avd.defined %}
   vxlan vlan {{ vlan.id }} vni {{ vlan.vni }}
{%         endif %}
{%         if vlan.flood_vteps is arista.avd.defined %}
   vxlan vlan {{ vlan.id }} flood vtep {{ vlan.flood_vteps | join(' ') }}
{%         endif %}
{%     endfor %}
{%     for vrf in vxlan_interface.Vxlan1.vxlan.vrfs | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
{%         if vrf.vni is arista.avd.defined %}
   vxlan vrf {{ vrf.name }} vni {{ vrf.vni }}
{%         endif %}
{%     endfor %}
{%     if vxlan_interface.Vxlan1.vxlan.mlag_source_interface is arista.avd.defined %}
   vxlan mlag source-interface {{ vxlan_interface.Vxlan1.vxlan.mlag_source_interface }}
{%     endif %}
{%     if vxlan_interface.Vxlan1.vxlan.bfd_vtep_evpn is arista.avd.defined %}
{%         if vxlan_interface.Vxlan1.vxlan.bfd_vtep_evpn.interval is arista.avd.defined
               and vxlan_interface.Vxlan1.vxlan.bfd_vtep_evpn.min_rx is arista.avd.defined
               and vxlan_interface.Vxlan1.vxlan.bfd_vtep_evpn.multiplier is arista.avd.defined %}
   bfd vtep evpn interval {{ vxlan_interface.Vxlan1.vxlan.bfd_vtep_evpn.interval }} min-rx {{ vxlan_interface.Vxlan1.vxlan.bfd_vtep_evpn.min_rx }} multiplier {{ vxlan_interface.Vxlan1.vxlan.bfd_vtep_evpn.multiplier }}
{%         endif %}
{%         if vxlan_interface.Vxlan1.vxlan.bfd_vtep_evpn.prefix_list is arista.avd.defined %}
   bfd vtep evpn prefix-list {{ vxlan_interface.Vxlan1.vxlan.bfd_vtep_evpn.prefix_list }}
{%         endif %}
{%     endif %}
{%     if vxlan_interface.Vxlan1.vxlan.flood_vteps is arista.avd.defined %}
   vxlan flood vtep {{ vxlan_interface.Vxlan1.vxlan.flood_vteps | join(' ') }}
{%     endif %}
{%     if vxlan_interface.Vxlan1.vxlan.qos.dscp_propagation_encapsulation is arista.avd.defined(true) %}
   vxlan qos dscp propagation encapsulation
{%     elif vxlan_interface.Vxlan1.vxlan.qos.dscp_propagation_encapsulation is arista.avd.defined(false) %}
   no vxlan qos dscp propagation encapsulation
{%     endif %}
{%     if vxlan_interface.Vxlan1.vxlan.qos.map_dscp_to_traffic_class_decapsulation is arista.avd.defined(true) %}
   vxlan qos map dscp to traffic-class decapsulation
{%     elif vxlan_interface.Vxlan1.vxlan.qos.map_dscp_to_traffic_class_decapsulation is arista.avd.defined(false) %}
   no vxlan qos map dscp to traffic-class decapsulation
{%     endif %}
{%     for vlan in vxlan_interface.Vxlan1.vxlan.vlans | arista.avd.convert_dicts('id') | arista.avd.natural_sort('id') if vlan.multicast_group is arista.avd.defined %}
   vxlan vlan {{ vlan.id }} multicast group {{ vlan.multicast_group }}
{%     endfor %}
{%     for vrf in vxlan_interface.Vxlan1.vxlan.vrfs | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') if vrf.multicast_group is arista.avd.defined %}
   vxlan vrf {{ vrf.name }} multicast group {{ vrf.multicast_group }}
{%     endfor %}
{%     if  vxlan_interface.Vxlan1.eos_cli is arista.avd.defined %}
   {{ vxlan_interface.Vxlan1.eos_cli | indent(3, false) }}
{%     endif %}
{% endif %}
{# eos - tcam profile #}
{% if tcam_profile is arista.avd.defined %}
!
hardware tcam
{%     if tcam_profile.profiles is arista.avd.defined %}
{%         for profile in tcam_profile.profiles | arista.avd.natural_sort('name') %}
   profile {{ profile.name }}
{{ profile.config }}
   !
{%         endfor %}
{%     endif %}
{%     if tcam_profile.system is arista.avd.defined %}
   system profile {{ tcam_profile.system }}
{%     endif %}
{% endif %}
{# eos - monitor connectivity configuration #}
{% if monitor_connectivity is arista.avd.defined %}
!
monitor connectivity
{%     if monitor_connectivity.interval is arista.avd.defined %}
   interval {{ monitor_connectivity.interval }}
{%     endif %}
{%     if monitor_connectivity.shutdown is arista.avd.defined(false) %}
   no shutdown
{%     elif monitor_connectivity.shutdown is arista.avd.defined(true) %}
   shutdown
{%     endif %}
{%     for interface_set in monitor_connectivity.interface_sets | arista.avd.natural_sort('name') %}
{%         if interface_set.name is arista.avd.defined and interface_set.interfaces is arista.avd.defined %}
   interface set {{ interface_set.name }} {{ interface_set.interfaces }}
{%         endif %}
{%     endfor %}
{%     if monitor_connectivity.local_interfaces is arista.avd.defined %}
   local-interfaces {{ monitor_connectivity.local_interfaces }} address-only default
{%     endif %}
{%     for host in monitor_connectivity.hosts | arista.avd.natural_sort('name') %}
{%         if host.name is arista.avd.defined %}
   !
   host {{ host.name }}
{%             if host.description is arista.avd.defined %}
      description
      {{ host.description }}
{%             endif %}
{%             if host.local_interfaces is arista.avd.defined %}
      local-interfaces {{ host.local_interfaces }} address-only
{%             endif %}
{%             if host.ip is arista.avd.defined %}
      ip {{ host.ip }}
{%             endif %}
{%             if host.url is arista.avd.defined %}
      url {{ host.url }}
{%             endif %}
{%         endif %}
{%     endfor %}
{%     for vrf in monitor_connectivity.vrfs | arista.avd.natural_sort('name') %}
{%         if vrf.name is arista.avd.defined %}
   vrf {{ vrf.name }}
{%             for interface_set in vrf.interface_sets | arista.avd.natural_sort('name') %}
{%                 if interface_set.name is arista.avd.defined and interface_set.interfaces is arista.avd.defined %}
      interface set {{ interface_set.name }} {{ interface_set.interfaces }}
{%                 endif %}
{%             endfor %}
{%             if vrf.local_interfaces is arista.avd.defined %}
      local-interfaces {{ vrf.local_interfaces }} address-only default
{%             endif %}
{%             if vrf.description is arista.avd.defined %}
      description
      {{ vrf.description }}
{%             endif %}
{%             for host in vrf.hosts | arista.avd.natural_sort('name') %}
{%                 if host.name is arista.avd.defined %}
      !
      host {{ host.name }}
{%                     if host.description is arista.avd.defined %}
         description
         {{ host.description }}
{%                     endif %}
{%                     if host.local_interfaces is arista.avd.defined %}
         local-interfaces {{ host.local_interfaces }} address-only
{%                     endif %}
{%                     if host.ip is arista.avd.defined %}
         ip {{ host.ip }}
{%                     endif %}
{%                     if host.url is arista.avd.defined %}
         url {{ host.url }}
{%                     endif %}
{%                 endif %}
{%             endfor %}
{%         endif %}
{%     endfor %}
{% endif %}
{# eos- Mac address table aging time #}
{% if mac_address_table.aging_time is arista.avd.defined %}
!
mac address-table aging-time {{ mac_address_table.aging_time }}
{% endif %}
{# eos - ip virtual router mac #}
{% if ip_virtual_router_mac_address is arista.avd.defined %}
!
ip virtual-router mac-address {{ ip_virtual_router_mac_address }}
{% endif %}
{# eos - virtual source-nat - introduced in 4.21 #}
{% if virtual_source_nat_vrfs is arista.avd.defined %}
!
{%     for vrf in virtual_source_nat_vrfs | arista.avd.natural_sort('name') %}
{%         if vrf.ip_address is arista.avd.defined %}
ip address virtual source-nat vrf {{ vrf.name }} address {{ vrf.ip_address }}
{%         endif %}
{%     endfor %}
{% endif %}
{# eos - Event handlers #}
{% if event_handlers is arista.avd.defined %}
{%     for handler in event_handlers | arista.avd.natural_sort('name') %}
!
event-handler {{ handler.name }}
{%         if handler.trigger is arista.avd.defined %}
   trigger {{ handler.trigger }}
{%             if handler.regex is arista.avd.defined %}
      regex {{ handler.regex }}
{%             endif %}
{%         endif %}
{%         if handler.action is arista.avd.defined and handler.action_type is arista.avd.defined %}
   action {{ handler.action_type }} {{ handler.action }}
{%         endif %}
{%         if handler.delay is arista.avd.defined %}
   delay {{ handler.delay }}
{%         endif %}
{%         if handler.asynchronous is arista.avd.defined(true) %}
   asynchronous
{%         endif %}
{%     endfor %}
{% endif %}
{% for bgp_group in bgp_groups | arista.avd.natural_sort('name') %}
!
group bgp {{ bgp_group.name }}
{%     if bgp_group.vrf is arista.avd.defined %}
   vrf {{ bgp_group.vrf }}
{%     endif %}
{%     for neighbor in bgp_group.neighbors | arista.avd.natural_sort %}
   neighbor {{ neighbor }}
{%     endfor %}
{%     for bgp_profile in bgp_group.bgp_maintenance_profiles | arista.avd.natural_sort %}
   maintenance profile bgp {{ bgp_profile }}
{%     endfor %}
{% endfor %}
{% for interface_group in interface_groups | arista.avd.natural_sort('name') %}
!
group interface {{ interface_group.name }}
{%     for interface in interface_group.interfaces | arista.avd.natural_sort %}
   interface {{ interface }}
{%     endfor %}
{%     for interface_profile in interface_group.interface_maintenance_profiles | arista.avd.natural_sort %}
   maintenance profile interface {{ interface_profile }}
{%     endfor %}
{%     for bgp_profile in interface_group.bgp_maintenance_profiles | arista.avd.natural_sort %}
   maintenance profile bgp {{ bgp_profile }}
{%     endfor %}
{% endfor %}
{# eos - IPv6 extended access-lists #}
{% for ipv6_access_list in ipv6_access_lists | arista.avd.natural_sort('name') %}
!
ipv6 access-list {{ ipv6_access_list.name }}
{%     if ipv6_access_list.counters_per_entry is arista.avd.defined(true) %}
   counters per-entry
{%     endif %}
{%     for sequence in ipv6_access_list.sequence_numbers | arista.avd.natural_sort('sequence') %}
{%         if sequence.action is arista.avd.defined %}
   {{ sequence.sequence }} {{ sequence.action }}
{%         endif %}
{%     endfor %}
{% endfor %}
{# eos - IPv6 standard access-lists #}
{% for ipv6_standard_access_list in ipv6_standard_access_lists | arista.avd.natural_sort('name') %}
!
ipv6 access-list standard {{ ipv6_standard_access_list.name }}
{%     if ipv6_standard_access_list.counters_per_entry is arista.avd.defined(true) %}
   counters per-entry
{%     endif %}
{%     for sequence in ipv6_standard_access_list.sequence_numbers | arista.avd.natural_sort('sequence') %}
{%         if sequence.action is arista.avd.defined %}
   {{ sequence.sequence }} {{ sequence.action }}
{%         endif %}
{%     endfor %}
{% endfor %}
{# eos - extended access-lists #}
{% for access_list in access_lists | arista.avd.natural_sort('name') %}
!
ip access-list {{ access_list.name }}
{%     if access_list.counters_per_entry is arista.avd.defined(true) %}
   counters per-entry
{%     endif %}
{%     for sequence in access_list.sequence_numbers | arista.avd.natural_sort('sequence') %}
{%         if sequence.action is arista.avd.defined %}
   {{ sequence.sequence }} {{ sequence.action }}
{%         endif %}
{%     endfor %}
{% endfor %}
{# eos - extended access-lists - improved data model #}
{% if ip_access_lists is arista.avd.defined %}
{#     set maximum number of ACL entries allowed, the playbook will fail if number is over the limit #}
{%     set counter = namespace() %}
{%     set counter.acle_number = 0 %}
{#     START ACL CYCLE: walk over the list of defined ACLs #}
{%     for acl in ip_access_lists %}
{%         if not (acl.name is arista.avd.defined) or
              not (acl.entries is arista.avd.defined) %}
{#             break cycle if mandatory keys are not defined #}
{%             continue %}
{%         endif %}
ip access-list {{ acl.name }}
{%         if acl.counters_per_entry is arista.avd.defined(true) %}
   counters per-entry
{%         endif %}
{#         START ACL_ENTRY CYCLE: walk over the list of ACL entries #}
{%         for acle in acl.entries %}
{#         Build ACL entry: #}
{#             - init ACL entry string #}
{%             set acl_entry = namespace(string='') %}
{#             - add sequence number if defined and space #}
{%             if acle.sequence is arista.avd.defined %}
{%                 set acl_entry.string = acl_entry.string ~ acle.sequence ~ ' ' %}
{%             endif %}
{#             - add action or remark #}
{#             if remark is defined, add remark + text only #}
{%             if acle.remark is arista.avd.defined %}
{%                 set acl_entry.string = acl_entry.string ~ 'remark ' ~ acle.remark %}
{#             if no remark defined, build normal rule #}
{#             only build the rule if mandatory keys are defined #}
{%             elif (acle.action is arista.avd.defined) and
                    (acle.protocol is arista.avd.defined) and
                    (acle.source is arista.avd.defined) and
                    (acle.destination is arista.avd.defined) %}
{#                 * add action #}
{%                 set acl_entry.string = acl_entry.string ~ acle.action %}
{#                 * add vlan #}
{%                 if (acle.vlan_number is arista.avd.defined) and (acle.vlan_mask is arista.avd.defined) %}
{%                     set acl_entry.string = acl_entry.string ~ ' vlan' %}
{%                     if acle.vlan_inner is arista.avd.defined(true) %}
{%                         set acl_entry.string = acl_entry.string ~ ' inner' %}
{%                     endif %}
{%                     set acl_entry.string = acl_entry.string ~ ' ' ~ acle.vlan_number ~ ' ' ~ acle.vlan_mask %}
{%                 endif %}
{#                 * add protocol #}
{%                 set acl_entry.string = acl_entry.string ~ ' ' ~ acle.protocol %}
{#                 * add source address #}
{%                 if ('/' not in acle.source) and (acle.source != 'any') %}
{%                     set acl_entry.string = acl_entry.string ~ ' host' %}
{%                 endif %}
{%                 set acl_entry.string = acl_entry.string ~ ' ' ~ acle.source %}
{#                 * add source ports #}
{%                 if acle.protocol | lower in ['tcp', 'udp'] %}
{%                     if acle.source_ports is arista.avd.defined %}
{%                         set acl_entry.string = acl_entry.string ~ ' ' ~ acle.source_ports_match | arista.avd.default('eq') %}
{%                         for a_port in acle.source_ports %}
{%                             set acl_entry.string = acl_entry.string ~ ' ' ~ a_port %}
{%                         endfor %}
{%                     endif %}
{%                 endif %}
{#                 * add destination address #}
{%                 if ('/' not in acle.destination) and (acle.destination != 'any') %}
{%                     set acl_entry.string = acl_entry.string ~ ' host' %}
{%                 endif %}
{%                 set acl_entry.string = acl_entry.string ~ ' ' ~ acle.destination %}
{#                 * add destination ports #}
{%                 if acle.protocol | lower in ['tcp', 'udp'] %}
{%                     if acle.destination_ports is arista.avd.defined %}
{%                         set acl_entry.string = acl_entry.string ~ ' ' ~ acle.destination_ports_match | arista.avd.default('eq') %}
{%                         for a_port in acle.destination_ports %}
{%                             set acl_entry.string = acl_entry.string ~ ' ' ~ a_port %}
{%                         endfor %}
{%                     endif %}
{%                 endif %}
{#                 * add tcp flags #}
{%                 if acle.protocol | lower == 'tcp' %}
{%                     if acle.tcp_flags is arista.avd.defined %}
{%                         for a_flag in acle.tcp_flags %}
{%                             set acl_entry.string = acl_entry.string ~ ' ' ~ a_flag %}
{%                         endfor %}
{%                     endif %}
{%                 endif %}
{#                 * add icmp message type and code #}
{%                 if acle.protocol | lower == 'icmp' %}
{%                     if acle.icmp_type is arista.avd.defined %}
{%                         set acl_entry.string = acl_entry.string ~ ' ' ~ acle.icmp_type %}
{%                         if acle.icmp_code is arista.avd.defined %}
{%                             set acl_entry.string = acl_entry.string ~ ' ' ~ acle.icmp_code %}
{%                         endif %}
{%                     endif %}
{%                 endif %}
{#                 * add nexthop group #}
{%                 if acle.nexthop_group is arista.avd.defined %}
{%                     set acl_entry.string = acl_entry.string ~ ' nexthop-group ' ~ acle.nexthop_group %}
{%                 endif %}
{#                 * add match non-head fragment packets #}
{%                 if acle.fragments is arista.avd.defined(true) %}
{%                     set acl_entry.string = acl_entry.string ~ ' fragments' %}
{%                 endif %}
{#                 * add tracked #}
{%                 if acle.tracked is arista.avd.defined(true) %}
{%                     set acl_entry.string = acl_entry.string ~ ' tracked' %}
{%                 endif %}
{#                 * add ttl #}
{%                 if acle.ttl is arista.avd.defined %}
{%                     set acl_entry.string = acl_entry.string ~ ' ttl ' ~ acle.ttl_match | arista.avd.default('eq') %}
{%                     set acl_entry.string = acl_entry.string ~ ' ' ~ acle.ttl %}
{%                 endif %}
{#                 * add dscp #}
{%                 if acle.dscp is arista.avd.defined %}
{%                     set acl_entry.string = acl_entry.string ~ ' dscp ' ~ acle.dscp | lower %}
{%                 endif %}
{#                 * add log #}
{%                 if acle.log is arista.avd.defined(true) %}
{%                     set acl_entry.string = acl_entry.string ~ ' log' %}
{%                 endif %}
{#                 check if the number of ACL entries is below the limit #}
{%                 if ip_access_lists_max_entries is arista.avd.defined %}
{%                     set counter.acle_number = counter.acle_number + 1 %}
{%                     if counter.acle_number > ip_access_lists_max_entries %}
{#                     j2lint: disable=V1 #}
   {{ a_non_existing_var | mandatory('The number of ACL entries is above defined maximum!') }}
{%                     endif %}
{%                 endif %}
{%             endif %}
   {{ acl_entry.string }}
{#         END ACL_ENTRY CYCLE: walk over the list of ACL entries #}
{%         endfor %}
{#     END ACL CYCLE: end walk over the list of defined ACLs #}
{%     endfor %}
{% endif %}
{# eos - standard access-lists #}
{% for standard_access_list in standard_access_lists | arista.avd.natural_sort('name') %}
!
ip access-list standard {{ standard_access_list.name }}
{%     if standard_access_list.counters_per_entry is arista.avd.defined(true) %}
   counters per-entry
{%     endif %}
{%     for sequence in standard_access_list.sequence_numbers | arista.avd.natural_sort('sequence') %}
{%         if sequence.action is arista.avd.defined %}
   {{ sequence.sequence }} {{ sequence.action }}
{%         endif %}
{%     endfor %}
{% endfor %}
{# eos - MAC access-lists #}
{% for mac_access_list in mac_access_lists | arista.avd.natural_sort('name') %}
{%     if mac_access_list.name is arista.avd.defined and mac_access_list.entries is arista.avd.defined %}
!
mac access-list {{ mac_access_list.name }}
{%         if mac_access_list.counters_per_entry is arista.avd.defined(true) %}
   counters per-entry
{%         endif %}
{%         for acl_entry in mac_access_list.entries %}
{%             set acl_string = '' %}
{%             if acl_entry.sequence is arista.avd.defined %}
{%                 set acl_string = acl_string ~ acl_entry.sequence ~ ' ' %}
{%             endif %}
{%             set acl_string = acl_string ~ acl_entry.action %}
   {{ acl_string }}
{%         endfor %}
{%     endif %}
{% endfor %}
{# eos - IP Routing #}
{% if ip_routing is arista.avd.defined(true) %}
!
ip routing
{% elif ip_routing is arista.avd.defined(false) %}
!
no ip routing
{% endif %}
{% if ip_icmp_redirect is arista.avd.defined(false) %}
no ip icmp redirect
{% endif %}
{% if ip_hardware.fib.optimize.prefixes.profile is arista.avd.defined %}
ip hardware fib optimize prefixes profile {{ ip_hardware.fib.optimize.prefixes.profile }}
{% endif %}
{% for vrf in vrfs | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
{%     if vrf.ip_routing is arista.avd.defined(true) and vrf.name != 'default' %}
ip routing vrf {{ vrf.name }}
{%     elif vrf.ip_routing is arista.avd.defined(false) and vrf.name != 'default' %}
no ip routing vrf {{ vrf.name }}
{%     endif %}
{% endfor %}
{# eos - IPv6 Routing #}
{% if ipv6_unicast_routing is arista.avd.defined(true) %}
!
ipv6 unicast-routing
{% endif %}
{% if ip_routing_ipv6_interfaces is arista.avd.defined(true) %}
ip routing ipv6 interfaces
{% endif %}
{% for vrf in vrfs | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
{%     if vrf.ipv6_routing is arista.avd.defined(true) %}
{%         if loop.first %}
!
{%         endif %}
ipv6 unicast-routing vrf {{ vrf.name }}
{%     endif %}
{% endfor %}
{% if ipv6_icmp_redirect is arista.avd.defined(false) %}
no ipv6 icmp redirect
{% endif %}
{% if ipv6_hardware.fib.optimize.prefixes.profile is arista.avd.defined %}
ipv6 hardware fib optimize prefixes profile {{ ipv6_hardware.fib.optimize.prefixes.profile }}
{% endif %}
{% if monitor_sessions is arista.avd.defined %}
!
{%     for monitor_session in monitor_sessions | arista.avd.natural_sort('name') if monitor_session.name is arista.avd.defined %}
{%         if monitor_session.sources is arista.avd.defined and monitor_session.destinations is arista.avd.defined %}
{%             for source in monitor_session.sources | arista.avd.natural_sort('name') if source.name is arista.avd.defined %}
{%                 set source_cli = "monitor session " ~ monitor_session.name ~ " source " ~ source.name %}
{%                 if source.direction is arista.avd.defined %}
{%                     set source_cli = source_cli ~ " " ~ source.direction %}
{%                 endif %}
{%                 if source.access_group.type is arista.avd.defined and source.access_group.name is arista.avd.defined %}
{%                     set source_cli = source_cli ~ " " ~ source.access_group.type ~ " access-group " ~ source.access_group.name %}
{%                     if source.access_group.priority is arista.avd.defined %}
{%                         set source_cli = source_cli ~ " priority " ~ source.access_group.priority %}
{%                     endif %}
{%                 endif %}
{{ source_cli }}
{%             endfor %}
{%             for destination in monitor_session.destinations | arista.avd.natural_sort %}
monitor session {{ monitor_session.name }} destination {{ destination }}
{%             endfor %}
{%             if monitor_session.encapsulation_gre_metadata_tx is arista.avd.defined(true) %}
monitor session {{ monitor_session.name }} encapsulation gre metadata tx
{%             endif %}
{%             if monitor_session.header_remove_size is arista.avd.defined %}
monitor session {{ monitor_session.name }} header remove size {{ monitor_session.header_remove_size }}
{%             endif %}
{%             if monitor_session.access_group.type is arista.avd.defined and monitor_session.access_group.name is arista.avd.defined %}
monitor session {{ monitor_session.name }} {{ monitor_session.access_group.type }} access-group {{ monitor_session.access_group.name }}
{%             endif %}
{%             if monitor_session.rate_limit_per_ingress_chip is arista.avd.defined %}
monitor session {{ monitor_session.name }} rate-limit per-ingress-chip {{ monitor_session.rate_limit_per_ingress_chip }}
{%             endif %}
{%             if monitor_session.rate_limit_per_egress_chip is arista.avd.defined %}
monitor session {{ monitor_session.name }} rate-limit per-egress-chip {{ monitor_session.rate_limit_per_egress_chip }}
{%             endif %}
{%             if monitor_session.sample is arista.avd.defined %}
monitor session {{ monitor_session.name }} sample {{ monitor_session.sample }}
{%             endif %}
{%             if monitor_session.truncate.enabled is arista.avd.defined(true) %}
{%                 set truncate_cli = "monitor session " ~ monitor_session.name ~ " truncate" %}
{%                 if monitor_session.truncate.size is arista.avd.defined %}
{%                     set truncate_cli = truncate_cli ~ " size " ~ monitor_session.truncate.size %}
{%                 endif %}
{{ truncate_cli }}
{%             endif %}
{%         endif %}
{%     endfor %}
{% endif %}
{# eos - qos #}
{% if qos is arista.avd.defined %}
!
{%     if qos.rewrite_dscp is arista.avd.defined(true) %}
qos rewrite dscp
{%     endif %}
{%     for cos_map in qos.map.cos | arista.avd.natural_sort %}
qos map cos {{ cos_map }}
{%     endfor %}
{%     for dscp_map in qos.map.dscp | arista.avd.natural_sort %}
qos map dscp {{ dscp_map }}
{%     endfor %}
{%     for tc_map in qos.map.traffic_class | arista.avd.natural_sort %}
qos map traffic-class {{ tc_map }}
{%     endfor %}
{% endif %}
{# eos - community-lists #}
{% if community_lists is arista.avd.defined %}
!
{%     for community_list in community_lists | arista.avd.natural_sort('name') %}
{%         if community_list.action is arista.avd.defined %}
ip community-list {{ community_list.name }} {{ community_list.action }}
{%         endif %}
{%     endfor %}
{% endif %}
{# eos - ip-community-lists #}
{% if ip_community_lists is arista.avd.defined %}
!
{%     for community_list in ip_community_lists %}
{%         if community_list.name is arista.avd.defined %}
{%             for entry in community_list.entries | arista.avd.default([]) %}
{%                 if entry.action is arista.avd.defined %}
{%                     if entry.regexp is arista.avd.defined %}
ip community-list regexp {{ community_list.name }} {{ entry.action }} {{ entry.regexp }}
{%                     elif entry.communities is arista.avd.defined %}
{%                         if entry.communities | length > 0 %}
ip community-list {{ community_list.name }} {{ entry.action }} {{ entry.communities | join(' ') }}
{%                         endif %}
{%                     endif %}
{%                 endif %}
{%             endfor %}
{%         endif %}
{%     endfor %}
{% endif %}
{# eos - ip-extended-community-lists #}
{% for ip_extcommunity_list in ip_extcommunity_lists | arista.avd.natural_sort('name') %}
!
{%     for entry in ip_extcommunity_list.entries | arista.avd.default([]) %}
{%         if entry.type is arista.avd.defined and entry.extcommunities is arista.avd.defined %}
ip extcommunity-list {{ ip_extcommunity_list.name }} {{ entry.type }} {{ entry.extcommunities }}
{%         endif %}
{%     endfor %}
{% endfor %}
{# eos - ip-extended-community-lists-regexp #}
{% for ip_extcommunity_list in ip_extcommunity_lists_regexp | arista.avd.natural_sort('name') %}
!
{%     for entry in ip_extcommunity_list.entries | arista.avd.default([]) %}
{%         if entry.type is arista.avd.defined and entry.regexp is arista.avd.defined %}
ip extcommunity-list regexp {{ ip_extcommunity_list.name }} {{ entry.type }} {{ entry.regexp }}
{%         endif %}
{%     endfor %}
{% endfor %}
{# eos - dynamic prefix-lists #}
{% for dynamic_prefix_list in dynamic_prefix_lists | arista.avd.natural_sort('name') if dynamic_prefix_list.name is arista.avd.defined and dynamic_prefix_list.match_map is arista.avd.defined %}
!
dynamic prefix-list {{ dynamic_prefix_list.name }}
   match-map {{ dynamic_prefix_list.match_map }}
{%     if dynamic_prefix_list.prefix_list.ipv4 is arista.avd.defined %}
   prefix-list ipv4 {{ dynamic_prefix_list.prefix_list.ipv4 }}
{%     endif  %}
{%     if dynamic_prefix_list.prefix_list.ipv6 is arista.avd.defined %}
   prefix-list ipv6 {{ dynamic_prefix_list.prefix_list.ipv6 }}
{%     endif  %}
{% endfor %}
{# eos - prefix-lists #}
{% for prefix_list in prefix_lists | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
!
ip prefix-list {{ prefix_list.name }}
{%     for sequence in prefix_list.sequence_numbers | arista.avd.natural_sort('sequence') %}
{%         if sequence.action is arista.avd.defined %}
   seq {{ sequence.sequence }} {{ sequence.action }}
{%         endif %}
{%     endfor %}
{% endfor %}
{# eos - ipv6-prefix-lists #}
{% for ipv6_prefix_list in ipv6_prefix_lists | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
!
ipv6 prefix-list {{ ipv6_prefix_list.name }}
{%     for sequence in ipv6_prefix_list.sequence_numbers | arista.avd.natural_sort('sequence') %}
{%         if sequence.action is arista.avd.defined %}
   seq {{ sequence.sequence }} {{ sequence.action }}
{%         endif %}
{%     endfor %}
{% endfor %}
{# eos - system #}
{% if system.control_plane is arista.avd.defined %}
!
system control-plane
{#     control_plane tcp mss ceiling #}
{%     if system.control_plane.tcp_mss.ipv4 is arista.avd.defined or system.control_plane.tcp_mss.ipv6 is arista.avd.defined %}
{%         set cp_mss_cli = "tcp mss ceiling" %}
{%         if system.control_plane.tcp_mss.ipv4 is arista.avd.defined %}
{%             set cp_mss_cli = cp_mss_cli ~ " ipv4 " ~ system.control_plane.tcp_mss.ipv4 %}
{%         endif %}
{%         if system.control_plane.tcp_mss.ipv6 is arista.avd.defined %}
{%             set cp_mss_cli = cp_mss_cli ~ " ipv6 " ~ system.control_plane.tcp_mss.ipv6 %}
{%         endif %}
   {{ cp_mss_cli }}
{%     endif %}
{#     control_plane access_groups ipv4 #}
{%     for acl_set in system.control_plane.ipv4_access_groups | arista.avd.natural_sort %}
{%         set cp_ipv4_access_grp = "ip access-group " ~ acl_set.acl_name %}
{%         if acl_set.vrf is arista.avd.defined %}
{%             set cp_ipv4_access_grp = cp_ipv4_access_grp ~ " vrf " ~ acl_set.vrf %}
{%         endif %}
{%         set cp_ipv4_access_grp = cp_ipv4_access_grp ~ " in" %}
   {{ cp_ipv4_access_grp }}
{%     endfor %}
{#     control_plane access_groups ipv6 #}
{%     for acl_set in system.control_plane.ipv6_access_groups | arista.avd.natural_sort %}
{%         set cp_ipv6_access_grp = "ipv6 access-group " ~ acl_set.acl_name %}
{%         if acl_set.vrf is arista.avd.defined %}
{%             set cp_ipv6_access_grp = cp_ipv6_access_grp ~ " vrf " ~ acl_set.vrf %}
{%         endif %}
{%         set cp_ipv6_access_grp = cp_ipv6_access_grp ~ " in" %}
   {{ cp_ipv6_access_grp }}
{%     endfor %}
{% endif %}
{# eos- Mac address table notification #}
{% if mac_address_table.notification_host_flap is arista.avd.defined %}
!
{%     if mac_address_table.notification_host_flap.logging is arista.avd.defined(false) %}
no mac address-table notification host-flap logging
{%     elif mac_address_table.notification_host_flap.logging is arista.avd.defined(true) %}
mac address-table notification host-flap logging
{%     endif %}
{%     if mac_address_table.notification_host_flap.detection.window is arista.avd.defined %}
mac address-table notification host-flap detection window {{ mac_address_table.notification_host_flap.detection.window }}
{%     endif %}
{%     if mac_address_table.notification_host_flap.detection.moves is arista.avd.defined %}
mac address-table notification host-flap detection moves {{ mac_address_table.notification_host_flap.detection.moves }}
{%     endif %}
{% endif %}
{# maintenance #}
{% set first_line = {'flag': True} %}
{% if maintenance is arista.avd.defined %}
!
maintenance
{%     for bgp_profile in maintenance.bgp_profiles | arista.avd.natural_sort('name') %}
{%         if loop.index0 > 0 %}
   !
{%         endif %}
{%         set first_line = {'flag': False} %}
   profile bgp {{ bgp_profile.name }}
{%         if bgp_profile.initiator.route_map_inout is arista.avd.defined %}
      initiator route-map {{ bgp_profile.initiator.route_map_inout }} inout
{%         endif %}
{%     endfor %}
{%     if maintenance.default_bgp_profile is arista.avd.defined %}
{%         set first_line = {'flag': False} %}
   profile bgp {{ maintenance.default_bgp_profile }} default
{%     endif %}
{%     if maintenance.default_interface_profile is arista.avd.defined %}
{%         set first_line = {'flag': False} %}
   profile interface {{ maintenance.default_interface_profile }} default
{%     endif %}
{%     if maintenance.default_unit_profile is arista.avd.defined %}
{%         set first_line = {'flag': False} %}
   profile unit {{ maintenance.default_unit_profile }} default
{%     endif %}
{%     for interface_profile in maintenance.interface_profiles | arista.avd.natural_sort('name') %}
{%         if not first_line.flag %}
   !
{%         endif %}
{%         set first_line = {'flag': False} %}
   profile interface {{ interface_profile.name }}
{%         if interface_profile.rate_monitoring.load_interval is arista.avd.defined %}
      rate-monitoring load-interval {{ interface_profile.rate_monitoring.load_interval }}
{%         endif %}
{%         if interface_profile.rate_monitoring.threshold is arista.avd.defined %}
      rate-monitoring threshold {{ interface_profile.rate_monitoring.threshold }}
{%         endif %}
{%         if interface_profile.shutdown.max_delay is arista.avd.defined %}
      shutdown max-delay {{ interface_profile.shutdown.max_delay }}
{%         endif %}
{%     endfor %}
{%     for unit_profile in maintenance.unit_profiles | arista.avd.natural_sort('name') %}
{%         if not first_line.flag %}
   !
{%         endif %}
{%         set first_line = {'flag': False} %}
   profile unit {{ unit_profile.name }}
{%         if unit_profile.on_boot.duration is arista.avd.defined %}
      on-boot duration {{ unit_profile.on_boot.duration }}
{%         endif %}
{%     endfor %}
{%     for unit in maintenance.units | arista.avd.natural_sort('name') %}
{%         if not first_line.flag %}
   !
{%         endif %}
{%         set first_line = {'flag': False} %}
   unit {{ unit.name }}
{%         for bgp_group in unit.groups.bgp_groups | arista.avd.natural_sort %}
      group bgp {{ bgp_group }}
{%         endfor %}
{%         for interface_group in unit.groups.interface_groups | arista.avd.natural_sort %}
      group interface {{ interface_group }}
{%         endfor %}
{%         if unit.profile is arista.avd.defined %}
      profile unit {{ unit.profile }}
{%         endif %}
{%         if unit.quiesce is arista.avd.defined(true) %}
      quiesce
{%         elif unit.quiesce is arista.avd.defined(false) %}
      no quiesce
{%         endif %}
{%     endfor %}
{% endif %}
{# eos - mlag configuration #}
{% if mlag_configuration is arista.avd.defined %}
!
mlag configuration
{%     if mlag_configuration.domain_id is arista.avd.defined %}
   domain-id {{ mlag_configuration.domain_id }}
{%     endif %}
{%     if mlag_configuration.heartbeat_interval is arista.avd.defined %}
   heartbeat-interval {{ mlag_configuration.heartbeat_interval }}
{%     endif %}
{%     if mlag_configuration.local_interface is arista.avd.defined %}
   local-interface {{ mlag_configuration.local_interface }}
{%     endif %}
{%     if mlag_configuration.peer_address is arista.avd.defined %}
   peer-address {{ mlag_configuration.peer_address }}
{%     endif %}
{%     if mlag_configuration.peer_address_heartbeat.peer_ip is arista.avd.defined %}
{%         if mlag_configuration.peer_address_heartbeat.vrf is arista.avd.defined and mlag_configuration.peer_address_heartbeat.vrf is ne 'default' %}
   peer-address heartbeat {{ mlag_configuration.peer_address_heartbeat.peer_ip }} vrf {{ mlag_configuration.peer_address_heartbeat.vrf }}
{# using the default VRF #}
{%         else %}
   peer-address heartbeat {{ mlag_configuration.peer_address_heartbeat.peer_ip }}
{%         endif %}
{%     endif %}
{%     if mlag_configuration.peer_link is arista.avd.defined %}
   peer-link {{ mlag_configuration.peer_link }}
{%     endif %}
{%     if mlag_configuration.dual_primary_detection_delay is arista.avd.defined %}
   dual-primary detection delay {{ mlag_configuration.dual_primary_detection_delay }} action errdisable all-interfaces
{%     endif %}
{%     if mlag_configuration.dual_primary_recovery_delay_mlag is arista.avd.defined and
          mlag_configuration.dual_primary_recovery_delay_non_mlag is arista.avd.defined %}
   dual-primary recovery delay mlag {{ mlag_configuration.dual_primary_recovery_delay_mlag }} non-mlag {{ mlag_configuration.dual_primary_recovery_delay_non_mlag }}
{%     endif %}
{%     if mlag_configuration.reload_delay_mlag is arista.avd.defined %}
   reload-delay mlag {{ mlag_configuration.reload_delay_mlag }}
{%     endif %}
{%     if mlag_configuration.reload_delay_non_mlag is arista.avd.defined %}
   reload-delay non-mlag {{ mlag_configuration.reload_delay_non_mlag }}
{%     endif %}
{% endif %}
{# static routes#}
{% if static_routes is arista.avd.defined %}
!
{%     for static_route in static_routes %}
{%         set static_route_cli = "ip route" %}
{%         if static_route.vrf is arista.avd.defined and static_route.vrf != 'default' %}
{%             set static_route_cli = static_route_cli ~ " vrf " ~ static_route.vrf %}
{%         endif %}
{%         if static_route.destination_address_prefix is arista.avd.defined %}
{%             set static_route_cli = static_route_cli ~ " " ~ static_route.destination_address_prefix %}
{%         endif %}
{%         if  static_route.interface is arista.avd.defined %}
{%             set static_route_cli = static_route_cli ~ " " ~ static_route.interface | capitalize %}
{%         endif %}
{%         if static_route.gateway is arista.avd.defined %}
{%             set static_route_cli = static_route_cli ~ " " ~ static_route.gateway %}
{%         endif %}
{%         if static_route.distance is arista.avd.defined %}
{%             set static_route_cli = static_route_cli ~ " " ~ static_route.distance %}
{%         endif %}
{%         if static_route.tag is arista.avd.defined %}
{%             set static_route_cli = static_route_cli ~ " tag " ~ static_route.tag %}
{%         endif %}
{%         if static_route.name is arista.avd.defined %}
{%             set static_route_cli = static_route_cli ~ " name " ~ static_route.name %}
{%         endif %}
{%         if static_route.metric is arista.avd.defined %}
{%             set static_route_cli = static_route_cli ~ " metric " ~ static_route.metric %}
{%         endif %}
{{ static_route_cli }}
{%     endfor %}
{% endif %}
{# eos - IPV6 static routes#}
{% if ipv6_static_routes is arista.avd.defined %}
!
{%     for ipv6_static_route in ipv6_static_routes %}
{%         set ipv6_static_route_cli = "ipv6 route" %}
{%         if ipv6_static_route.vrf is arista.avd.defined %}
{%             if ipv6_static_route.vrf != 'default' %}
{%                 set ipv6_static_route_cli = ipv6_static_route_cli ~ " vrf " ~ ipv6_static_route.vrf %}
{%             endif %}
{%         endif %}
{%         if ipv6_static_route.destination_address_prefix is arista.avd.defined %}
{%             set ipv6_static_route_cli = ipv6_static_route_cli ~ " " ~ ipv6_static_route.destination_address_prefix %}
{%         endif %}
{%         if ipv6_static_route.interface is arista.avd.defined %}
{%             set ipv6_static_route_cli = ipv6_static_route_cli ~ " " ~ ipv6_static_route.interface | capitalize %}
{%         endif %}
{%         if ipv6_static_route.gateway is arista.avd.defined %}
{%             set ipv6_static_route_cli = ipv6_static_route_cli ~ " " ~ ipv6_static_route.gateway %}
{%         endif %}
{%         if ipv6_static_route.distance is arista.avd.defined %}
{%             set ipv6_static_route_cli = ipv6_static_route_cli ~ " " ~ ipv6_static_route.distance %}
{%         endif %}
{%         if ipv6_static_route.tag is arista.avd.defined %}
{%             set ipv6_static_route_cli = ipv6_static_route_cli ~ " tag " ~ ipv6_static_route.tag %}
{%         endif %}
{%         if ipv6_static_route.name is arista.avd.defined %}
{%             set ipv6_static_route_cli = ipv6_static_route_cli ~ " name " ~ ipv6_static_route.name %}
{%         endif %}
{%         if ipv6_static_route.metric is arista.avd.defined %}
{%             set ipv6_static_route_cli = ipv6_static_route_cli ~ " metric " ~ ipv6_static_route.metric %}
{%         endif %}
{{ ipv6_static_route_cli }}
{%     endfor %}
{% endif %}
{# QOS class-map #}
{% for class_map in class_maps.qos | arista.avd.natural_sort('name') %}
!
class-map type qos match-any {{ class_map.name }}
{%     if class_map.vlan is arista.avd.defined %}
   match vlan {{ class_map.vlan }}
{%     elif class_map.cos is arista.avd.defined %}
   match cos {{ class_map.cos }}
{%     elif class_map.ip.access_group is arista.avd.defined %}
   match ip access-group {{ class_map.ip.access_group }}
{%     elif class_map.ipv6.access_group is arista.avd.defined %}
   match ipv6 access-group {{ class_map.ipv6.access_group }}
{%     endif %}
{% endfor %}
{# PBR class-map #}
{% for class_map in class_maps.pbr | arista.avd.natural_sort('name') %}
!
class-map type pbr match-any {{ class_map.name }}
{%     if class_map.ip.access_group is arista.avd.defined %}
   match ip access-group {{ class_map.ip.access_group }}
{%     endif %}
{% endfor %}
{# PBR policy-map #}
{% for policy_map in policy_maps.pbr | arista.avd.natural_sort('name') %}
!
policy-map type pbr {{ policy_map.name }}
{%     for class in policy_map.classes | arista.avd.default([]) %}
{%         set class_cli = 'class ' ~ class.name %}
{%         if class.index is arista.avd.defined %}
{%             set class_cli = class.index ~ ' ' ~ class_cli %}
{%         endif %}
{%         if not loop.first %}
   !
{%         endif %}
   {{ class_cli }}
{%         if class.set.nexthop.ip_address is arista.avd.defined %}
{%             set nexthop_cli = 'set nexthop' %}
{%             if class.set.nexthop.recursive is arista.avd.defined(true) %}
{%                 set nexthop_cli = nexthop_cli ~ ' recursive' %}
{%             endif %}
{%             set nexthop_cli = nexthop_cli ~ ' ' ~ class.set.nexthop.ip_address %}
      {{ nexthop_cli }}
{%         endif %}
{%         if class.drop is arista.avd.defined(true) %}
      drop
{%         endif %}
{%     endfor %}
{% endfor %}
{# QOS policy-map #}
{% for policy_map in policy_maps.qos | arista.avd.natural_sort('name') %}
!
policy-map type quality-of-service {{ policy_map.name }}
{%     for class in policy_map.classes | arista.avd.default([]) %}
{%         if loop.index > 1 %}
   !
{%         endif %}
   class {{ class.name }}
{%         for set in class.set | arista.avd.default([]) %}
{%             set cli_set = set | replace('_','-') | lower %}
{%             if cli_set in ['cos', 'dscp', 'traffic-class', 'drop-precedence'] %}
      set {{ cli_set }} {{ class.set[set] }}
{%             endif %}
{%         endfor %}
{%     endfor %}
{% endfor %}
{# eos - ARP settings #}
{% if arp.aging.timeout_default is arista.avd.defined %}
!
arp aging timeout default {{ arp.aging.timeout_default }}
{% endif %}
{# eos - Route Maps #}
{% for route_map in route_maps | arista.avd.natural_sort('name') %}
{%     for sequence in route_map.sequence_numbers | arista.avd.natural_sort('sequence') %}
{%         if sequence.type is arista.avd.defined %}
!
route-map {{ route_map.name }} {{ sequence.type }} {{ sequence.sequence }}
{%         endif %}
{%         if sequence.description is arista.avd.defined %}
   description {{ sequence.description }}
{%         endif %}
{%         for match_rule in sequence.match | arista.avd.natural_sort %}
   match {{ match_rule }}
{%         endfor %}
{%         if sequence.sub_route_map is arista.avd.defined %}
   sub-route-map {{ sequence.sub_route_map }}
{%         endif %}
{%         if sequence.continue.enabled is arista.avd.defined(true) %}
{%             set continue_cli = "continue" %}
{%             if sequence.continue.sequence_number is arista.avd.defined %}
{%                 set continue_cli = continue_cli ~ " " ~ sequence.continue.sequence_number %}
{%             endif %}
   {{ continue_cli }}
{%         endif %}
{%         for set_rule in sequence.set | arista.avd.natural_sort %}
   set {{ set_rule }}
{%         endfor %}
{%     endfor %}
{% endfor %}
{# eos - Router bfd #}
{% if router_bfd is arista.avd.defined %}
!
router bfd
{%     if router_bfd.interval is arista.avd.defined and router_bfd.min_rx is arista.avd.defined and router_bfd.multiplier is arista.avd.defined  %}
   interval {{ router_bfd.interval }} min-rx {{ router_bfd.min_rx }} multiplier {{ router_bfd.multiplier }} default
{%     endif %}
{%     if router_bfd.multihop.interval is arista.avd.defined and router_bfd.multihop.min_rx is arista.avd.defined and router_bfd.multihop.multiplier is arista.avd.defined  %}
   multihop interval {{ router_bfd.multihop.interval }} min-rx {{ router_bfd.multihop.min_rx }} multiplier {{ router_bfd.multihop.multiplier }}
{%     endif %}
{%     if router_bfd.sbfd is arista.avd.defined %}
   !
   sbfd
{%         if router_bfd.sbfd.local_interface.name is arista.avd.defined
                   and (router_bfd.sbfd.local_interface.protocols.ipv4 is arista.avd.defined(true)
                        or router_bfd.sbfd.local_interface.protocols.ipv6 is arista.avd.defined(true)
                   ) %}
{%             set localint = router_bfd.sbfd.local_interface.name %}
{%             if router_bfd.sbfd.local_interface.protocols.ipv4 is arista.avd.defined(true) %}
{%                 set localint = localint ~ " ipv4" %}
{%             endif %}
{%             if router_bfd.sbfd.local_interface.protocols.ipv6 is arista.avd.defined(true) %}
{%                 set localint = localint ~ " ipv6" %}
{%             endif %}
      local-interface {{ localint }}
{%         endif %}
{%         if router_bfd.sbfd.initiator_interval is arista.avd.defined and router_bfd.sbfd.initiator_multiplier is arista.avd.defined %}
      initiator interval {{ router_bfd.sbfd.initiator_interval }} multiplier {{ router_bfd.sbfd.initiator_multiplier }}
{%         endif %}
{%         if router_bfd.sbfd.reflector.min_rx is arista.avd.defined %}
      reflector min-rx {{ router_bfd.sbfd.reflector.min_rx }}
{%         endif %}
{%         if router_bfd.sbfd.reflector.local_discriminator is arista.avd.defined %}
      reflector local-discriminator {{ router_bfd.sbfd.reflector.local_discriminator }}
{%         endif %}
{%     endif %}
{% endif %}
{# eos - peer-filters #}
{% for peer_filter in peer_filters | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
!
peer-filter {{ peer_filter.name }}
{%     for sequence in peer_filter.sequence_numbers | arista.avd.natural_sort('sequence') %}
{%         if sequence.match is arista.avd.defined %}
   {{ sequence.sequence }} match {{ sequence.match }}
{%         endif %}
{%     endfor %}
{% endfor %}
{# eos - Router BGP #}
{% if router_bgp.as is arista.avd.defined %}
!
router bgp {{ router_bgp.as }}
{%     if router_bgp.router_id is arista.avd.defined %}
   router-id {{ router_bgp.router_id }}
{%     endif %}
{%     if router_bgp.distance.external_routes is arista.avd.defined %}
{%         set distance_cli = "distance bgp " ~ router_bgp.distance.external_routes %}
{%         if router_bgp.distance.internal_routes is arista.avd.defined and router_bgp.distance.local_routes is arista.avd.defined %}
{%             set distance_cli = distance_cli ~ " " ~ router_bgp.distance.internal_routes ~ " " ~ router_bgp.distance.local_routes %}
{%         endif %}
   {{ distance_cli }}
{%     endif %}
{%     if router_bgp.maximum_paths.paths is arista.avd.defined %}
{%         set paths_cli = "maximum-paths " ~ router_bgp.maximum_paths.paths %}
{%         if router_bgp.maximum_paths.ecmp is arista.avd.defined %}
{%             set paths_cli = paths_cli ~ " ecmp " ~ router_bgp.maximum_paths.ecmp %}
{%         endif %}
   {{ paths_cli }}
{%     endif %}
{%     if router_bgp.updates.wait_for_convergence is arista.avd.defined(true) %}
   update wait-for-convergence
{%     endif %}
{%     if router_bgp.updates.wait_install is arista.avd.defined(true) %}
   update wait-install
{%     endif %}
{%     if router_bgp.bgp_cluster_id is arista.avd.defined %}
   bgp cluster-id {{ router_bgp.bgp_cluster_id }}
{%     endif %}
{%     for bgp_default in router_bgp.bgp_defaults | arista.avd.default([]) %}
   {{ bgp_default }}
{%     endfor %}
{%     if router_bgp.bgp.bestpath.d_path is arista.avd.defined(true) %}
   bgp bestpath d-path
{%     endif %}
{%     if router_bgp.listen_ranges is arista.avd.defined %}
{%         for listen_range in router_bgp.listen_ranges | arista.avd.natural_sort('peer_group') if listen_range.peer_group is arista.avd.defined and listen_range.prefix is arista.avd.defined
               and (listen_range.peer_filter is arista.avd.defined or listen_range.remote_as is arista.avd.defined) %}
{%             set listen_range_cli = "bgp listen range " ~ listen_range.prefix %}
{%             if listen_range.peer_id_include_router_id is arista.avd.defined(true) %}
{%                 set listen_range_cli = listen_range_cli ~ " peer-id include router-id" %}
{%             endif %}
{%             set listen_range_cli = listen_range_cli ~ " peer-group " ~ listen_range.peer_group %}
{%             if listen_range.peer_filter is arista.avd.defined %}
{%                 set listen_range_cli = listen_range_cli ~ " peer-filter " ~ listen_range.peer_filter %}
{%             elif listen_range.remote_as is arista.avd.defined %}
{%                 set listen_range_cli = listen_range_cli ~ " remote-as " ~ listen_range.remote_as %}
{%             endif %}
   {{ listen_range_cli }}
{%         endfor %}
{%     endif %}
{%     for peer_group in router_bgp.peer_groups | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
{%         if peer_group.bgp_listen_range_prefix is arista.avd.defined and peer_group.peer_filter is arista.avd.defined %}
   bgp listen range {{ peer_group.bgp_listen_range_prefix }} peer-group {{ peer_group.name }} peer-filter {{ peer_group.peer_filter }}
{%         endif %}
{%     endfor %}
{%     for peer_group in router_bgp.peer_groups | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
{%         if peer_group.shutdown is arista.avd.defined(true) %}
   neighbor {{ peer_group.name }} shutdown
{%         endif %}
   neighbor {{ peer_group.name }} peer group
{%         if peer_group.remote_as is arista.avd.defined %}
   neighbor {{ peer_group.name }} remote-as {{ peer_group.remote_as }}
{%         endif %}
{%         if peer_group.local_as is arista.avd.defined %}
   neighbor {{ peer_group.name }} local-as {{ peer_group.local_as }} no-prepend replace-as
{%         endif %}
{%         if peer_group.next_hop_self is arista.avd.defined(true) %}
   neighbor {{ peer_group.name }} next-hop-self
{%         endif %}
{%         if peer_group.next_hop_unchanged is arista.avd.defined(true) %}
   neighbor {{ peer_group.name }} next-hop-unchanged
{%         endif %}
{%         if peer_group.remove_private_as.enabled is arista.avd.defined(true) %}
{%             set remove_private_as_cli = "neighbor " ~ peer_group.name ~ " remove-private-as" %}
{%             if peer_group.remove_private_as.all is arista.avd.defined(true) %}
{%                 set remove_private_as_cli = remove_private_as_cli ~ " all" %}
{%                 if peer_group.remove_private_as.replace_as is arista.avd.defined(true) %}
{%                     set remove_private_as_cli = remove_private_as_cli ~ " replace-as" %}
{%                 endif %}
{%             endif %}
   {{ remove_private_as_cli }}
{%         elif peer_group.remove_private_as.enabled is arista.avd.defined(false) %}
   no neighbor {{ peer_group.name }} remove-private-as
{%         endif %}
{%         if peer_group.remove_private_as_ingress.enabled is arista.avd.defined(true) %}
{%             set remove_private_as_ingress_cli = "neighbor " ~ peer_group.name ~ " remove-private-as ingress" %}
{%             if peer_group.remove_private_as_ingress.replace_as is arista.avd.defined(true) %}
{%                 set remove_private_as_ingress_cli = remove_private_as_ingress_cli ~ " replace-as" %}
{%             endif %}
   {{ remove_private_as_ingress_cli }}
{%         elif peer_group.remove_private_as_ingress.enabled is arista.avd.defined(false) %}
   no neighbor {{ peer_group.name }} remove-private-as ingress
{%         endif %}
{%         if peer_group.update_source is arista.avd.defined %}
   neighbor {{ peer_group.name }} update-source {{ peer_group.update_source }}
{%         endif %}
{%         if peer_group.description is arista.avd.defined %}
   neighbor {{ peer_group.name }} description {{ peer_group.description }}
{%         endif %}
{%         if peer_group.route_reflector_client is arista.avd.defined(true) %}
   neighbor {{ peer_group.name }} route-reflector-client
{%         endif %}
{%         if peer_group.bfd is arista.avd.defined(true) %}
   neighbor {{ peer_group.name }} bfd
{%         endif %}
{%         if peer_group.allowas_in.enabled is arista.avd.defined(true) %}
{%             set allowas_in_cli = "neighbor " ~ peer_group.name ~ " allowas-in" %}
{%             if peer_group.allowas_in.times is arista.avd.defined %}
{%                 set allowas_in_cli = allowas_in_cli ~ " " ~ peer_group.allowas_in.times %}
{%             endif %}
   {{ allowas_in_cli }}
{%         endif %}
{%         if peer_group.rib_in_pre_policy_retain.enabled is arista.avd.defined(true) %}
{%             set neighbor_rib_in_pre_policy_retain_cli = "neighbor " ~ peer_group.name ~ " rib-in pre-policy retain" %}
{%             if peer_group.rib_in_pre_policy_retain.all is arista.avd.defined(true) %}
{%                 set neighbor_rib_in_pre_policy_retain_cli = neighbor_rib_in_pre_policy_retain_cli ~ " all" %}
{%             endif %}
   {{ neighbor_rib_in_pre_policy_retain_cli }}
{%         elif peer_group.rib_in_pre_policy_retain.enabled is arista.avd.defined(false) %}
{%             set neighbor_rib_in_pre_policy_retain_cli = "no neighbor " ~ peer_group.name ~ " rib-in pre-policy retain" %}
   {{ neighbor_rib_in_pre_policy_retain_cli }}
{%         endif %}
{%         if peer_group.ebgp_multihop is arista.avd.defined %}
   neighbor {{ peer_group.name }} ebgp-multihop {{ peer_group.ebgp_multihop }}
{%         endif %}
{%         if peer_group.password is arista.avd.defined %}
   neighbor {{ peer_group.name }} password 7 {{ peer_group.password }}
{%         endif %}
{%         if peer_group.default_originate.enabled is arista.avd.defined(true) %}
{%             set default_originate_cli = "neighbor " ~ peer_group.name ~ " default-originate" %}
{%             if peer_group.default_originate.route_map is arista.avd.defined %}
{%                 set default_originate_cli = default_originate_cli ~ " route-map " ~ peer_group.default_originate.route_map %}
{%             endif %}
{%             if peer_group.default_originate.always is arista.avd.defined(true) %}
{%                 set default_originate_cli = default_originate_cli ~ " always" %}
{%             endif %}
   {{ default_originate_cli }}
{%         endif %}
{%         if peer_group.send_community is arista.avd.defined('all') %}
   neighbor {{ peer_group.name }} send-community
{%         elif peer_group.send_community is arista.avd.defined %}
   neighbor {{ peer_group.name }} send-community {{ peer_group.send_community }}
{%         endif %}
{%         if peer_group.maximum_routes is arista.avd.defined %}
{%             set maximum_routes_cli = "neighbor " ~ peer_group.name ~ " maximum-routes " ~ peer_group.maximum_routes %}
{%             if peer_group.maximum_routes_warning_limit is arista.avd.defined %}
{%                 set maximum_routes_cli = maximum_routes_cli ~ " warning-limit " ~ peer_group.maximum_routes_warning_limit %}
{%             endif %}
{%             if peer_group.maximum_routes_warning_only is arista.avd.defined(true) %}
{%                 set maximum_routes_cli = maximum_routes_cli ~ " warning-only" %}
{%             endif %}
   {{ maximum_routes_cli }}
{%         endif %}
{%         if peer_group.link_bandwidth.enabled is arista.avd.defined(true) %}
{%             set link_bandwidth_cli = "neighbor " ~ peer_group.name ~ " link-bandwidth" %}
{%             if peer_group.link_bandwidth.default is arista.avd.defined %}
{%                 set link_bandwidth_cli = link_bandwidth_cli ~ " default " ~ peer_group.link_bandwidth.default %}
{%             endif %}
   {{ link_bandwidth_cli }}
{%         endif %}
{%         if peer_group.weight is arista.avd.defined %}
   neighbor {{ peer_group.name }} weight {{ peer_group.weight }}
{%         endif %}
{%         if peer_group.timers is arista.avd.defined %}
   neighbor {{ peer_group.name }} timers {{ peer_group.timers }}
{%         endif %}
{%         if peer_group.route_map_in is arista.avd.defined %}
   neighbor {{ peer_group.name }} route-map {{ peer_group.route_map_in }} in
{%         endif %}
{%         if peer_group.route_map_out is arista.avd.defined %}
   neighbor {{ peer_group.name }} route-map {{ peer_group.route_map_out }} out
{%         endif %}
{%     endfor %}
{%     for neighbor_interface in router_bgp.neighbor_interfaces | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
{%         if neighbor_interface.peer_group is arista.avd.defined and neighbor_interface.remote_as is arista.avd.defined %}
   neighbor interface {{ neighbor_interface.name }} peer-group {{ neighbor_interface.peer_group }} remote-as {{ neighbor_interface.remote_as }}
{%         elif neighbor_interface.peer_group is arista.avd.defined and neighbor_interface.peer_filter is arista.avd.defined %}
   neighbor interface {{ neighbor_interface.name }} peer-group {{ neighbor_interface.peer_group }} peer-filter {{ neighbor_interface.peer_filter }}
{%         endif %}
{%     endfor %}
{%     for neighbor in router_bgp.neighbors | arista.avd.convert_dicts('ip_address') | arista.avd.natural_sort('ip_address') %}
{%         if neighbor.peer_group is arista.avd.defined %}
   neighbor {{ neighbor.ip_address }} peer group {{ neighbor.peer_group }}
{%         endif %}
{%         if neighbor.remote_as is arista.avd.defined %}
   neighbor {{ neighbor.ip_address }} remote-as {{ neighbor.remote_as }}
{%         endif %}
{%         if neighbor.next_hop_self is arista.avd.defined(true) %}
   neighbor {{ neighbor.ip_address }} next-hop-self
{%         endif %}
{%         if neighbor.shutdown is arista.avd.defined(true) %}
   neighbor {{ neighbor.ip_address }} shutdown
{%         endif %}
{%         if neighbor.remove_private_as.enabled is arista.avd.defined(true) %}
{%             set remove_private_as_cli = "neighbor " ~ neighbor.ip_address ~ " remove-private-as" %}
{%             if neighbor.remove_private_as.all is arista.avd.defined(true) %}
{%                 set remove_private_as_cli = remove_private_as_cli ~ " all" %}
{%                 if neighbor.remove_private_as.replace_as is arista.avd.defined(true) %}
{%                     set remove_private_as_cli = remove_private_as_cli ~ " replace-as" %}
{%                 endif %}
{%             endif %}
   {{ remove_private_as_cli }}
{%         elif neighbor.remove_private_as.enabled is arista.avd.defined(false) %}
   no neighbor {{ neighbor.ip_address }} remove-private-as
{%         endif %}
{%         if neighbor.remove_private_as_ingress.enabled is arista.avd.defined(true) %}
{%             set remove_private_as_ingress_cli = "neighbor " ~ neighbor.ip_address ~ " remove-private-as ingress" %}
{%             if neighbor.remove_private_as_ingress.replace_as is arista.avd.defined(true) %}
{%                 set remove_private_as_ingress_cli = remove_private_as_ingress_cli ~ " replace-as" %}
{%             endif %}
   {{ remove_private_as_ingress_cli }}
{%         elif neighbor.remove_private_as_ingress.enabled is arista.avd.defined(false) %}
   no neighbor {{ neighbor.ip_address }} remove-private-as ingress
{%         endif %}
{%         if neighbor.local_as is arista.avd.defined %}
   neighbor {{ neighbor.ip_address }} local-as {{ neighbor.local_as }} no-prepend replace-as
{%         endif %}
{%         if neighbor.description is arista.avd.defined %}
   neighbor {{ neighbor.ip_address }} description {{ neighbor.description }}
{%         endif %}
{%         if neighbor.ebgp_multihop is arista.avd.defined %}
   neighbor {{ neighbor.ip_address }} ebgp-multihop {{ neighbor.ebgp_multihop }}
{%         endif %}
{%         if neighbor.update_source is arista.avd.defined %}
   neighbor {{ neighbor.ip_address }} update-source {{ neighbor.update_source }}
{%         endif %}
{%         if neighbor.bfd is arista.avd.defined(true) %}
   neighbor {{ neighbor.ip_address }} bfd
{%         endif %}
{%         if neighbor.allowas_in.enabled is arista.avd.defined(true) %}
{%             set allowas_in_cli = "neighbor " ~ neighbor.ip_address ~ " allowas-in" %}
{%             if neighbor.allowas_in.times is arista.avd.defined %}
{%                 set allowas_in_cli = allowas_in_cli ~ " " ~ neighbor.allowas_in.times %}
{%             endif %}
   {{ allowas_in_cli }}
{%         endif %}
{%         if neighbor.rib_in_pre_policy_retain.enabled is arista.avd.defined(true) %}
{%             set neighbor_rib_in_pre_policy_retain_cli = "neighbor " ~ neighbor.ip_address ~ " rib-in pre-policy retain" %}
{%             if neighbor.rib_in_pre_policy_retain.all is arista.avd.defined(true) %}
{%                 set neighbor_rib_in_pre_policy_retain_cli = neighbor_rib_in_pre_policy_retain_cli ~ " all" %}
{%             endif %}
   {{ neighbor_rib_in_pre_policy_retain_cli }}
{%         elif neighbor.rib_in_pre_policy_retain.enabled is arista.avd.defined(false) %}
{%             set neighbor_rib_in_pre_policy_retain_cli = "no neighbor " ~ neighbor.ip_address ~ " rib-in pre-policy retain" %}
   {{ neighbor_rib_in_pre_policy_retain_cli }}
{%         endif %}
{%         if neighbor.password is arista.avd.defined %}
   neighbor {{ neighbor.ip_address }} password 7 {{ neighbor.password }}
{%         endif %}
{%         if neighbor.weight is arista.avd.defined %}
   neighbor {{ neighbor.ip_address }} weight {{ neighbor.weight }}
{%         endif %}
{%         if neighbor.timers is arista.avd.defined %}
   neighbor {{ neighbor.ip_address }} timers {{ neighbor.timers }}
{%         endif %}
{%         if neighbor.route_map_in is arista.avd.defined %}
   neighbor {{ neighbor.ip_address }} route-map {{ neighbor.route_map_in }} in
{%         endif %}
{%         if neighbor.route_map_out is arista.avd.defined %}
   neighbor {{ neighbor.ip_address }} route-map {{ neighbor.route_map_out }} out
{%         endif %}
{%         if neighbor.default_originate.enabled is arista.avd.defined(true) %}
{%             set default_originate_cli = "neighbor " ~ neighbor.ip_address ~ " default-originate" %}
{%             if neighbor.default_originate.route_map is arista.avd.defined %}
{%                 set default_originate_cli = default_originate_cli ~ " route-map " ~ neighbor.default_originate.route_map %}
{%             endif %}
{%             if neighbor.default_originate.always is arista.avd.defined(true) %}
{%                 set default_originate_cli = default_originate_cli ~ " always" %}
{%             endif %}
   {{ default_originate_cli }}
{%         endif %}
{%         if neighbor.send_community is arista.avd.defined('all') %}
   neighbor {{ neighbor.ip_address }} send-community
{%         elif neighbor.send_community is arista.avd.defined %}
   neighbor {{ neighbor.ip_address }} send-community {{ neighbor.send_community }}
{%         endif %}
{%         if neighbor.maximum_routes is arista.avd.defined %}
{%             set maximum_routes_cli = "neighbor " ~ neighbor.ip_address ~ " maximum-routes " ~ neighbor.maximum_routes %}
{%             if neighbor.maximum_routes_warning_limit is arista.avd.defined %}
{%                 set maximum_routes_cli = maximum_routes_cli ~ " warning-limit " ~ neighbor.maximum_routes_warning_limit %}
{%             endif %}
{%             if neighbor.maximum_routes_warning_only is arista.avd.defined(true) %}
{%                 set maximum_routes_cli = maximum_routes_cli ~ " warning-only" %}
{%             endif %}
   {{ maximum_routes_cli }}
{%         endif %}
{%         if neighbor.link_bandwidth.enabled is arista.avd.defined(true) %}
{%             set link_bandwidth_cli = "neighbor " ~ neighbor.ip_address ~ " link-bandwidth" %}
{%             if neighbor.link_bandwidth.default is arista.avd.defined %}
{%                 set link_bandwidth_cli = link_bandwidth_cli ~ " default " ~ neighbor.link_bandwidth.default %}
{%             endif %}
   {{ link_bandwidth_cli }}
{%         endif %}
{%     endfor %}
{%     for aggregate_address in router_bgp.aggregate_addresses | arista.avd.convert_dicts('prefix') | arista.avd.natural_sort('prefix') %}
{%         set aggregate_address_cli = "aggregate-address " ~ aggregate_address.prefix %}
{%         if aggregate_address.as_set is arista.avd.defined(true) %}
{%             set aggregate_address_cli = aggregate_address_cli ~ " as-set" %}
{%         endif %}
{%         if aggregate_address.summary_only is arista.avd.defined(true) %}
{%             set aggregate_address_cli = aggregate_address_cli ~ " summary-only" %}
{%         endif %}
{%         if aggregate_address.attribute_map is arista.avd.defined %}
{%             set aggregate_address_cli = aggregate_address_cli ~  " attribute-map " ~ aggregate_address.attribute_map %}
{%         endif %}
{%         if aggregate_address.match_map is arista.avd.defined %}
{%             set aggregate_address_cli = aggregate_address_cli ~ " match-map " ~ aggregate_address.match_map %}
{%         endif %}
{%         if aggregate_address.advertise_only is arista.avd.defined(true) %}
{%             set aggregate_address_cli = aggregate_address_cli ~ " advertise-only" %}
{%         endif %}
   {{ aggregate_address_cli }}
{%     endfor %}
{%     for redistribute_route in router_bgp.redistribute_routes | arista.avd.convert_dicts('source_protocol') | arista.avd.natural_sort('source_protocol') %}
{%         if redistribute_route.source_protocol is arista.avd.defined %}
{%             set redistribute_route_cli = "redistribute " ~ redistribute_route.source_protocol %}
{%             if redistribute_route.route_map is arista.avd.defined %}
{%                 set redistribute_route_cli = redistribute_route_cli ~ " route-map " ~ redistribute_route.route_map %}
{%             endif %}
   {{ redistribute_route_cli }}
{%         endif %}
{%     endfor %}
{# L2VPNs - (vxlan) vlan based #}
{%     if router_bgp.vlans is arista.avd.defined %}
{# Force the ids to be string to follow the same ordering as on EOS #}
{%         set bgp_vlans = router_bgp.vlans | arista.avd.convert_dicts('id') %}
{%         for bgp_vlan in bgp_vlans %}
{%             do bgp_vlan.update({"id": bgp_vlan['id'] | string}) %}
{%         endfor %}
{%         for vlan in bgp_vlans | sort(attribute="id") %}
   !
   vlan {{ vlan.id }}
{%             if vlan.rd is arista.avd.defined %}
      rd {{ vlan.rd }}
{%             endif %}
{%             if vlan.rd_evpn_domain.domain is arista.avd.defined and vlan.rd_evpn_domain.rd is arista.avd.defined %}
      rd evpn domain {{ vlan.rd_evpn_domain.domain }} {{ vlan.rd_evpn_domain.rd }}
{%             endif %}
{%             for route_target in vlan.route_targets.both | arista.avd.natural_sort %}
      route-target both {{ route_target }}
{%             endfor %}
{%             for route_target in vlan.route_targets.import | arista.avd.natural_sort %}
      route-target import {{ route_target }}
{%             endfor %}
{%             for route_target in vlan.route_targets.export | arista.avd.natural_sort %}
      route-target export {{ route_target }}
{%             endfor %}
{%             for route_target in vlan.route_targets.import_evpn_domains | arista.avd.natural_sort %}
      route-target import evpn domain {{ route_target.domain }} {{ route_target.route_target }}
{%             endfor %}
{%             for route_target in vlan.route_targets.export_evpn_domains | arista.avd.natural_sort %}
      route-target export evpn domain {{ route_target.domain }} {{ route_target.route_target }}
{%             endfor %}
{%             for route_target in vlan.route_targets.import_export_evpn_domains | arista.avd.natural_sort %}
      route-target import export evpn domain {{ route_target.domain }} {{ route_target.route_target }}
{%             endfor %}
{%             for redistribute_route in vlan.redistribute_routes | arista.avd.natural_sort %}
      redistribute {{ redistribute_route }}
{%             endfor %}
{%             for no_redistribute_route in vlan.no_redistribute_routes | arista.avd.natural_sort %}
      no redistribute {{ no_redistribute_route }}
{%             endfor %}
{%             if vlan.eos_cli is arista.avd.defined %}
      !
      {{ vlan.eos_cli | indent(6, false) }}
{%             endif %}
{%         endfor %}
{%     endif %}
{# vxlan vlan aware bundles #}
{%     for vlan_aware_bundle in router_bgp.vlan_aware_bundles | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
   !
   vlan-aware-bundle {{ vlan_aware_bundle.name }}
{%         if vlan_aware_bundle.rd is arista.avd.defined %}
      rd {{ vlan_aware_bundle.rd }}
{%         endif %}
{%         if vlan_aware_bundle.rd_evpn_domain.domain is arista.avd.defined and vlan_aware_bundle.rd_evpn_domain.rd is arista.avd.defined %}
      rd evpn domain {{ vlan_aware_bundle.rd_evpn_domain.domain }} {{ vlan_aware_bundle.rd_evpn_domain.rd }}
{%         endif %}
{%         for route_target in vlan_aware_bundle.route_targets.both | arista.avd.natural_sort %}
      route-target both {{ route_target }}
{%         endfor %}
{%         for route_target in vlan_aware_bundle.route_targets.import | arista.avd.natural_sort %}
      route-target import {{ route_target }}
{%         endfor %}
{%         for route_target in vlan_aware_bundle.route_targets.export | arista.avd.natural_sort %}
      route-target export {{ route_target }}
{%         endfor %}
{%         for route_target in vlan_aware_bundle.route_targets.import_evpn_domains | arista.avd.natural_sort %}
      route-target import evpn domain {{ route_target.domain }} {{ route_target.route_target }}
{%         endfor %}
{%         for route_target in vlan_aware_bundle.route_targets.export_evpn_domains | arista.avd.natural_sort %}
      route-target export evpn domain {{ route_target.domain }} {{ route_target.route_target }}
{%         endfor %}
{%         for route_target in vlan_aware_bundle.route_targets.import_export_evpn_domains | arista.avd.natural_sort %}
      route-target import export evpn domain {{ route_target.domain }} {{ route_target.route_target }}
{%         endfor %}
{%         for redistribute_route in vlan_aware_bundle.redistribute_routes | arista.avd.natural_sort %}
      redistribute {{ redistribute_route }}
{%         endfor %}
{%         for no_redistribute_route in vlan_aware_bundle.no_redistribute_routes | arista.avd.natural_sort %}
      no redistribute {{ no_redistribute_route }}
{%         endfor %}
      vlan {{ vlan_aware_bundle.vlan }}
{%     endfor %}
{# bgp vpws services #}
{%     if router_bgp.vpws is arista.avd.defined %}
{%         for vpws_service in router_bgp.vpws | arista.avd.natural_sort('name') %}
   !
{%             if vpws_service.name is arista.avd.defined %}
   vpws {{ vpws_service.name }}
{%                 if vpws_service.rd is arista.avd.defined %}
      rd {{ vpws_service.rd }}
{%                 endif %}
{%                 if vpws_service.route_targets.import_export is arista.avd.defined %}
      route-target import export evpn {{ vpws_service.route_targets.import_export }}
{%                 endif %}
{%                 if vpws_service.mpls_control_word is arista.avd.defined(true) %}
      mpls control-word
{%                 endif %}
{%                 if vpws_service.label_flow is arista.avd.defined(true) %}
      label flow
{%                 endif %}
{%                 if vpws_service.mtu is arista.avd.defined %}
      mtu {{ vpws_service.mtu }}
{%                 endif %}
{%                 for pw in vpws_service.pseudowires | arista.avd.natural_sort('name') %}
{%                     if pw.name is arista.avd.defined and pw.id_local is arista.avd.defined and pw.id_remote is arista.avd.defined %}
      !
      pseudowire {{ pw.name }}
         evpn vpws id local {{ pw.id_local }} remote {{ pw.id_remote }}
{%                     endif %}
{%                 endfor %}
{%             endif %}
{%         endfor %}
{%     endif %}
{# address families activation #}
{# address family evpn activation #}
{%     if router_bgp.address_family_evpn is arista.avd.defined %}
   !
   address-family evpn
{%         if router_bgp.address_family_evpn.evpn_hostflap_detection.enabled is arista.avd.defined(false) %}
      no host-flap detection
{%         elif router_bgp.address_family_evpn.evpn_hostflap_detection.enabled is arista.avd.defined(true) %}
{%             set hostflap_detection_cli = '' %}
{%             if router_bgp.address_family_evpn.evpn_hostflap_detection.window is arista.avd.defined %}
{%                 set hostflap_detection_cli = hostflap_detection_cli ~ ' window ' ~ router_bgp.address_family_evpn.evpn_hostflap_detection.window %}
{%             endif %}
{%             if router_bgp.address_family_evpn.evpn_hostflap_detection.threshold is arista.avd.defined %}
{%                 set hostflap_detection_cli = hostflap_detection_cli ~ ' threshold ' ~ router_bgp.address_family_evpn.evpn_hostflap_detection.threshold %}
{%             endif %}
{%             if router_bgp.address_family_evpn.evpn_hostflap_detection.expiry_timeout is arista.avd.defined %}
{%                 set hostflap_detection_cli = hostflap_detection_cli ~ ' expiry timeout ' ~ router_bgp.address_family_evpn.evpn_hostflap_detection.expiry_timeout ~ ' seconds' %}
{%             endif %}
{%             if hostflap_detection_cli != '' %}
      host-flap detection{{ hostflap_detection_cli }}
{%             endif %}
{%         endif %}
{%         if router_bgp.address_family_evpn.domain_identifier is arista.avd.defined %}
      domain identifier {{ router_bgp.address_family_evpn.domain_identifier }}
{%         endif %}
{%         if router_bgp.address_family_evpn.neighbor_default.encapsulation is arista.avd.defined("mpls") %}
{%             set evpn_neighbor_default_encap_cli = "neighbor default encapsulation mpls" %}
{%             if router_bgp.address_family_evpn.neighbor_default.next_hop_self_source_interface is arista.avd.defined %}
{%                 set evpn_neighbor_default_encap_cli = evpn_neighbor_default_encap_cli ~ " next-hop-self source-interface " ~ router_bgp.address_family_evpn.neighbor_default.next_hop_self_source_interface %}
{%             endif %}
      {{ evpn_neighbor_default_encap_cli }}
{%         endif %}
{%         for peer_group in router_bgp.address_family_evpn.peer_groups | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
{%             if peer_group.route_map_in is arista.avd.defined %}
      neighbor {{ peer_group.name }} route-map {{ peer_group.route_map_in }} in
{%             endif %}
{%             if peer_group.route_map_out is arista.avd.defined %}
      neighbor {{ peer_group.name }} route-map {{ peer_group.route_map_out }} out
{%             endif %}
{%             if peer_group.activate is arista.avd.defined(true) %}
      neighbor {{ peer_group.name }} activate
{%             elif peer_group.activate is arista.avd.defined(false) %}
      no neighbor {{ peer_group.name }} activate
{%             endif %}
{%             if peer_group.domain_remote is arista.avd.defined(true) %}
      neighbor {{ peer_group.name }} domain remote
{%             endif %}
{%         endfor %}
{%         if router_bgp.address_family_evpn.neighbor_default.next_hop_self_received_evpn_routes.enable is arista.avd.defined(true) %}
{%             set evpn_neighbor_default_nhs_received_evpn_routes_cli = "neighbor default next-hop-self received-evpn-routes route-type ip-prefix" %}
{%             if router_bgp.address_family_evpn.neighbor_default.next_hop_self_received_evpn_routes.inter_domain is arista.avd.defined(true) %}
{%                 set evpn_neighbor_default_nhs_received_evpn_routes_cli = evpn_neighbor_default_nhs_received_evpn_routes_cli ~ " inter-domain" %}
{%             endif %}
      {{ evpn_neighbor_default_nhs_received_evpn_routes_cli }}
{%         endif %}
{%         if router_bgp.address_family_evpn.route.import_match_failure_action is arista.avd.defined('discard') %}
      route import match-failure action discard
{%         endif %}
{%     endif %}
{# address family rt-membership activation #}
{%     if router_bgp.address_family_rtc is arista.avd.defined %}
   !
   address-family rt-membership
{%         for peer_group in router_bgp.address_family_rtc.peer_groups | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
{%             if peer_group.activate is arista.avd.defined(true) %}
      neighbor {{ peer_group.name }} activate
{%             elif peer_group.activate is arista.avd.defined(false) %}
      no neighbor {{ peer_group.name }} activate
{%             endif %}
{%             if peer_group.default_route_target is defined %}
{%                 if peer_group.default_route_target.only is arista.avd.defined(true) %}
      neighbor {{ peer_group.name }} default-route-target only
{%                 else %}
      neighbor {{ peer_group.name }} default-route-target
{%                 endif %}
{%             endif %}
{%             if peer_group.default_route_target.encoding_origin_as_omit is defined %}
      neighbor {{ peer_group.name }} default-route-target encoding origin-as omit
{%             endif %}
{%         endfor %}
{%     endif %}
{# address family ipv4 activation #}
{%     if router_bgp.address_family_ipv4 is arista.avd.defined %}
   !
   address-family ipv4
{%         for peer_group in router_bgp.address_family_ipv4.peer_groups | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
{%             if peer_group.route_map_in is arista.avd.defined %}
      neighbor {{ peer_group.name }} route-map {{ peer_group.route_map_in }} in
{%             endif %}
{%             if peer_group.route_map_out is arista.avd.defined %}
      neighbor {{ peer_group.name }} route-map {{ peer_group.route_map_out }} out
{%             endif %}
{%             if peer_group.prefix_list_in is arista.avd.defined %}
      neighbor {{ peer_group.name }} prefix-list {{ peer_group.prefix_list_in }} in
{%             endif %}
{%             if peer_group.prefix_list_out is arista.avd.defined %}
      neighbor {{ peer_group.name }} prefix-list {{ peer_group.prefix_list_out }} out
{%             endif %}
{%             if peer_group.default_originate is arista.avd.defined %}
{%                 set neighbor_default_originate_cli = "neighbor " ~ peer_group.name ~ " default-originate" %}
{%                 if peer_group.default_originate.route_map is arista.avd.defined %}
{%                     set neighbor_default_originate_cli = neighbor_default_originate_cli ~ " route-map " ~ peer_group.default_originate.route_map %}
{%                 endif %}
{%                 if peer_group.default_originate.always is arista.avd.defined(true) %}
{%                     set neighbor_default_originate_cli = neighbor_default_originate_cli ~ " always" %}
{%                 endif %}
      {{ neighbor_default_originate_cli }}
{%             endif %}
{%             if peer_group.next_hop.address_family_ipv6_originate is arista.avd.defined(true) %}
      neighbor {{ peer_group.name }} next-hop address-family ipv6 originate
{%             endif %}
{%             if peer_group.activate is arista.avd.defined(true) %}
      neighbor {{ peer_group.name }} activate
{%             elif peer_group.activate is arista.avd.defined(false) %}
      no neighbor {{ peer_group.name }} activate
{%             endif %}
{%         endfor %}
{%         for neighbor in router_bgp.address_family_ipv4.neighbors | arista.avd.convert_dicts('ip_address') | arista.avd.natural_sort('ip_address') %}
{%             if neighbor.route_map_in is arista.avd.defined %}
      neighbor {{ neighbor.ip_address }} route-map {{ neighbor.route_map_in }} in
{%             endif %}
{%             if neighbor.route_map_out is arista.avd.defined %}
      neighbor {{ neighbor.ip_address }} route-map {{ neighbor.route_map_out }} out
{%             endif %}
{%             if neighbor.prefix_list_in is arista.avd.defined %}
      neighbor {{ neighbor.ip_address }} prefix-list {{ neighbor.prefix_list_in }} in
{%             endif %}
{%             if neighbor.prefix_list_out is arista.avd.defined %}
      neighbor {{ neighbor.ip_address }} prefix-list {{ neighbor.prefix_list_out }} out
{%             endif %}
{%             if neighbor.default_originate is arista.avd.defined %}
{%                 set neighbor_default_originate_cli = "neighbor " ~ neighbor.ip_address ~ " default-originate" %}
{%                 if neighbor.default_originate.route_map is arista.avd.defined %}
{%                     set neighbor_default_originate_cli = neighbor_default_originate_cli ~ " route-map " ~ neighbor.default_originate.route_map %}
{%                 endif %}
{%                 if neighbor.default_originate.always is arista.avd.defined(true) %}
{%                     set neighbor_default_originate_cli = neighbor_default_originate_cli ~ " always" %}
{%                 endif %}
      {{ neighbor_default_originate_cli }}
{%             endif %}
{%             if neighbor.activate is arista.avd.defined(true) %}
      neighbor {{ neighbor.ip_address }} activate
{%             elif neighbor.activate is arista.avd.defined(false) %}
      no neighbor {{ neighbor.ip_address }} activate
{%             endif %}
{%         endfor %}
{%         for network in router_bgp.address_family_ipv4.networks | arista.avd.convert_dicts('prefix') | arista.avd.natural_sort('prefix') %}
{%             if network.route_map is arista.avd.defined %}
      network {{ network.prefix }} route-map {{ network.route_map }}
{%             else %}
      network {{ network.prefix }}
{%             endif %}
{%         endfor %}
{%     endif %}
{# address family ipv4 multicast activation #}
{%     if router_bgp.address_family_ipv4_multicast is arista.avd.defined %}
   !
   address-family ipv4 multicast
{%         for peer_group in router_bgp.address_family_ipv4_multicast.peer_groups | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
{%             if peer_group.route_map_in is arista.avd.defined %}
      neighbor {{ peer_group.name }} route-map {{ peer_group.route_map_in }} in
{%             endif %}
{%             if peer_group.route_map_out is arista.avd.defined %}
      neighbor {{ peer_group.name }} route-map {{ peer_group.route_map_out }} out
{%             endif %}
{%             if peer_group.activate is arista.avd.defined(true) %}
      neighbor {{ peer_group.name }} activate
{%             elif peer_group.activate is arista.avd.defined(false) %}
      no neighbor {{ peer_group.name }} activate
{%             endif %}
{%         endfor %}
{%         for neighbor in router_bgp.address_family_ipv4_multicast.neighbors | arista.avd.convert_dicts('ip_address') | arista.avd.natural_sort('ip_address') %}
{%             if neighbor.route_map_in is arista.avd.defined %}
      neighbor {{ neighbor.ip_address }} route-map {{ neighbor.route_map_in }} in
{%             endif %}
{%             if neighbor.route_map_out is arista.avd.defined %}
      neighbor {{ neighbor.ip_address }} route-map {{ neighbor.route_map_out }} out
{%             endif %}
{%             if neighbor.activate is arista.avd.defined(true) %}
      neighbor {{ neighbor.ip_address }} activate
{%             elif neighbor.activate is arista.avd.defined(false) %}
      no neighbor {{ neighbor.ip_address }} activate
{%             endif %}
{%         endfor %}
{%         for redistribute_route in router_bgp.address_family_ipv4_multicast.redistribute_routes | arista.avd.convert_dicts('source_protocol') | arista.avd.natural_sort('source_protocol') %}
{%             if redistribute_route.source_protocol is arista.avd.defined %}
{%                 set redistribute_route_cli = "redistribute " ~ redistribute_route.source_protocol %}
{%                 if redistribute_route.route_map is arista.avd.defined %}
{%                     set redistribute_route_cli = redistribute_route_cli ~ " route-map " ~ redistribute_route.route_map %}
{%                 endif %}
      {{ redistribute_route_cli }}
{%             endif %}
{%         endfor %}
{%     endif %}
{# address family ipv6 activation #}
{%     if router_bgp.address_family_ipv6 is arista.avd.defined %}
   !
   address-family ipv6
{%         for peer_group in router_bgp.address_family_ipv6.peer_groups | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
{%             if peer_group.route_map_in is arista.avd.defined %}
      neighbor {{ peer_group.name }} route-map {{ peer_group.route_map_in }} in
{%             endif %}
{%             if peer_group.route_map_out is arista.avd.defined %}
      neighbor {{ peer_group.name }} route-map {{ peer_group.route_map_out }} out
{%             endif %}
{%             if peer_group.prefix_list_in is arista.avd.defined %}
      neighbor {{ peer_group.name }} prefix-list {{ peer_group.prefix_list_in }} in
{%             endif %}
{%             if peer_group.prefix_list_out is arista.avd.defined %}
      neighbor {{ peer_group.name }} prefix-list {{ peer_group.prefix_list_out }} out
{%             endif %}
{%             if peer_group.activate is arista.avd.defined(true) %}
      neighbor {{ peer_group.name }} activate
{%             elif peer_group.activate is arista.avd.defined(false) %}
      no neighbor {{ peer_group.name }} activate
{%             endif %}
{%         endfor %}
{%         for neighbor in router_bgp.address_family_ipv6.neighbors | arista.avd.convert_dicts('ip_address') | arista.avd.natural_sort('ip_address') %}
{%             if neighbor.route_map_in is arista.avd.defined %}
      neighbor {{ neighbor.ip_address }} route-map {{ neighbor.route_map_in }} in
{%             endif %}
{%             if neighbor.route_map_out is arista.avd.defined %}
      neighbor {{ neighbor.ip_address }} route-map {{ neighbor.route_map_out }} out
{%             endif %}
{%             if neighbor.prefix_list_in is arista.avd.defined %}
      neighbor {{ neighbor.ip_address }} prefix-list {{ neighbor.prefix_list_in }} in
{%             endif %}
{%             if neighbor.prefix_list_out is arista.avd.defined %}
      neighbor {{ neighbor.ip_address }} prefix-list {{ neighbor.prefix_list_out }} out
{%             endif %}
{%             if neighbor.activate is arista.avd.defined(true) %}
      neighbor {{ neighbor.ip_address }} activate
{%             elif neighbor.activate is arista.avd.defined(false) %}
      no neighbor {{ neighbor.ip_address }} activate
{%             endif %}
{%         endfor %}
{%         for network in router_bgp.address_family_ipv6.networks | arista.avd.convert_dicts('prefix') | arista.avd.natural_sort('prefix') %}
{%             if network.route_map is arista.avd.defined %}
      network {{ network.prefix }} route-map {{ network.route_map }}
{%             else %}
      network {{ network.prefix }}
{%             endif %}
{%         endfor %}
{%         for redistribute_route in router_bgp.address_family_ipv6.redistribute_routes | arista.avd.convert_dicts('source_protocol') | arista.avd.natural_sort('source_protocol') %}
{%             if redistribute_route.source_protocol is arista.avd.defined %}
{%                 set redistribute_route_cli = "redistribute " ~ redistribute_route.source_protocol %}
{%                 if redistribute_route.route_map is arista.avd.defined %}
{%                     set redistribute_route_cli = redistribute_route_cli ~ " route-map " ~ redistribute_route.route_map %}
{%                 endif %}
      {{ redistribute_route_cli }}
{%             endif %}
{%         endfor %}
{%     endif %}
{# address family vpn-ipv4 activation #}
{%     if router_bgp.address_family_vpn_ipv4 is arista.avd.defined %}
   !
   address-family vpn-ipv4
{%         if router_bgp.address_family_vpn_ipv4.domain_identifier is arista.avd.defined %}
      domain identifier {{ router_bgp.address_family_vpn_ipv4.domain_identifier }}
{%         endif %}
{%         for peer_group in router_bgp.address_family_vpn_ipv4.peer_groups | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
{%             if peer_group.activate is arista.avd.defined(true) %}
      neighbor {{ peer_group.name }} activate
{%             elif peer_group.activate is arista.avd.defined(false) %}
      no neighbor {{ peer_group.name }} activate
{%             endif %}
{%             if peer_group.route_map_in is arista.avd.defined %}
      neighbor {{ peer_group.name }} route-map {{ peer_group.route_map_in }} in
{%             endif %}
{%             if peer_group.route_map_out is arista.avd.defined %}
      neighbor {{ peer_group.name }} route-map {{ peer_group.route_map_out }} out
{%             endif %}
{%         endfor %}
{%         for neighbor in router_bgp.address_family_vpn_ipv4.neighbors | arista.avd.convert_dicts('ip_address') | arista.avd.natural_sort('ip_address') %}
{%             if neighbor.activate is arista.avd.defined(true) %}
      neighbor {{ neighbor.ip_address }} activate
{%             elif neighbor.activate is arista.avd.defined(false) %}
      no neighbor {{ neighbor.ip_address }} activate
{%             endif %}
{%             if neighbor.route_map_in is arista.avd.defined %}
      neighbor {{ neighbor.ip_address }} route-map {{ neighbor.route_map_in }} in
{%             endif %}
{%             if neighbor.route_map_out is arista.avd.defined %}
      neighbor {{ neighbor.ip_address }} route-map {{ neighbor.route_map_out }} out
{%             endif %}
{%         endfor %}
{%         if router_bgp.address_family_vpn_ipv4.neighbor_default_encapsulation_mpls_next_hop_self.source_interface is arista.avd.defined %}
      neighbor default encapsulation mpls next-hop-self source-interface {{ router_bgp.address_family_vpn_ipv4.neighbor_default_encapsulation_mpls_next_hop_self.source_interface }}
{%         endif %}
{%         if router_bgp.address_family_vpn_ipv4.route.import_match_failure_action is arista.avd.defined('discard') %}
      route import match-failure action discard
{%         endif %}
{%     endif %}
{# address family vpn-ipv6 activation #}
{%     if router_bgp.address_family_vpn_ipv6 is arista.avd.defined %}
   !
   address-family vpn-ipv6
{%         if router_bgp.address_family_vpn_ipv6.domain_identifier is arista.avd.defined %}
      domain identifier {{ router_bgp.address_family_vpn_ipv6.domain_identifier }}
{%         endif %}
{%         for peer_group in router_bgp.address_family_vpn_ipv6.peer_groups | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
{%             if peer_group.activate is arista.avd.defined(true) %}
      neighbor {{ peer_group.name }} activate
{%             elif peer_group.activate is arista.avd.defined(false) %}
      no neighbor {{ peer_group.name }} activate
{%             endif %}
{%             if peer_group.route_map_in is arista.avd.defined %}
      neighbor {{ peer_group.name }} route-map {{ peer_group.route_map_in }} in
{%             endif %}
{%             if peer_group.route_map_out is arista.avd.defined %}
      neighbor {{ peer_group.name }} route-map {{ peer_group.route_map_out }} out
{%             endif %}
{%         endfor %}
{%         for neighbor in router_bgp.address_family_vpn_ipv6.neighbors | arista.avd.convert_dicts('ip_address') | arista.avd.natural_sort('ip_address') %}
{%             if neighbor.activate is arista.avd.defined(true) %}
      neighbor {{ neighbor.ip_address }} activate
{%             elif neighbor.activate is arista.avd.defined(false) %}
      no neighbor {{ neighbor.ip_address }} activate
{%             endif %}
{%             if neighbor.route_map_in is arista.avd.defined %}
      neighbor {{ neighbor.ip_address }} route-map {{ neighbor.route_map_in }} in
{%             endif %}
{%             if neighbor.route_map_out is arista.avd.defined %}
      neighbor {{ neighbor.ip_address }} route-map {{ neighbor.route_map_out }} out
{%             endif %}
{%         endfor %}
{%         if router_bgp.address_family_vpn_ipv6.neighbor_default_encapsulation_mpls_next_hop_self.source_interface is arista.avd.defined %}
      neighbor default encapsulation mpls next-hop-self source-interface {{ router_bgp.address_family_vpn_ipv6.neighbor_default_encapsulation_mpls_next_hop_self.source_interface }}
{%         endif %}
{%         if router_bgp.address_family_vpn_ipv6.route.import_match_failure_action is arista.avd.defined('discard') %}
      route import match-failure action discard
{%         endif %}
{%     endif %}
{# L3VPNs - (vxlan) VRFs #}
{%     for vrf in router_bgp.vrfs | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
   !
   vrf {{ vrf.name }}
{%         if vrf.rd is arista.avd.defined %}
      rd {{ vrf.rd }}
{%         endif %}
{%         if vrf.evpn_multicast is arista.avd.defined(true) %}
      evpn multicast
{%         endif %}
{%         if vrf.route_targets.import is arista.avd.defined %}
{%             for address_family in vrf.route_targets.import | arista.avd.convert_dicts('address_family','route_targets') %}
{%                 for route_target in address_family.route_targets %}
      route-target import {{ address_family.address_family }} {{ route_target }}
{%                 endfor %}
{%             endfor %}
{%         endif %}
{%         if vrf.route_targets.export is arista.avd.defined %}
{%             for address_family in vrf.route_targets.export | arista.avd.convert_dicts('address_family','route_targets') %}
{%                 for route_target in address_family.route_targets %}
      route-target export {{ address_family.address_family }} {{ route_target }}
{%                 endfor %}
{%             endfor %}
{%         endif %}
{%         if vrf.router_id is arista.avd.defined %}
      router-id {{ vrf.router_id }}
{%         endif %}
{%         if vrf.timers is arista.avd.defined %}
      timers bgp {{ vrf.timers }}
{%         endif %}
{%         if vrf.listen_ranges is arista.avd.defined %}
{%             for listen_range in vrf.listen_ranges | arista.avd.natural_sort('peer_group') if listen_range.peer_group is arista.avd.defined and listen_range.prefix is arista.avd.defined
                   and (listen_range.peer_filter is arista.avd.defined or listen_range.remote_as is arista.avd.defined) %}
{%                 set listen_range_cli = "bgp listen range " ~ listen_range.prefix %}
{%                 if listen_range.peer_id_include_router_id is arista.avd.defined(true) %}
{%                     set listen_range_cli = listen_range_cli ~ " peer-id include router-id" %}
{%                 endif %}
{%                 set listen_range_cli = listen_range_cli ~ " peer-group " ~ listen_range.peer_group %}
{%                 if listen_range.peer_filter is arista.avd.defined %}
{%                     set listen_range_cli = listen_range_cli ~ " peer-filter " ~ listen_range.peer_filter %}
{%                 elif listen_range.remote_as is arista.avd.defined %}
{%                     set listen_range_cli = listen_range_cli ~ " remote-as " ~ listen_range.remote_as %}
{%                 endif %}
      {{ listen_range_cli }}
{%             endfor %}
{%         endif %}
{%         for neighbor_interface in vrf.neighbor_interfaces | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
{%             if neighbor_interface.peer_group is arista.avd.defined and neighbor_interface.remote_as is arista.avd.defined %}
      neighbor interface {{ neighbor_interface.name }} peer-group {{ neighbor_interface.peer_group }} remote-as {{ neighbor_interface.remote_as }}
{%             elif neighbor_interface.peer_group is arista.avd.defined and neighbor_interface.peer_filter is arista.avd.defined %}
      neighbor interface {{ neighbor_interface.name }} peer-group {{ neighbor_interface.peer_group }} peer-filter {{ neighbor_interface.peer_filter }}
{%             endif %}
{%         endfor %}
{%         for neighbor in vrf.neighbors | arista.avd.convert_dicts('ip_address') | arista.avd.natural_sort('ip_address') %}
{%             if neighbor.remote_as is arista.avd.defined %}
      neighbor {{ neighbor.ip_address }} remote-as {{ neighbor.remote_as }}
{%             endif %}
{%             if neighbor.peer_group is arista.avd.defined %}
      neighbor {{ neighbor.ip_address }} peer group {{ neighbor.peer_group }}
{%             endif %}
{%             if neighbor.remove_private_as.enabled is arista.avd.defined(true) %}
{%                 set remove_private_as_cli = "neighbor " ~ neighbor.ip_address ~ " remove-private-as" %}
{%                 if neighbor.remove_private_as.all is arista.avd.defined(true) %}
{%                     set remove_private_as_cli = remove_private_as_cli ~ " all" %}
{%                     if neighbor.remove_private_as.replace_as is arista.avd.defined(true) %}
{%                         set remove_private_as_cli = remove_private_as_cli ~ " replace-as" %}
{%                     endif %}
{%                 endif %}
      {{ remove_private_as_cli }}
{%             elif neighbor.remove_private_as.enabled is arista.avd.defined(false) %}
      no neighbor {{ neighbor.ip_address }} remove-private-as
{%             endif %}
{%             if neighbor.remove_private_as_ingress.enabled is arista.avd.defined(true) %}
{%                 set remove_private_as_ingress_cli = "neighbor " ~ neighbor.ip_address ~ " remove-private-as ingress" %}
{%                 if neighbor.remove_private_as_ingress.replace_as is arista.avd.defined(true) %}
{%                     set remove_private_as_ingress_cli = remove_private_as_ingress_cli ~ " replace-as" %}
{%                 endif %}
      {{ remove_private_as_ingress_cli }}
{%             elif neighbor.remove_private_as_ingress.enabled is arista.avd.defined(false) %}
      no neighbor {{ neighbor.ip_address }} remove-private-as ingress
{%             endif %}
{%             if neighbor.password is arista.avd.defined %}
      neighbor {{ neighbor.ip_address }} password 7 {{ neighbor.password }}
{%             endif %}
{%             if neighbor.weight is arista.avd.defined %}
      neighbor {{ neighbor.ip_address }} weight {{ neighbor.weight }}
{%             endif %}
{%             if neighbor.local_as is arista.avd.defined %}
      neighbor {{ neighbor.ip_address }} local-as {{ neighbor.local_as }} no-prepend replace-as
{%             endif %}
{%             if neighbor.description is arista.avd.defined %}
      neighbor {{ neighbor.ip_address }} description {{ neighbor.description }}
{%             endif %}
{%             if neighbor.ebgp_multihop is arista.avd.defined %}
{%                 set neighbor_ebgp_multihop_cli = "neighbor " ~ neighbor.ip_address ~ " ebgp-multihop" %}
{%                 if neighbor.ebgp_multihop is number %}
{%                     set neighbor_ebgp_multihop_cli = neighbor_ebgp_multihop_cli ~ " " ~ neighbor.ebgp_multihop %}
{%                 endif %}
      {{ neighbor_ebgp_multihop_cli }}
{%             endif %}
{%             if neighbor.next_hop_self is arista.avd.defined(true) %}
      neighbor {{ neighbor.ip_address }} next-hop-self
{%             endif %}
{%             if neighbor.bfd is arista.avd.defined(true) %}
      neighbor {{ neighbor.ip_address }} bfd
{%             elif neighbor.bfd is arista.avd.defined(false) %}
      no neighbor {{ neighbo.ip_address }} bfd
{%             endif %}
{%             if neighbor.allowas_in.enabled is arista.avd.defined(true) %}
{%                 set allowas_in_cli = "neighbor " ~ neighbor.ip_address ~ " allowas-in" %}
{%                 if neighbor.allowas_in.times is arista.avd.defined %}
{%                     set allowas_in_cli = allowas_in_cli ~ " " ~ neighbor.allowas_in.times %}
{%                 endif %}
      {{ allowas_in_cli }}
{%             endif %}
{%             if neighbor.rib_in_pre_policy_retain.enabled is arista.avd.defined(true) %}
{%                 set neighbor_rib_in_pre_policy_retain_cli = "neighbor " ~ neighbor.ip_address ~ " rib-in pre-policy retain" %}
{%                 if neighbor.rib_in_pre_policy_retain.all is arista.avd.defined(true) %}
{%                     set neighbor_rib_in_pre_policy_retain_cli = neighbor_rib_in_pre_policy_retain_cli ~ " all" %}
{%                 endif %}
      {{ neighbor_rib_in_pre_policy_retain_cli }}
{%             elif neighbor.rib_in_pre_policy_retain.enabled is arista.avd.defined(false) %}
{%                 set neighbor_rib_in_pre_policy_retain_cli = "no neighbor " ~ neighbor.ip_address ~ " rib-in pre-policy retain" %}
      {{ neighbor_rib_in_pre_policy_retain_cli }}
{%             endif %}
{%             if neighbor.timers is arista.avd.defined %}
      neighbor {{ neighbor.ip_address }} timers {{ neighbor.timers }}
{%             endif %}
{%             if neighbor.shutdown is arista.avd.defined(true) %}
      neighbor {{ neighbor.ip_address }} shutdown
{%             endif %}
{%             if neighbor.send_community is arista.avd.defined('all') %}
      neighbor {{ neighbor.ip_address }} send-community
{%             elif neighbor.send_community is arista.avd.defined %}
      neighbor {{ neighbor.ip_address }} send-community {{ neighbor.send_community }}
{%             endif %}
{%             if neighbor.maximum_routes is arista.avd.defined %}
{%                 set maximum_routes_cli = "neighbor " ~ neighbor.ip_address ~ " maximum-routes " ~ neighbor.maximum_routes %}
{%                 if neighbor.maximum_routes_warning_limit is arista.avd.defined %}
{%                     set maximum_routes_cli = maximum_routes_cli ~ " warning-limit " ~ neighbor.maximum_routes_warning_limit %}
{%                 endif %}
{%                 if neighbor.maximum_routes_warning_only is arista.avd.defined(true) %}
{%                     set maximum_routes_cli = maximum_routes_cli ~ " warning-only" %}
{%                 endif %}
      {{ maximum_routes_cli }}
{%             endif %}
{%             if neighbor.default_originate is arista.avd.defined %}
{%                 set neighbor_default_originate_cli = "neighbor " ~ neighbor.ip_address ~ " default-originate" %}
{%                 if neighbor.default_originate.route_map is arista.avd.defined %}
{%                     set neighbor_default_originate_cli = neighbor_default_originate_cli ~ " route-map " ~ neighbor.default_originate.route_map %}
{%                 endif %}
{%                 if neighbor.default_originate.always is arista.avd.defined(true) %}
{%                     set neighbor_default_originate_cli = neighbor_default_originate_cli ~ " always" %}
{%                 endif %}
      {{ neighbor_default_originate_cli }}
{%             endif %}
{%             if neighbor.update_source is arista.avd.defined %}
      neighbor {{ neighbor.ip_address }} update-source {{ neighbor.update_source }}
{%             endif %}
{%             if neighbor.route_map_out is arista.avd.defined %}
      neighbor {{ neighbor.ip_address }} route-map {{ neighbor.route_map_out }} out
{%             endif %}
{%             if neighbor.route_map_in is arista.avd.defined %}
      neighbor {{ neighbor.ip_address }} route-map {{ neighbor.route_map_in }} in
{%             endif %}
{%             if neighbor.prefix_list_in is arista.avd.defined %}
      neighbor {{ neighbor.ip_address }} prefix-list {{ neighbor.prefix_list_in }} in
{%             endif %}
{%             if neighbor.prefix_list_out is arista.avd.defined %}
      neighbor {{ neighbor.ip_address }} prefix-list {{ neighbor.prefix_list_out }} out
{%             endif %}
{%         endfor %}
{%         for network in vrf.networks | arista.avd.convert_dicts('prefix') | arista.avd.natural_sort('prefix') %}
{%             if network.route_map is arista.avd.defined %}
      network {{ network.prefix }} route-map {{ network.route_map }}
{%             else %}
      network {{ network.prefix }}
{%             endif %}
{%         endfor %}
{%         for aggregate_address in vrf.aggregate_addresses | arista.avd.convert_dicts('prefix') | arista.avd.natural_sort('prefix') %}
{%             set aggregate_address_cli = "aggregate-address " ~ aggregate_address.prefix %}
{%             if aggregate_address.as_set is arista.avd.defined(true) %}
{%                 set  aggregate_address_cli = aggregate_address_cli ~ " as-set" %}
{%             endif %}
{%             if aggregate_address.summary_only is arista.avd.defined(true) %}
{%                 set aggregate_address_cli = aggregate_address_cli ~ " summary-only" %}
{%             endif %}
{%             if aggregate_address.attribute_map is arista.avd.defined %}
{%                 set aggregate_address_cli = aggregate_address_cli ~ " attribute-map " ~ aggregate_address.attribute_map %}
{%             endif %}
{%             if aggregate_address.match_map is arista.avd.defined %}
{%                 set aggregate_address_cli = aggregate_address_cli ~ " match-map " ~ aggregate_address.match_map %}
{%             endif %}
{%             if aggregate_address.advertise_only is arista.avd.defined(true) %}
{%                 set aggregate_address_cli = aggregate_address_cli ~ " advertise-only" %}
{%             endif %}
      {{ aggregate_address_cli }}
{%         endfor %}
{%         for redistribute_route in vrf.redistribute_routes | arista.avd.convert_dicts('source_protocol') | arista.avd.natural_sort('source_protocol') %}
{%             if redistribute_route.source_protocol is arista.avd.defined %}
{%                 set redistribute_route_cli = "redistribute " ~ redistribute_route.source_protocol %}
{%                 if redistribute_route.route_map is arista.avd.defined %}
{%                     set redistribute_route_cli = redistribute_route_cli ~ " route-map " ~ redistribute_route.route_map %}
{%                 endif %}
      {{ redistribute_route_cli }}
{%             endif %}
{%         endfor %}
{%         for  address_family in vrf.address_families | arista.avd.convert_dicts('address_family') | arista.avd.natural_sort('address_family') %}
      !
      address-family {{ address_family.address_family }}
{%             if address_family.bgp is arista.avd.defined %}
{%                 if address_family.bgp.missing_policy.direction_in_action is arista.avd.defined %}
         bgp missing-policy direction in action {{ address_family.bgp.missing_policy.direction_in_action }}
{%                 endif %}
{%                 if address_family.bgp.missing_policy.direction_out_action is arista.avd.defined %}
         bgp missing-policy direction out action {{ address_family.bgp.missing_policy.direction_out_action }}
{%                 endif %}
{%                 for additional_path in address_family.bgp.additional_paths | arista.avd.natural_sort %}
         bgp additional-paths {{ additional_path }}
{%                 endfor %}
{%             endif %}
{%             for peer_group in address_family.peer_groups | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
{%                 if peer_group.activate is arista.avd.defined(true) %}
         neighbor {{ peer_group.name }} activate
{%                 elif peer_group.activate is arista.avd.defined(false) %}
         no neighbor {{ peer_group.name }} activate
{%                 endif %}
{%                 if peer_group.next_hop.address_family_ipv6_originate is arista.avd.defined(true) %}
         neighbor {{ peer_group.name }} next-hop address-family ipv6 originate
{%                 endif %}
{%             endfor %}
{%             for neighbor in address_family.neighbors | arista.avd.convert_dicts('ip_address') | arista.avd.natural_sort('ip_address') %}
{%                 if neighbor.activate is arista.avd.defined(true) %}
         neighbor {{ neighbor.ip_address }} activate
{%                 endif %}
{%                 if neighbor.route_map_in is arista.avd.defined %}
         neighbor {{ neighbor.ip_address }} route-map {{ neighbor.route_map_in }} in
{%                 endif %}
{%                 if neighbor.route_map_out is arista.avd.defined %}
         neighbor {{ neighbor.ip_address }} route-map {{ neighbor.route_map_out }} out
{%                 endif %}
{%             endfor %}
{%             for network in address_family.networks | arista.avd.convert_dicts('prefix') | arista.avd.natural_sort('prefix') %}
{%                 set network_cli = "network " ~ network.prefix %}
{%                 if network.route_map is arista.avd.defined %}
{%                     set network_cli = network_cli ~ " route-map " ~ network.route_map %}
{%                 endif %}
         {{ network_cli }}
{%             endfor %}
{%         endfor %}
{%         if vrf.eos_cli is arista.avd.defined %}
      !
      {{ vrf.eos_cli | indent(6, false) }}
{%         endif %}
{%     endfor %}
{% endif %}
{# eos - router igmp #}
{% if router_igmp is arista.avd.defined %}
!
router igmp
{%     if router_igmp.ssm_aware is arista.avd.defined(true) %}
   ssm aware
{%     endif %}
{% endif %}
{# eos - Router Multicast #}
{% if router_multicast is arista.avd.defined %}
!
router multicast
{%     if router_multicast.ipv4 is arista.avd.defined %}
   ipv4
{%         for rpf_route in router_multicast.ipv4.rpf.routes | arista.avd.natural_sort('source_prefix') if rpf_route.source_prefix is arista.avd.defined %}
{%             for destination in rpf_route.destinations | arista.avd.natural_sort('nexthop') if destination.nexthop is arista.avd.defined %}
{%                 set rpf_route_cli = "rpf route " ~ rpf_route.source_prefix ~ " " ~ destination.nexthop %}
{%                 if destination.distance is arista.avd.defined %}
{%                     set rpf_route_cli = rpf_route_cli ~ " " ~ destination.distance %}
{%                 endif %}
      {{ rpf_route_cli }}
{%             endfor %}
{%         endfor %}
{%         if router_multicast.ipv4.counters.rate_period_decay is arista.avd.defined %}
      counters rate period decay {{ router_multicast.ipv4.counters.rate_period_decay }} seconds
{%         endif %}
{%         if router_multicast.ipv4.routing is arista.avd.defined(true) %}
      routing
{%         endif %}
{%         if router_multicast.ipv4.multipath is arista.avd.defined %}
      multipath {{ router_multicast.ipv4.multipath }}
{%         endif %}
{%         if router_multicast.ipv4.software_forwarding is arista.avd.defined %}
      software-forwarding {{ router_multicast.ipv4.software_forwarding }}
{%         endif %}
{%     endif %}
{%     for vrf in router_multicast.vrfs | arista.avd.natural_sort('name') %}
      !
      vrf {{ vrf.name }}
{%         if vrf.ipv4 is arista.avd.defined %}
         ipv4
{%         endif %}
{%         if vrf.ipv4.routing is arista.avd.defined(true) %}
            routing
{%         endif %}
{%     endfor %}
{% endif %}
{# eos - router general #}
{% if router_general is arista.avd.defined %}
!
router general
{%     set delimiter = false %}
{%     if router_general.router_id.ipv4 is arista.avd.defined %}
   router-id ipv4 {{ router_general.router_id.ipv4 }}
{%         set delimiter = true %}
{%     endif %}
{%     if router_general.router_id.ipv6 is arista.avd.defined %}
   router-id ipv6 {{ router_general.router_id.ipv6 }}
{%         set delimiter = true %}
{%     endif %}
{%     if router_general.nexthop_fast_failover is arista.avd.defined(true) %}
   hardware next-hop fast-failover
{%         set delimiter = true %}
{%     endif %}
{%     if delimiter is arista.avd.defined(true) and router_general.vrfs is arista.avd.defined %}
   !
{%     endif %}
{%     for vrf in router_general.vrfs | arista.avd.natural_sort('name') %}
   vrf {{ vrf.name }}
{%         for leak_route in vrf.leak_routes | arista.avd.natural_sort %}
{%             if leak_route.source_vrf is arista.avd.defined and leak_route.subscribe_policy is arista.avd.defined %}
      leak routes source-vrf {{ leak_route.source_vrf }} subscribe-policy {{ leak_route.subscribe_policy }}
{%             endif %}
{%         endfor %}
{%         for dynamic_prefix_list in vrf.routes.dynamic_prefix_lists | arista.avd.natural_sort('name') %}
{%             if dynamic_prefix_list.name is arista.avd.defined %}
      routes dynamic prefix-list {{ dynamic_prefix_list.name }}
{%             endif %}
{%         endfor %}
   !
{%     endfor %}
{% endif %}
{# eos - Router Traffic Engineering #}
{% if router_traffic_engineering is arista.avd.defined %}
!
router traffic-engineering
{%     if router_traffic_engineering.segment_routing is arista.avd.defined %}
{%         set ns = namespace(delimiter=false) %}
   segment-routing
{%         if router_traffic_engineering.segment_routing.colored_tunnel_rib is arista.avd.defined(true) %}
{%             set ns.delimiter = true %}
      rib system-colored-tunnel-rib
{%         endif %}
{%         if router_traffic_engineering.segment_routing.policy_endpoints is arista.avd.defined %}
{%             for endpoint in router_traffic_engineering.segment_routing.policy_endpoints | arista.avd.natural_sort('address') %}
{%                 for color in endpoint.colors | arista.avd.natural_sort('value') %}
{%                     if ns.delimiter is arista.avd.defined(true) %}
      !
{%                     endif %}
{%                     set ns.delimiter = true %}
      policy endpoint {{ endpoint.address }} color {{ color.value }}
{%                     if color.binding_sid is arista.avd.defined %}
         binding-sid {{ color.binding_sid }}
{%                     endif %}
{%                     if color.name is arista.avd.defined %}
         name {{ color.name }}
{%                     endif %}
{%                     if color.description is arista.avd.defined %}
         description {{ color.description }}
{%                     endif %}
{%                     if color.sbfd_remote_discriminator is arista.avd.defined %}
         sbfd remote-discriminator {{ color.sbfd_remote_discriminator }}
{%                     endif %}
{%                     for pathgroup in color.path_group | arista.avd.natural_sort('preference') %}
         !
         path-group preference {{ pathgroup.preference }}
{%                         if pathgroup.explicit_null is arista.avd.defined %}
            explicit-null {{ pathgroup.explicit_null }}
{%                         endif %}
{%                         for labelstack in pathgroup.segment_list | arista.avd.natural_sort('label_stack') %}
{%                             set stack = labelstack.label_stack %}
{%                             if labelstack.weight is arista.avd.defined %}
{%                                 set stack = stack ~ " weight " ~ labelstack.weight %}
{%                             endif %}
{%                             if labelstack.index is arista.avd.defined %}
{%                                 set stack = stack ~ " index " ~ labelstack.index %}
{%                             endif %}
            segment-list label-stack {{ stack }}
{%                         endfor %}
{%                     endfor %}
{%                 endfor %}
{%             endfor %}
{%         endif %}
{%     endif %}
{%     if router_traffic_engineering.router_id.ipv4 is arista.avd.defined %}
   router-id ipv4 {{ router_traffic_engineering.router_id.ipv4 }}
{%     endif %}
{%     if router_traffic_engineering.router_id.ipv6 is arista.avd.defined %}
   router-id ipv6 {{ router_traffic_engineering.router_id.ipv6 }}
{%     endif %}
{% endif %}
{# eos - Router OSPF #}
{% for process_id in router_ospf.process_ids | arista.avd.convert_dicts('id') | arista.avd.natural_sort('id') %}
!
{%     if process_id.vrf is arista.avd.defined %}
router ospf {{ process_id.id }} vrf {{ process_id.vrf }}
{%     else %}
router ospf {{ process_id.id }}
{%     endif %}
{%     if process_id.log_adjacency_changes_detail is arista.avd.defined(true) %}
   log-adjacency-changes detail
{%     endif %}
{%     if process_id.router_id is arista.avd.defined %}
   router-id {{ process_id.router_id }}
{%     endif %}
{%     if process_id.distance is arista.avd.defined %}
{%         if process_id.distance.intra_area is arista.avd.defined %}
   distance ospf intra-area {{ process_id.distance.intra_area }}
{%         endif %}
{%         if process_id.distance.external is arista.avd.defined %}
   distance ospf external {{ process_id.distance.external }}
{%         endif %}
{%         if process_id.distance.inter_area is arista.avd.defined %}
   distance ospf inter-area {{ process_id.distance.inter_area }}
{%         endif %}
{%     endif %}
{%     if process_id.passive_interface_default is arista.avd.defined(true) %}
   passive-interface default
{%     endif %}
{%     if process_id.no_passive_interfaces is arista.avd.defined %}
{%         for interface in process_id.no_passive_interfaces %}
   no passive-interface {{ interface }}
{%         endfor %}
{%     endif %}
{%     for network_prefix in process_id.network_prefixes | arista.avd.convert_dicts('ipv4_prefix') | arista.avd.natural_sort('ipv4_prefix') %}
   network {{ network_prefix.ipv4_prefix }} area {{ network_prefix.area }}
{%     endfor %}
{%     if process_id.bfd_enable is arista.avd.defined(true) %}
   bfd default
{%     endif %}
{%     if process_id.bfd_adjacency_state_any is arista.avd.defined(true) %}
   bfd adjacency state any
{%     endif %}
{%     for area in process_id.areas | arista.avd.convert_dicts('id') | arista.avd.natural_sort('id') %}
{# OSPF stub area configuration #}
{%         if area.type is arista.avd.defined("stub") %}
{%             set stub_area_cli = "area " ~ area.id ~ " stub" %}
{%             if area.no_summary is arista.avd.defined(true) %}
{%                 set stub_area_cli = stub_area_cli ~ " no-summary" %}
{%             endif %}
   {{ stub_area_cli }}
{%         endif %}
{# OSPF nssa area configuration #}
{%         if area.type is arista.avd.defined("nssa") %}
{#             print_nssa is set to ensure not to print "area xx nssa" twice in certain corner cases #}
{%             set ns = namespace(print_nssa = true) %}
{%             set nssa_area_cli = "area " ~ area.id ~ " nssa" %}
{%             if area.no_summary is arista.avd.defined(true) %}
{%                 set ns.print_nssa = false %}
   {{ nssa_area_cli }} no-summary
{%             endif %}
{%             if area.default_information_originate is defined %}
{%                 set ns.print_nssa = true %}
{%                 set nssa_area_cli = nssa_area_cli ~ " default-information-originate" %}
{%                 if area.default_information_originate.metric is arista.avd.defined %}
{%                     set nssa_area_cli = nssa_area_cli ~ " metric " ~ area.default_information_originate.metric %}
{%                 endif %}
{%                 if area.default_information_originate.metric_type is arista.avd.defined %}
{%                     set nssa_area_cli = nssa_area_cli ~ " metric-type " ~ area.default_information_originate.metric_type %}
{%                 endif %}
{%             endif %}
{%             if area.nssa_only is arista.avd.defined(true) %}
{%                 set ns.print_nssa = true %}
{%                 set nssa_area_cli = nssa_area_cli ~ " nssa-only" %}
{%             endif %}
{%             if ns.print_nssa == true %}
   {{ nssa_area_cli }}
{%             endif %}
{%         endif %}
{# OSPF inter-area filtering configuration #}
{%         for filter_network in area.filter.networks | arista.avd.natural_sort %}
   area {{ area.id }} filter {{ filter_network }}
{%         endfor %}
{%         if area.filter.prefix_list is arista.avd.defined %}
   area {{ area.id }} filter prefix-list {{ area.filter.prefix_list }}
{%         endif %}
{%     endfor %}
{%     if process_id.distribute_list_in.route_map is arista.avd.defined %}
   distribute-list route-map {{ process_id.distribute_list_in.route_map }} in
{%     endif %}
{%     if process_id.max_lsa is arista.avd.defined %}
   max-lsa {{ process_id.max_lsa }}
{%     endif %}
{%     if process_id.timers.lsa.rx_min_interval is arista.avd.defined %}
   timers lsa rx min interval {{ process_id.timers.lsa.rx_min_interval }}
{%     endif %}
{%     if process_id.timers.lsa.tx_delay.initial is arista.avd.defined
          and process_id.timers.lsa.tx_delay.min is arista.avd.defined
          and process_id.timers.lsa.tx_delay.max is arista.avd.defined %}
{%         set timer_ospf_lsa_tx = "timers lsa tx delay initial" %}
{%         set timer_ospf_lsa_tx = timer_ospf_lsa_tx ~ " " ~ process_id.timers.lsa.tx_delay.initial %}
{%         set timer_ospf_lsa_tx = timer_ospf_lsa_tx ~ " " ~ process_id.timers.lsa.tx_delay.min %}
{%         set timer_ospf_lsa_tx = timer_ospf_lsa_tx ~ " " ~ process_id.timers.lsa.tx_delay.max %}
   {{ timer_ospf_lsa_tx }}
{%     endif %}
{%     if process_id.timers.spf_delay.initial is arista.avd.defined
          and process_id.timers.spf_delay.min is arista.avd.defined
          and process_id.timers.spf_delay.max is arista.avd.defined %}
{%         set timer_ospf_spf_delay = "timers spf delay initial" %}
{%         set timer_ospf_spf_delay = timer_ospf_spf_delay ~ " " ~ process_id.timers.spf_delay.initial %}
{%         set timer_ospf_spf_delay = timer_ospf_spf_delay ~ " " ~ process_id.timers.spf_delay.min %}
{%         set timer_ospf_spf_delay = timer_ospf_spf_delay ~ " " ~ process_id.timers.spf_delay.max %}
   {{ timer_ospf_spf_delay }}
{%     endif %}
{%     if process_id.default_information_originate is defined %}
{%         set default_information_originate_cli = "default-information originate" %}
{%         if process_id.default_information_originate.always is arista.avd.defined(true) %}
{%             set default_information_originate_cli = default_information_originate_cli ~ " always" %}
{%         endif %}
   {{ default_information_originate_cli }}
{%     endif %}
{%     if process_id.redistribute.static is defined %}
{%         set redistribute_static_cli = "redistribute static" %}
{%         if process_id.redistribute.static.route_map is arista.avd.defined %}
{%             set redistribute_static_cli = redistribute_static_cli ~ " route-map " ~  process_id.redistribute.static.route_map %}
{%         endif %}
   {{ redistribute_static_cli }}
{%     endif %}
{%     if process_id.redistribute.connected is defined %}
{%         set redistribute_connected_cli = "redistribute connected" %}
{%         if process_id.redistribute.connected.route_map is arista.avd.defined %}
{%             set redistribute_connected_cli = redistribute_connected_cli ~ " route-map " ~ process_id.redistribute.connected.route_map %}
{%         endif %}
   {{ redistribute_connected_cli }}
{%     endif %}
{%     if process_id.redistribute.bgp is defined %}
{%         set redistribute_bgp_cli = "redistribute bgp" %}
{%         if process_id.redistribute.bgp.route_map is arista.avd.defined %}
{%             set redistribute_bgp_cli = redistribute_bgp_cli ~ " route-map " ~ process_id.redistribute.bgp.route_map %}
{%         endif %}
   {{ redistribute_bgp_cli }}
{%     endif %}
{%     if process_id.auto_cost_reference_bandwidth is arista.avd.defined %}
   auto-cost reference-bandwidth {{ process_id.auto_cost_reference_bandwidth }}
{%     endif %}
{%     if process_id.maximum_paths is arista.avd.defined %}
   maximum-paths {{ process_id.maximum_paths }}
{%     endif %}
{%     if process_id.max_metric.router_lsa is defined %}
{%         set max_metric_router_lsa_cli = "max-metric router-lsa" %}
{%         if process_id.max_metric.router_lsa.external_lsa is defined %}
{%             set max_metric_router_lsa_cli = max_metric_router_lsa_cli ~ " external-lsa" %}
{%         endif %}
{%         if process_id.max_metric.router_lsa.external_lsa.override_metric is arista.avd.defined %}
{%             set max_metric_router_lsa_cli = max_metric_router_lsa_cli ~ " " ~ process_id.max_metric.router_lsa.external_lsa.override_metric %}
{%         endif %}
{%         if process_id.max_metric.router_lsa.include_stub is arista.avd.defined(true) %}
{%             set max_metric_router_lsa_cli = max_metric_router_lsa_cli ~ " include-stub" %}
{%         endif %}
{%         if process_id.max_metric.router_lsa.on_startup is arista.avd.defined %}
{%             set max_metric_router_lsa_cli = max_metric_router_lsa_cli ~ " on-startup " ~ process_id.max_metric.router_lsa.on_startup %}
{%         endif %}
{%         if process_id.max_metric.router_lsa.summary_lsa is defined %}
{%             set max_metric_router_lsa_cli = max_metric_router_lsa_cli ~ " summary-lsa" %}
{%         endif %}
{%         if process_id.max_metric.router_lsa.summary_lsa.override_metric is arista.avd.defined %}
{%             set max_metric_router_lsa_cli = max_metric_router_lsa_cli ~ " " ~ process_id.max_metric.router_lsa.summary_lsa.override_metric %}
{%         endif %}
   {{ max_metric_router_lsa_cli }}
{%     endif %}
{%     if process_id.mpls_ldp_sync_default is arista.avd.defined(true) %}
   mpls ldp sync default
{%     endif %}
{%     if process_id.summary_addresses is arista.avd.defined %}
{%         for summary_address in process_id.summary_addresses %}
{%             if summary_address.prefix is arista.avd.defined %}
{%                 if summary_address.tag is arista.avd.defined %}
   summary-address {{ summary_address.prefix }} tag {{ summary_address.tag }}
{%                 elif summary_address.attribute_map is arista.avd.defined %}
   summary-address {{ summary_address.prefix }} attribute-map {{ summary_address.attribute_map }}
{%                 elif summary_address.not_advertise is arista.avd.defined(true) %}
   summary-address {{ summary_address.prefix }} not-advertise
{%                 else %}
   summary-address {{ summary_address.prefix }}
{%                 endif %}
{%             endif %}
{%         endfor %}
{%     endif %}
{% endfor %}
{# eos - Router PIM Sparse Mode #}
{% if router_pim_sparse_mode is arista.avd.defined %}
!
router pim sparse-mode
{%     if router_pim_sparse_mode.ipv4 is arista.avd.defined %}
   ipv4
{%         for rp_address in router_pim_sparse_mode.ipv4.rp_addresses | arista.avd.natural_sort('address') %}
{%             if rp_address.groups is arista.avd.defined %}
{%                 for group in rp_address.groups | arista.avd.natural_sort %}
      rp address {{ rp_address.address }} {{ group }}
{%                 endfor %}
{%             else %}
      rp address {{ rp_address.address }}
{%             endif %}
{%         endfor %}
{%         for anycast_rp in router_pim_sparse_mode.ipv4.anycast_rps | arista.avd.natural_sort('address') %}
{%             for other_anycast_rp_address in anycast_rp.other_anycast_rp_addresses | arista.avd.natural_sort('address') %}
{%                 set other_anycast_rp_addresses_cli = "anycast-rp " ~ anycast_rp.address ~ " " ~ other_anycast_rp_address.address %}
{%                 if other_anycast_rp_address.register_count is arista.avd.defined %}
{%                     set other_anycast_rp_addresses_cli = other_anycast_rp_addresses_cli ~ " register-count " ~ other_anycast_rp_address.register_count %}
{%                 endif %}
      {{ other_anycast_rp_addresses_cli }}
{%             endfor %}
{%         endfor %}
{%         if router_pim_sparse_mode.ipv4.ssm_range is arista.avd.defined %}
      ssm range {{ router_pim_sparse_mode.ipv4.ssm_range }}
{%         endif %}
{%     endif %}
{%     for vrf in router_pim_sparse_mode.vrfs | arista.avd.natural_sort('name') %}
   !
   vrf {{ vrf.name }}
{%         if vrf.ipv4 is arista.avd.defined %}
      ipv4
{%             for rp_address in vrf.ipv4.rp_addresses | arista.avd.natural_sort('address') %}
{%                 if rp_address.groups is arista.avd.defined %}
{%                     for group in rp_address.groups | arista.avd.natural_sort %}
         rp address {{ rp_address.address }} {{ group }}
{%                     endfor %}
{%                 else %}
         rp address {{ rp_address.address }}
{%                 endif %}
{%             endfor %}
{%         endif %}
{%     endfor %}
{% endif %}
{# eos - Router ISIS #}
{% if router_isis.instance is arista.avd.defined %}
!
router isis {{ router_isis.instance }}
{%     if router_isis.net is arista.avd.defined %}
   net {{ router_isis.net }}
{%     endif %}
{%     if router_isis.is_type is arista.avd.defined %}
   is-type {{ router_isis.is_type }}
{%     endif %}
{%     for redistribute_route in router_isis.redistribute_routes | arista.avd.natural_sort('source_protocol') %}
{%         if redistribute_route.source_protocol is arista.avd.defined %}
{%             set redistribute_route_cli = "redistribute " ~ redistribute_route.source_protocol %}
{%             if redistribute_route.source_protocol == 'isis' %}
{%                 set redistribute_route_cli = redistribute_route_cli ~ " instance" %}
{%             elif redistribute_route.source_protocol == 'ospf' %}
{%                 if redistribute_route.include_leaked is arista.avd.defined(true) %}
{%                     set redistribute_route_cli = redistribute_route_cli ~ " include leaked" %}
{%                 endif %}
{%                 if redistribute_route.ospf_route_type is not arista.avd.defined %}
{%                     continue %}
{%                 endif %}
{%                 set redistribute_route_cli = redistribute_route_cli ~ " match " ~ redistribute_route.ospf_route_type %}
{%             elif redistribute_route.source_protocol == 'ospfv3' %}
{%                 if redistribute_route.ospf_route_type is not arista.avd.defined %}
{%                     continue %}
{%                 endif %}
{%                 set redistribute_route_cli = redistribute_route_cli ~ " match " ~ redistribute_route.ospf_route_type %}
{%             elif redistribute_route.source_protocol in ['static', 'connected'] %}
{%                 if redistribute_route.include_leaked is arista.avd.defined(true) %}
{%                     set redistribute_route_cli = redistribute_route_cli ~ " include leaked" %}
{%                 endif %}
{%             endif %}
{%             if redistribute_route.route_map is arista.avd.defined %}
{%                 set redistribute_route_cli = redistribute_route_cli ~ " route-map " ~ redistribute_route.route_map %}
{%             endif %}
   {{ redistribute_route_cli }}
{%         endif %}
{%     endfor %}
{%     if router_isis.router_id is arista.avd.defined %}
   router-id ipv4 {{ router_isis.router_id }}
{%     endif %}
{%     if router_isis.log_adjacency_changes is arista.avd.defined(true) %}
   log-adjacency-changes
{%     elif router_isis.log_adjacency_changes is arista.avd.defined(false) %}
   no log-adjacency-changes
{%     endif %}
{%     if router_isis.mpls_ldp_sync_default is arista.avd.defined(true) %}
   mpls ldp sync default
{%     endif %}
{%     if router_isis.timers.local_convergence.protected_prefixes is arista.avd.defined(true) %}
{%         if router_isis.timers.local_convergence.delay is arista.avd.defined %}
   timers local-convergence-delay {{ router_isis.timers.local_convergence.delay }} protected-prefixes
{%         else %}
   timers local-convergence-delay protected-prefixes
{%         endif %}
{%     endif %}
{%     if router_isis.advertise.passive_only is arista.avd.defined(true) %}
   advertise passive-only
{%     endif %}
   !
{%     if router_isis.address_family is arista.avd.defined %}
{%         for address_family in router_isis.address_family %}
   address-family {{ address_family }}
{%             if router_isis.isis_af_defaults is arista.avd.defined %}
{%                 for af_default in router_isis.isis_af_defaults %}
      {{ af_default }}
{%                 endfor %}
{%             endif %}
{%         endfor %}
   !
{%     endif %}
{%     if router_isis.address_family_ipv4 is arista.avd.defined %}
   address-family ipv4 unicast
{%         if router_isis.address_family_ipv4.maximum_paths is arista.avd.defined %}
      maximum-paths {{ router_isis.address_family_ipv4.maximum_paths }}
{%         endif %}
{%         if router_isis.address_family_ipv4.tunnel_source_labeled_unicast.enabled is arista.avd.defined(true) %}
{%             set lu_cli = "tunnel source-protocol bgp ipv4 labeled-unicast" %}
{%             if router_isis.address_family_ipv4.tunnel_source_labeled_unicast.rcf is arista.avd.defined %}
{%                 set lu_cli = lu_cli ~ " rcf " ~ router_isis.address_family_ipv4.tunnel_source_labeled_unicast.rcf %}
{%             endif %}
      {{ lu_cli }}
{%         endif %}
{%         if router_isis.address_family_ipv4.fast_reroute_ti_lfa.mode is arista.avd.defined %}
{%             set ti_lfa_cli = "fast-reroute ti-lfa mode " ~ router_isis.address_family_ipv4.fast_reroute_ti_lfa.mode %}
{%             if router_isis.address_family_ipv4.fast_reroute_ti_lfa.level is arista.avd.defined %}
{%                 set ti_lfa_cli = ti_lfa_cli ~ " " ~ router_isis.address_family_ipv4.fast_reroute_ti_lfa.level %}
{%             endif %}
      {{ ti_lfa_cli }}
{%         endif %}
{%         if router_isis.address_family_ipv4.fast_reroute_ti_lfa.srlg.enable is arista.avd.defined(true) %}
{%             set ti_lfa_srlg_cli = "fast-reroute ti-lfa srlg" %}
{%             if router_isis.address_family_ipv4.fast_reroute_ti_lfa.srlg.strict is arista.avd.defined(true) %}
{%                 set ti_lfa_srlg_cli = ti_lfa_srlg_cli ~ " strict" %}
{%             endif %}
      {{ ti_lfa_srlg_cli }}
{%         endif %}
   !
{%     endif %}
{%     if router_isis.address_family_ipv6 is arista.avd.defined %}
   address-family ipv6 unicast
{%         if router_isis.address_family_ipv6.maximum_paths is arista.avd.defined %}
      maximum-paths {{ router_isis.address_family_ipv6.maximum_paths }}
{%         endif %}
{%         if router_isis.address_family_ipv6.fast_reroute_ti_lfa.mode is arista.avd.defined %}
{%             set ti_lfa_cli = "fast-reroute ti-lfa mode " ~ router_isis.address_family_ipv6.fast_reroute_ti_lfa.mode %}
{%             if router_isis.address_family_ipv6.fast_reroute_ti_lfa.level is arista.avd.defined %}
{%                 set ti_lfa_cli = ti_lfa_cli ~ " " ~ router_isis.address_family_ipv6.fast_reroute_ti_lfa.level %}
{%             endif %}
      {{ ti_lfa_cli }}
{%         endif %}
{%         if router_isis.address_family_ipv6.fast_reroute_ti_lfa.srlg.enable is arista.avd.defined(true) %}
{%             set ti_lfa_srlg_cli = "fast-reroute ti-lfa srlg" %}
{%             if router_isis.address_family_ipv6.fast_reroute_ti_lfa.srlg.strict is arista.avd.defined(true) %}
{%                 set ti_lfa_srlg_cli = ti_lfa_srlg_cli ~ " strict" %}
{%             endif %}
      {{ ti_lfa_srlg_cli }}
{%         endif %}
   !
{%     endif %}
{%     if router_isis.segment_routing_mpls is arista.avd.defined %}
   segment-routing mpls
{%         if router_isis.segment_routing_mpls.enabled is arista.avd.defined(true) %}
      no shutdown
{%         elif router_isis.segment_routing_mpls.enabled is arista.avd.defined(false) %}
      shutdown
{%         endif %}
{%         for prefix_segment in router_isis.segment_routing_mpls.prefix_segments | arista.avd.natural_sort('prefix') %}
{%             if prefix_segment.prefix is arista.avd.defined and prefix_segment.index is arista.avd.defined %}
      prefix-segment {{ prefix_segment.prefix }} index {{ prefix_segment.index }}
{%             endif %}
{%         endfor %}
{%     endif %}
{% endif %}
{# eos - mpls configuration #}
{% if mpls.ip is arista.avd.defined(true) %}
!
mpls ip
{% endif %}
{% if mpls.ldp is arista.avd.defined %}
!
mpls ldp
{%     if mpls.ldp.interface_disabled_default is arista.avd.defined(true) %}
   interface disabled default
{%     endif %}
{%     if mpls.ldp.router_id is arista.avd.defined %}
   router-id {{ mpls.ldp.router_id }}
{%     endif %}
{%     if mpls.ldp.shutdown is arista.avd.defined(true) %}
   shutdown
{%     elif mpls.ldp.shutdown is arista.avd.defined(false) %}
   no shutdown
{%     endif %}
{%     if mpls.ldp.transport_address_interface is arista.avd.defined %}
   transport-address interface {{ mpls.ldp.transport_address_interface }}
{%     endif %}
{% endif %}
{% if patch_panel is arista.avd.defined %}
!
patch panel
{%     for patch in patch_panel.patches | arista.avd.default([]) %}
{%         if patch.name is arista.avd.defined %}
   patch {{ patch.name }}
{%             if patch.enabled is arista.avd.defined(false) %}
      shutdown
{%             endif %}
{%             for connector in patch.connectors | arista.avd.natural_sort %}
{%                 if connector.id is arista.avd.defined %}
{%                     if connector.type is arista.avd.defined("interface") %}
{%                         set connector_cli = "connector " ~ connector.id ~ " interface " ~ connector.endpoint %}
{%                     elif connector.type is arista.avd.defined("pseudowire") %}
{%                         set connector_cli = "connector " ~ connector.id ~ " pseudowire " ~ connector.endpoint %}
{%                     endif %}
      {{ connector_cli }}
{%                 endif %}
{%             endfor %}
{%         endif %}
   !
{%     endfor %}
{% endif %}
{% if queue_monitor_streaming is arista.avd.defined %}
!
queue-monitor streaming
{%     if queue_monitor_streaming.max_connections is arista.avd.defined %}
   max-connections {{ queue_monitor_streaming.max_connections }}
{%     endif %}
{%     if queue_monitor_streaming.ip_access_group is arista.avd.defined %}
   ip access-group {{ queue_monitor_streaming.ip_access_group }}
{%     endif %}
{%     if queue_monitor_streaming.ipv6_access_group is arista.avd.defined %}
   ipv6 access-group {{ queue_monitor_streaming.ip_access_group }}
{%     endif %}
{%     if queue_monitor_streaming.vrf is arista.avd.defined %}
   vrf {{ queue_monitor_streaming.vrf }}
{%     endif %}
{%     if queue_monitor_streaming.enable is arista.avd.defined(true) %}
   no shutdown
{%     elif queue_monitor_streaming.enable is arista.avd.defined(false) %}
   shutdown
{%     endif %}
{% endif %}
{# eos - IP TACACS+ Source interfaces#}
{% for ip_tacacs_source_interface in ip_tacacs_source_interfaces | arista.avd.natural_sort %}
!
{%     set ip_tacacs_cli = "ip tacacs" %}
{%     if ip_tacacs_source_interface.vrf is arista.avd.defined %}
{%         set ip_tacacs_cli = ip_tacacs_cli ~ " vrf " ~ ip_tacacs_source_interface.vrf %}
{%     endif %}
{%     if ip_tacacs_source_interface.name is arista.avd.defined %}
{%         set ip_tacacs_cli = ip_tacacs_cli ~ " source-interface " ~ ip_tacacs_source_interface.name %}
{%     endif %}
{{ ip_tacacs_cli }}
{% endfor %}
{# eos - IP radius Source interfaces#}
{% for ip_radius_source_interface in ip_radius_source_interfaces | arista.avd.natural_sort %}
!
{%     set ip_radius_cli = "ip radius" %}
{%     if ip_radius_source_interface.vrf is arista.avd.defined %}
{%         set ip_radius_cli = ip_radius_cli ~ " vrf " ~ ip_radius_source_interface.vrf %}
{%     endif %}
{%     if ip_radius_source_interface.name is arista.avd.defined %}
{%         set ip_radius_cli = ip_radius_cli ~ " source-interface " ~ ip_radius_source_interface.name %}
{%     endif %}
{{ ip_radius_cli }}
{% endfor %}
{# eos - vmtracer sessions #}
{% for session in vmtracer_sessions | arista.avd.natural_sort('name') %}
!
vmtracer session {{ session.name }}
{%     if session.url is arista.avd.defined %}
   url {{ session.url }}
{%     endif %}
{%     if session.username is arista.avd.defined %}
   username {{ session.username }}
{%     endif %}
{%     if session.password is arista.avd.defined %}
   password 7 {{ session.password }}
{%     endif %}
{%     if session.autovlan_disable is arista.avd.defined(true) %}
   autovlan disable
{%     endif %}
{%     if session.source_interface is arista.avd.defined %}
   source-interface {{ session.source_interface }}
{%     endif %}
{% endfor %}
{% if traffic_policies is arista.avd.defined %}
!
traffic-policies
{# Global options #}
{%     if traffic_policies.options.counter_per_interface is arista.avd.defined(true) %}
   counter interface per-interface ingress
{%     endif %}
{# FIELD SET #}
{#     -- IPv4 PREFIX MANAGEMENT -- #}
{%     if traffic_policies.field_sets.ipv4 is arista.avd.defined %}
{%         for field_set_ipv4 in traffic_policies.field_sets.ipv4 | arista.avd.convert_dicts('name','prefixes') %}
   field-set ipv4 prefix {{ field_set_ipv4.name }}
      {{ field_set_ipv4.prefixes | join(' ') }}
   !
{%         endfor %}
{%     endif %}
{#     -- IPv6 PREFIX MANAGEMENT -- #}
{%     if traffic_policies.field_sets.ipv6 is arista.avd.defined %}
{%         for field_set_ipv6 in traffic_policies.field_sets.ipv6 | arista.avd.convert_dicts('name','prefixes') %}
   field-set ipv6 prefix {{ field_set_ipv6.name }}
      {{ field_set_ipv6.prefixes | join(' ') }}
   !
{%         endfor %}
{%     endif %}
{#     -- L4 PORT MANAGEMENT -- #}
{%     if traffic_policies.field_sets.ports is arista.avd.defined %}
{%         for field_set_port in traffic_policies.field_sets.ports | arista.avd.convert_dicts('name','port_range') %}
   field-set l4-port {{ field_set_port.name }}
      {{ field_set_port.port_range }}
   !
{%         endfor %}
{%     endif %}
{# TRAFFIC POLICIES #}
{%     if traffic_policies.policies is arista.avd.defined %}
{%         for policy in traffic_policies.policies | arista.avd.convert_dicts('name') %}
   traffic-policy {{ policy.name }}
{%             if policy.matches is arista.avd.defined %}
{# COUNTER CREATION SECTION #}
{%                 set transient_values = namespace() %}
{%                 set transient_values.counters = [] %}
{%                 for match in policy.matches | arista.avd.convert_dicts('name') %}
{%                     if match.actions.count is arista.avd.defined %}
{%                         do transient_values.counters.append(match.actions.count | string) %}
{%                     endif %}
{%                 endfor %}
{%                 if transient_values.counters | length > 0 %}
      counter {{ transient_values.counters | join(' ') }}
{%                 endif %}
{# MATCH SECTION #}
{%                 for match in policy.matches | arista.avd.convert_dicts('name') %}
      match {{ match.name }} {{ match.type | lower }}
{#                     -- SOURCE PREFIX MANAGEMENT -- #}
{%                     if match.source is arista.avd.defined %}
{%                         if match.source.prefixes is arista.avd.defined %}
         source prefix {{ match.source.prefixes | join(' ') }}
{%                         endif %}
{%                         if match.source.prefix_lists is arista.avd.defined %}
         source prefix field-set {{ match.source.prefix_lists | join(' ') }}
{%                         endif %}
{%                     endif %}
{#                     -- DESTINATION PREFIX MANAGEMENT -- #}
{%                     if match.destination is arista.avd.defined %}
{%                         if match.destination.prefixes is arista.avd.defined %}
         destination prefix {{ match.destination.prefixes | join(' ') }}
{%                         endif %}
{%                         if match.destination.prefix_lists is arista.avd.defined %}
         destination prefix field-set {{ match.destination.prefix_lists | join(' ') }}
{%                         endif %}
{%                     endif %}
{#                     -- PROTOCOL MANAGEMENT -- #}
{%                     if match.protocols is arista.avd.defined %}
{%                         for protocol in match.protocols | arista.avd.convert_dicts('protocol') %}
{#                             -- destination port-list -- #}
{%                             if protocol.dst_port is arista.avd.defined and protocol.protocol | lower in ['tcp','udp'] %}
{%                                 set protocol_cli = 'protocol ' ~ protocol.protocol %}
{%                                 if protocol.flags is arista.avd.defined %}
{%                                     set protocol_cli = protocol_cli ~ ' flags ' ~ protocol.flags | join(' ') %}
{%                                 endif %}
{%                                 set protocol_cli = protocol_cli ~ ' destination port ' ~ protocol.dst_port %}
         {{ protocol_cli }}
{#                             -- source port-list -- #}
{%                             elif protocol.src_port is arista.avd.defined and protocol.protocol | lower in ['tcp','udp'] %}
{%                                 set protocol_cli = 'protocol ' ~ protocol.protocol %}
{%                                 if protocol.flags is arista.avd.defined %}
{%                                     set protocol_cli = protocol_cli ~ ' flags ' ~ protocol.flags | join(' ') %}
{%                                 endif %}
{%                                 set protocol_cli = protocol_cli ~ ' source port ' ~ protocol.src_port %}
         {{ protocol_cli }}
{#                             -- destination field-set -- #}
{%                             elif protocol.dst_field is arista.avd.defined and protocol.protocol | lower in ['tcp','udp'] %}
{%                                 set protocol_cli = 'protocol ' ~ protocol.protocol %}
{%                                 if protocol.flags is arista.avd.defined %}
{%                                     set protocol_cli = protocol_cli ~ ' flags ' ~  protocol.flags | join(' ') %}
{%                                 endif %}
{%                                 set protocol_cli = protocol_cli ~ ' destination port field-set ' ~ protocol.dst_field %}
         {{ protocol_cli }}
{#                             -- source field-set -- #}
{%                             elif protocol.src_field is arista.avd.defined and protocol.protocol | lower in ['tcp','udp'] %}
{%                                 set protocol_cli = 'protocol ' ~ protocol.protocol %}
{%                                 if protocol.flags is arista.avd.defined %}
{%                                     set protocol_cli = protocol_cli ~ ' flags ' ~  protocol.flags | join(' ') %}
{%                                 endif %}
{%                                 set protocol_cli = protocol_cli ~ ' source port field-set ' ~ protocol.src_field %}
         {{ protocol_cli }}
{%                             elif protocol.icmp_type is arista.avd.defined(protocol.protocol) | lower == 'icmp' %}
         protocol icmp type {{ protocol.icmp_type | join(' ') }} code all
{%                             elif protocol.protocol | lower == 'neighbors' %}
         protocol neighbors bgp
{%                             elif protocol.protocol | lower != 'ip' %}
         protocol {{ protocol.protocol }}
{%                             endif %}
{%                         endfor %}
{%                     endif %}
{#                     -- TTL MANAGEMENT -- #}
{%                     if match.ttl is arista.avd.defined %}
         ttl {{ match.ttl }}
{%                     endif %}
{#                     -- FRAGMENT MANAGEMENT -- #}
{%                     if match.fragment.offset is arista.avd.defined %}
         fragment offset {{ match.fragment.offset }}
{%                     elif  match.fragment is defined %}
         fragment
{%                     endif %}
{#       -- ACTIONS SECTION -- #}
{%                     if match.actions.count is arista.avd.defined or match.actions.traffic_class is arista.avd.defined or match.actions.dscp is arista.avd.defined or match.actions.drop is arista.avd.defined(true)  %}
         actions
{#                         -- COUNT packets -- #}
{%                         if match.actions.count is arista.avd.defined %}
            count {{ match.actions.count }}
{%                         endif %}
{#                         -- Traffic Class -- #}
{%                         if match.actions.traffic_class is arista.avd.defined %}
            set traffic class {{ match.actions.traffic_class }}
{%                         endif %}
{#                         -- DSCP -- #}
{%                         if match.actions.dscp is arista.avd.defined %}
            set dscp {{ match.actions.dscp }}
{%                         endif %}
{#                         -- DROP Action -- #}
{%                         if match.actions.drop is arista.avd.defined(true) %}
            drop
{#                             -- LOGGING only if DROP is set-- #}
{%                             if match.actions.log is arista.avd.defined(true) %}
            log
{%                             endif %}
{%                         endif %}
{%                     endif %}
{# END OF MATCH Section #}
         !
      !
{%                 endfor %}
{%             endif %}
{# DEFAULT MATCH Section #}
{%             if policy.default_actions is arista.avd.defined %}
{%                 for version in policy.default_actions %}
      match {{ version | lower }}-all-default {{ version | lower }}
         actions
{%                     if version is arista.avd.defined('ipv4') %}
{#                         -- COUNT packets ipv4 -- #}
{%                         if policy.default_actions.ipv4.count is arista.avd.defined %}
            count {{ policy.default_actions.ipv4.count }}
{%                         endif %}
{#                         -- Traffic Class ipv4 -- #}
{%                         if policy.default_actions.ipv4.traffic_class is arista.avd.defined %}
            set traffic class {{ policy.default_actions.ipv4.traffic_class }}
{%                         endif %}
{#                         -- DSCP ipv4 -- #}
{%                         if policy.default_actions.ipv4.dscp is arista.avd.defined %}
            set dscp {{ policy.default_actions.ipv4.dscp }}
{%                         endif %}
{#                         -- DROP Action ipv4 -- #}
{%                         if policy.default_actions.ipv4.drop is arista.avd.defined(true) %}
            drop
{#                             -- LOGGING ipv4 only if DROP is set-- #}
{%                             if policy.default_actions.ipv4.log is arista.avd.defined(true) %}
            log
{%                             endif %}
{%                         endif %}
{%                     elif version is arista.avd.defined('ipv6') %}
{#                         -- COUNT packets ipv6 -- #}
{%                         if policy.default_actions.ipv6.count is arista.avd.defined %}
            count {{ policy.default_actions.ipv6.count }}
{%                         endif %}
{#                         -- Traffic Class ipv6 -- #}
{%                         if policy.default_actions.ipv6.traffic_class is arista.avd.defined %}
            set traffic class {{ policy.default_actions.ipv6.traffic_class }}
{%                         endif %}
{#                         -- DSCP ipv6 -- #}
{%                         if policy.default_actions.ipv6.dscp is arista.avd.defined %}
            set dscp {{ policy.default_actions.ipv6.dscp }}
{%                         endif %}
{#                         -- DROP Action ipv6 -- #}
{%                         if policy.default_actions.ipv6.drop is arista.avd.defined(true) %}
            drop
{#                             -- LOGGING ipv6 only if DROP is set-- #}
{%                             if policy.default_actions.ipv6.log is arista.avd.defined(true) %}
            log
{%                             endif %}
{%                         endif %}
{%                     endif %}
{%                 endfor %}
{%             endif %}
{# END of DEFAULT MATCH Section #}
   !
{%         endfor %}
{%     endif %}
{% endif %}
{# eos - banners #}
{% if banners.login is arista.avd.defined %}
!
banner login
{{ banners.login }}
{% endif %}
{% if banners.motd is arista.avd.defined %}
!
banner motd
{{ banners.motd }}
{% endif %}
{# eos - IP HTTP Client Source Interfaces#}
{% for ip_http_client_source_interface in ip_http_client_source_interfaces | arista.avd.natural_sort %}
!
{%     set ip_http_client_cli = "ip http client" %}
{%     if ip_http_client_source_interface.name is arista.avd.defined %}
{%         set ip_http_client_cli = ip_http_client_cli ~ " local-interface " ~ ip_http_client_source_interface.name %}
{%     endif %}
{%     if ip_http_client_source_interface.vrf is arista.avd.defined %}
{%         set ip_http_client_cli = ip_http_client_cli ~ " vrf " ~ ip_http_client_source_interface.vrf %}
{%     endif %}
{{ ip_http_client_cli }}
{% endfor %}
{# eos - IP SSH Client Source Interfaces#}
{% if ip_ssh_client_source_interfaces is arista.avd.defined %}
!
{%     for ip_ssh_client_source_interface in ip_ssh_client_source_interfaces | arista.avd.natural_sort %}
{%         if ip_ssh_client_source_interface.name is arista.avd.defined %}
{%             set ip_ssh_client_cli = "ip ssh client source-interface " ~ ip_ssh_client_source_interface.name | capitalize %}
{%             if ip_ssh_client_source_interface.vrf is arista.avd.defined %}
{%                 set ip_ssh_client_cli = ip_ssh_client_cli ~ " vrf " ~ ip_ssh_client_source_interface.vrf %}
{%             endif %}
{{ ip_ssh_client_cli }}
{%         endif %}
{%     endfor %}
{% endif %}
{# Management API HTTP #}
{% if management_api_http is arista.avd.defined %}
!
management api http-commands
{%     if management_api_http.enable_https is arista.avd.defined(true) %}
   protocol https
{%         if management_api_http.https_ssl_profile is arista.avd.defined %}
   protocol https ssl profile {{ management_api_http.https_ssl_profile }}
{%         endif %}
{%     elif management_api_http.enable_https is arista.avd.defined(false) %}
   no protocol https
{%     endif %}
{%     if management_api_http.enable_http is arista.avd.defined(true) %}
   protocol http
{%     elif management_api_http.enable_http is arista.avd.defined(false) %}
   no protocol http
{%     endif %}
{%     if management_api_http.default_services is arista.avd.defined(true) %}
   default-services
{%     elif management_api_http.default_services is arista.avd.defined(false) %}
   no default-services
{%     endif %}
   no shutdown
{%     for vrf in management_api_http.enable_vrfs | arista.avd.natural_sort('name') %}
   !
   vrf {{ vrf.name }}
      no shutdown
{%         if vrf.access_group is arista.avd.defined %}
      ip access-group {{ vrf.access_group }}
{%         endif %}
{%         if vrf.ipv6_access_group is arista.avd.defined %}
      ipv6 access-group {{ vrf.ipv6_access_group }}
{%         endif %}
{%     endfor %}
{%     if management_api_http.protocol_https_certificate.certificate is arista.avd.defined and management_api_http.protocol_https_certificate.private_key is arista.avd.defined %}
   protocol_https_certificate
   {{ management_api_http.protocol_https_certificate.certificate }}
   EOF
   {{ management_api_http.protocol_https_certificate.private_key }}
   EOF
{%     endif %}
{% endif %}
{# Management console #}
{% if management_console is arista.avd.defined %}
!
management console
{%     if management_console.idle_timeout is arista.avd.defined %}
   idle-timeout {{ management_console.idle_timeout }}
{%     endif %}
{% endif %}
{# management cvx #}
{% if management_cvx is arista.avd.defined %}
!
management cvx
{%     if management_cvx.shutdown is arista.avd.defined(true) %}
   shutdown
{%     elif management_cvx.shutdown is arista.avd.defined(false) %}
   no shutdown
{%     endif %}
{%     for server_host in management_cvx.server_hosts | arista.avd.natural_sort %}
   server host {{ server_host }}
{%     endfor %}
{% endif %}
{# Management defaults #}
{% if management_defaults.secret.hash is arista.avd.defined %}
!
management defaults
  secret hash {{ management_defaults.secret.hash }}
{% endif %}
{# Management GNMI #}
{% if management_api_gnmi is arista.avd.defined %}
!
management api gnmi
{%     for vrf in management_api_gnmi.enable_vrfs | arista.avd.natural_sort %}
{%         if vrf == 'default' %}
   transport grpc default
{%         else %}
   transport grpc {{ vrf }}
{%             if management_api_gnmi.enable_vrfs[vrf].access_group is arista.avd.defined %}
      ip access-group {{ management_api_gnmi.enable_vrfs[vrf].access_group }}
{%             endif %}
      vrf {{ vrf }}
{%         endif %}
{%     endfor %}
{%     if management_api_gnmi.octa is defined %}
   provider eos-native
{%     endif %}
{%     if management_api_gnmi.transport is arista.avd.defined %}
{%         if management_api_gnmi.transport.grpc is arista.avd.defined %}
{%             for transport in management_api_gnmi.transport.grpc %}
{%                 if transport.name is arista.avd.defined %}
   transport grpc {{ transport.name }}
{%                     if transport.ssl_profile is arista.avd.defined %}
      ssl profile {{ transport.ssl_profile }}
{%                     endif %}
{%                     if transport.vrf is arista.avd.defined %}
      vrf {{ transport.vrf }}
{%                     endif %}
{%                     if transport.ip_access_group is arista.avd.defined %}
      ip access-group {{ transport.ip_access_group }}
{%                     endif %}
{%                     if transport.notification_timestamp is arista.avd.defined %}
      notification timestamp {{ transport.notification_timestamp }}
{%                     endif %}
{%                 endif %}
{%             endfor %}
{%         endif %}
{%     endif %}
{%     if management_api_gnmi.provider is arista.avd.defined %}
   provider {{ management_api_gnmi.provider }}
{%     endif %}
{% endif %}
{# Management API Models #}
{% if management_api_models is arista.avd.defined %}
!
management api models
{%     for provider in management_api_models.providers | arista.avd.natural_sort('name') %}
{%         if provider.name is arista.avd.defined and provider.name | lower in ['smash', 'sysdb'] %}
   !
   provider {{ provider.name }}
{%             for path in provider.paths | arista.avd.natural_sort('path') %}
{%                 set provider_cli = "path " ~ path.path %}
{%                 if path.disabled is arista.avd.defined(true) %}
{%                     set provider_cli = provider_cli ~ " disabled" %}
{%                 endif %}
      {{ provider_cli }}
{%             endfor %}
{%         endif %}
{%     endfor %}
{% endif %}
{# eos - management security #}
{% if management_security is arista.avd.defined %}
!
management security
{%     if management_security.entropy_source is arista.avd.defined %}
   entropy source {{ management_security.entropy_source }}
{%     endif %}
{%     if management_security.password.encryption_key_common is arista.avd.defined(true) %}
   password encryption-key common
{%     endif %}
{%     if management_security.password.encryption_reversible is arista.avd.defined() %}
   password encryption reversible {{ management_security.password.encryption_reversible }}
{%     endif %}
{%     if management_security.password.minimum_length is arista.avd.defined %}
   password minimum length {{ management_security.password.minimum_length }}
{%     endif %}
{%     for ssl_profile in management_security.ssl_profiles | arista.avd.natural_sort %}
   ssl profile {{ ssl_profile.name }}
{%         if ssl_profile.tls_versions is arista.avd.defined %}
      tls versions {{ ssl_profile.tls_versions }}
{%         endif  %}
{%         if ssl_profile.cipher_list is arista.avd.defined %}
      cipher-list {{ ssl_profile.cipher_list }}
{%         endif  %}
{%         if ssl_profile.certificate is arista.avd.defined %}
      certificate {{ ssl_profile.certificate.file }} key {{ ssl_profile.certificate.key }}
{%         endif  %}
{%     endfor %}
{% endif %}
{# eos - dot1x global #}
{% if dot1x is arista.avd.defined %}
!
{%     if dot1x.system_auth_control is arista.avd.defined(true) %}
dot1x system-auth-control
{%     endif %}
{%     if dot1x.protocol_lldp_bypass is arista.avd.defined(true) %}
dot1x protocol lldp bypass
{%     endif %}
{%     if dot1x.dynamic_authorization is arista.avd.defined(true) %}
dot1x dynamic-authorization
{%     endif %}
{% endif %}
{# Management SSH #}
{% if management_ssh is arista.avd.defined %}
!
management ssh
{%     if management_ssh.access_groups is arista.avd.defined %}
{%         for access_group in management_ssh.access_groups %}
{%             set acl_cli = "ip access-group " ~ access_group.name %}
{%             if access_group.vrf is arista.avd.defined %}
{%                 set acl_cli = acl_cli ~ " vrf " ~ access_group.vrf  %}
{%             endif %}
{%             set acl_cli = acl_cli ~ " in" %}
   {{ acl_cli }}
{%         endfor %}
{%     endif %}
{%     if management_ssh.ipv6_access_groups is arista.avd.defined %}
{%         for ipv6_access_group in management_ssh.ipv6_access_groups %}
{%             set ipv6_acl_cli = "ipv6 access-group " ~ ipv6_access_group.name %}
{%             if ipv6_access_group.vrf is arista.avd.defined %}
{%                 set ipv6_acl_cli = ipv6_acl_cli ~ " vrf " ~ ipv6_access_group.vrf  %}
{%             endif %}
{%             set ipv6_acl_cli = ipv6_acl_cli ~ " in" %}
   {{ ipv6_acl_cli }}
{%         endfor %}
{%     endif %}
{%     if management_ssh.idle_timeout is arista.avd.defined %}
   idle-timeout {{ management_ssh.idle_timeout }}
{%     endif %}
{%     if management_ssh.connection.limit is arista.avd.defined %}
   connection limit {{ management_ssh.connection.limit }}
{%     endif %}
{%     if management_ssh.connection.per_host is arista.avd.defined %}
   connection per-host {{ management_ssh.connection.per_host }}
{%     endif %}
{%     if management_ssh.cipher is arista.avd.defined %}
   cipher {{ management_ssh.cipher | join(" ") }}
{%     endif %}
{%     if management_ssh.key_exchange is arista.avd.defined %}
   key-exchange {{ management_ssh.key_exchange | join(" ") }}
{%     endif %}
{%     if management_ssh.mac is arista.avd.defined %}
   mac {{ management_ssh.mac | join(" ") }}
{%     endif %}
{%     if management_ssh.hostkey.server is arista.avd.defined %}
   hostkey server {{ management_ssh.hostkey.server | join(" ") }}
{%     endif %}
{%     if management_ssh.enable is arista.avd.defined(false) %}
   shutdown
{%     elif management_ssh.enable is arista.avd.defined(true) %}
   no shutdown
{%     endif %}
{%     if management_ssh.log_level is arista.avd.defined %}
   log-level {{ management_ssh.log_level }}
{%     endif %}
{%     for vrf in management_ssh.vrfs | arista.avd.natural_sort('name') %}
   !
   vrf {{ vrf.name }}
{%         if vrf.enable is arista.avd.defined(true) %}
      no shutdown
{%         elif vrf.enable is arista.avd.defined(false) %}
      shutdown
{%         endif %}
{%     endfor %}
{% endif %}
{# Management tech-support #}
{% if management_tech_support is arista.avd.defined %}
!
management tech-support
{%     if management_tech_support.policy_show_tech_support is arista.avd.defined %}
   policy show tech-support
{%         if management_tech_support.policy_show_tech_support.exclude_commands is arista.avd.defined %}
{%             for exclude_command in management_tech_support.policy_show_tech_support.exclude_commands %}
{%                 set exclude_cli = "" %}
{%                 if exclude_command.type is arista.avd.defined('json') %}
{%                     set exclude_cli = "json " %}
{%                 endif %}
{%                 set exclude_cli = exclude_cli ~ exclude_command.command %}
      exclude command {{ exclude_cli }}
{%             endfor %}
{%         endif %}
{%         if management_tech_support.policy_show_tech_support.include_commands is arista.avd.defined %}
{%             for include_command in management_tech_support.policy_show_tech_support.include_commands %}
      include command {{ include_command.command }}
{%             endfor %}
{%         endif %}
   exit
{%     endif %}
{% endif %}
{% if eos_cli is arista.avd.defined %}
!
{{ eos_cli }}
{% endif %}
{# eos - Custom templates #}
{% if custom_templates is arista.avd.defined %}
!
{%     for custom_template in custom_templates %}
{%         include custom_template %}

{%     endfor %}
{% endif %}
{# end #}
{% if not generate_default_config is arista.avd.defined(false) %}
!
end
{% endif %}
