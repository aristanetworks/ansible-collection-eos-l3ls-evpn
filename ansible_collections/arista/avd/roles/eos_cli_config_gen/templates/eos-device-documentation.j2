# {{ inventory_hostname }}
# Table of Contents

<!-- toc -->
<!-- toc -->
# Management
{% if management_interfaces is arista.avd.defined %}

## Management Interfaces

### Management Interfaces Summary

#### IPv4

| Management Interface | description | Type | VRF | IP Address | Gateway |
| -------------------- | ----------- | ---- | --- | ---------- | ------- |
{%     for management_interface in management_interfaces | arista.avd.natural_sort('name') %}
{%         set vrf = management_interface.vrf | arista.avd.default('default') %}
| {{ management_interface.name }} | {{ management_interface.description }} | {{ management_interface.type | arista.avd.default('oob') }} | {{ vrf }} | {{ management_interface.ip_address }} | {{ management_interface.gateway }} |
{%     endfor %}

#### IPv6

| Management Interface | description | Type | VRF | IPv6 Address | IPv6 Gateway |
| -------------------- | ----------- | ---- | --- | ------------ | ------------ |
{%     for management_interface in management_interfaces | arista.avd.natural_sort('name') %}
{%         set vrf = management_interface.vrf | arista.avd.default('default') %}
{%         set ipv6 = management_interface.ipv6_address | arista.avd.default('-') %}
{%         set ipv6_gateway = management_interface.ipv6_gateway | arista.avd.default('-') %}
| {{ management_interface.name }} | {{ management_interface.description }} | {{ management_interface.type | arista.avd.default('oob') }} | {{ vrf }} | {{ ipv6 }}  | {{ ipv6_gateway }} |
{%     endfor %}

### Management Interfaces Device Configuration

```eos
{%     include 'eos/management-interfaces.j2' %}
```
{% endif %}
{% if dns_domain is defined and dns_domain is not none %}

## DNS Domain

### DNS domain: {{ dns_domain }}

### DNS Domain Device Configuration

```eos
{%     include 'eos/dns-domain.j2' %}
!
```
{% endif %}
{% if domain_list is defined and domain_list is not none %}

## Domain-list

### Domain-list:
{%     for domain in domain_list | sort %}
 - {{ domain }}
{%     endfor %}

### Domain-list Device Configuration

```eos
{%     include 'eos/domain-list.j2' %}
!
```
{% endif %}
{% if name_server is defined and name_server is not none %}

## Name Servers

### Name Servers Summary

| Name Server | Source VRF |
| ----------- | ---------- |
{%     for node in name_server.nodes %}
| {{ node }} | {{ name_server.source.vrf | arista.avd.default('-') }} |
{%     endfor %}

### Name Servers Device Configuration

```eos
{%     include 'eos/name-servers.j2' %}
```
{% endif %}
{% if ip_domain_lookup is arista.avd.defined %}

## Domain Lookup

### DNS Domain Lookup Summary

| Source interface | vrf |
| ---------------- | --- |
{%     for source in ip_domain_lookup.source_interfaces | arista.avd.natural_sort('name') %}
{%         set vrf = source.vrf | arista.avd.default('-') %}
| {{ source.name }} | {{ vrf }} |
{%     endfor %}

### DNS Domain Lookup Device Configuration

```eos
{%     include 'eos/domain-lookup.j2' %}
```
{% endif %}
{# Clock #}
{% if clock is arista.avd.defined %}

## Clock Settings
{%     if clock.timezone is arista.avd.defined %}

### Clock Timezone Settings

Clock Timezone is set to **{{ clock.timezone }}**.
{%     endif %}

### Clock Configuration

```eos
{%     include 'eos/clock.j2' %}
```
{% endif %}
{# ntp and ntp_server is merged into a single documentation file since these data models will merge soon #}
{% if ntp is arista.avd.defined %}

## NTP

### NTP Summary
{%     if ntp.local_interface.name is arista.avd.defined %}

#### NTP Local Interface

| Interface | VRF |
| --------- | --- |
| {{ ntp.local_interface.name }} | {{ ntp.local_interface.vrf | arista.avd.default('-') }} |
{%     endif %}
{%     if ntp.servers is arista.avd.defined %}

#### NTP Servers

| Server | VRF | Preferred | Burst | iBurst | Version | Min Poll | Max Poll | Local-interface | Key |
| ------ | --- | --------- | ----- | ------ | ------- | -------- | -------- | --------------- | --- |
{%         for server in ntp.servers | arista.avd.natural_sort('name') %}
{%             if server.name is arista.avd.defined %}
{%                 set r = namespace() %}
{%                 set r.s = server.name %}
{%                 set r.v = server.vrf | arista.avd.default('-') %}
{%                 set r.p = server.preferred | arista.avd.default('-') %}
{%                 set r.b = server.burst | arista.avd.default('-') %}
{%                 set r.i = server.iburst | arista.avd.default('-') %}
{%                 set r.vv = server.version | arista.avd.default('-') %}
{%                 set r.mi = server.minpoll | arista.avd.default('-') %}
{%                 set r.ma = server.maxpoll | arista.avd.default('-') %}
{%                 set r.l = server.local_interface | arista.avd.default('-') %}
{%                 set r.k = server.key | arista.avd.default('-') %}
| {{ r.s }} | {{ r.v }} | {{ r.p }} | {{ r.b }} | {{ r.i }} | {{ r.vv }} | {{ r.mi }} | {{ r.ma }} | {{ r.l }} | {{ r.k }} |
{%             endif %}
{%         endfor %}
{%     endif %}
{%     if ntp.authenticate is arista.avd.defined
          or ntp.trusted_keys is arista.avd.defined
          or ntp.authentication_keys is arista.avd.defined %}

#### NTP Authentication
{%         if ntp.authenticate_servers_only is arista.avd.defined(true) %}

- Authentication enabled (Servers only)
{%         elif ntp.authenticate is arista.avd.defined(true) %}

- Authentication enabled
{%         endif %}
{%         if ntp.trusted_keys is arista.avd.defined %}

- Trusted Keys: {{ ntp.trusted_keys }}
{%         endif %}
{%     endif %}
{%     if ntp.authentication_keys is arista.avd.defined %}

#### NTP Authentication Keys

| ID | Algoritm |
| -- | -------- |
{%         for authentication_key in ntp.authentication_keys | arista.avd.natural_sort('id') %}
{%             if authentication_key.id is arista.avd.defined and
                  authentication_key.key is arista.avd.defined and
                  authentication_key.hash_algorithm is arista.avd.defined %}
| {{ authentication_key.id }} | {{ authentication_key.hash_algorithm }} |
{%             endif %}
{%         endfor %}
{%     endif %}

### NTP Device Configuration

```eos
{%     include 'eos/ntp.j2' %}
```
{% endif %}
{% if ptp is defined and ptp is not none %}

## PTP

### PTP Summary

| Clock ID | Source IP | Priority 1 | Priority 2 | TTL | Domain | Mode | Forward Unicast |
| -------- | --------- | ---------- | ---------- | --- | ------ | ---- | --------------- |
{%     set clock_id = ptp.clock_identity | arista.avd.default('-') %}
{%     set sip = ptp.source.ip | arista.avd.default('-') %}
{%     set pri1 = ptp.priority1 | arista.avd.default('-') %}
{%     set pri2 = ptp.priority2 | arista.avd.default('-') %}
{%     set ttl = ptp.ttl | arista.avd.default('-') %}
{%     set domain = ptp.domain | arista.avd.default('-') %}
{%     set mode = ptp.mode | arista.avd.default('-') %}
{%     set forward_unicast = ptp.forward_unicast | arista.avd.default('-') %}
| {{ clock_id }} | {{ sip }} | {{ pri1 }} | {{ pri2 }} | {{ ttl }} | {{ domain }} | {{ mode }} | {{ forward_unicast }} |

### PTP Device Configuration

```eos
{%     include 'eos/ptp.j2' %}
```
{% endif %}
{% if system.control_plane is arista.avd.defined %}

## System Control-Plane
{%     if system.control_plane.tcp_mss.ipv4 is arista.avd.defined or system.control_plane.tcp_mss.ipv6 is arista.avd.defined %}

#### TCP MSS Ceiling

| Protocol | Segment Size |
| -------- | -------------|
{%         if system.control_plane.tcp_mss.ipv4 is arista.avd.defined %}
| IPv4 | {{ system.control_plane.tcp_mss.ipv4 }} |
{%         endif %}
{%         if system.control_plane.tcp_mss.ipv6 is arista.avd.defined %}
| IPv6 | {{ system.control_plane.tcp_mss.ipv6 }} |
{%         endif %}
{%     endif %}
{%     if system.control_plane.ipv4_access_groups is arista.avd.defined or system.control_plane.ipv6_access_groups is arista.avd.defined %}

#### Control-Plane Access-Groups

| Protocol | VRF | Access-list |
| -------- | --- | ------------|
{#         IPv4 Access-groups #}
{%         for acl_set in system.control_plane.ipv4_access_groups | arista.avd.natural_sort %}
| IPv4 | {{ acl_set.vrf | arista.avd.default('default') }} | {{ acl_set.acl_name }} |
{%         endfor %}
{#         IPv6 Access-groups #}
{%         for acl_set in system.control_plane.ipv6_access_groups | arista.avd.natural_sort %}
| IPv6 | {{ acl_set.vrf | arista.avd.default('default') }} | {{ acl_set.acl_name }} |
{%         endfor %}
{%     endif %}

### System Control-Plane Configuration

```eos
{%     include 'eos/system-control-plane.j2' %}
```
{% endif %}
{# Management SSH #}
{% if management_ssh is arista.avd.defined %}

## Management SSH

{%     if management_ssh.access_groups is arista.avd.defined %}
### IPv4 ACL

| IPv4 ACL | VRF |
| -------- | --- |
{%         for acl in management_ssh.access_groups %}
| {{ acl.name }} | {{ acl.vrf | arista.avd.default('-') }} |
{%         endfor %}
{%     endif %}
{%     if management_ssh.ipv6_access_groups is arista.avd.defined %}

### IPv6 ACL

| IPv6 ACL | VRF |
| -------- | --- |
{%         for acl in management_ssh.ipv6_access_groups %}
| {{ acl.name }} | {{ acl.vrf | arista.avd.default('-') }} |
{%         endfor %}
{%     endif %}

{%     set ssh = namespace(enable=true) %}
{%     if management_ssh.enable is arista.avd.defined %}
{%         set ssh.enable=management_ssh.enable %} {#enable takes de value of the variable if defined. By default is set to true#}
{%     endif %}
### SSH timeout and management

| Idle Timeout | SSH Management |
| ------------ | -------------- |
{%     if ssh.enable %}
{%         set ssh = 'Enabled' %}
{%     else %}
{%         set ssh = 'Disabled' %}
{%     endif %}
| {{ management_ssh.idle_timeout | arista.avd.default('default') }} | {{ ssh }} |

### Max number of SSH sessions limit and per-host limit

| Connection Limit | Max from a single Host |
| ---------------- | ---------------------- |
| {{ management_ssh.connection.limit | arista.avd.default('-') }} | {{ management_ssh.connection.per_host | arista.avd.default('-') }} |

### Ciphers and algorithms

| Ciphers | Key-exchange methods | MAC algorithms | Hostkey server algorithms |
|---------|----------------------|----------------|---------------------------|
| {{ management_ssh.cipher | arista.avd.default(['default']) | join(", ") }} | {{ management_ssh.key_exchange | arista.avd.default(['default']) | join(", ") }} | {{ management_ssh.mac | arista.avd.default(['default']) | join(", ") }} | {{ management_ssh.hostkey.server | arista.avd.default(['default']) | join(", ") }} |

{%     if management_ssh.vrfs is arista.avd.defined %}
### VRFs

| VRF | Status |
| --- | ------ |
{%         for vrf in management_ssh.vrfs | arista.avd.natural_sort('name') %}
{%             if vrf.enable %}
{%                 set status = 'Enabled' %}
{%             else %}
{%                 set status = 'Disabled' %}
{%             endif %}
| {{ vrf.name }} | {{ status }} |
{%         endfor %}
{%     endif %}

### Management SSH Configuration

```eos
{%     include 'eos/management-ssh.j2' %}
```
{% endif %}
{# Management Tech-Support #}
{% if management_tech_support is arista.avd.defined %}

## Management Tech-Support
{%     if management_tech_support.policy_show_tech_support is arista.avd.defined %}

### Policy
{%         if management_tech_support.policy_show_tech_support.exclude_commands is arista.avd.defined %}

#### Exclude Commands

| Command | Type |
| ------- | ---- |
{%             if management_tech_support.policy_show_tech_support.exclude_commands is arista.avd.defined %}
{%                 for exclude_command in management_tech_support.policy_show_tech_support.exclude_commands %}
| {{ exclude_command.command | replace('|', '\|') }} | {{ exclude_command.type | arista.avd.default('text') }} |
{%                 endfor %}
{%             endif %}
{%         endif %}
{%         if management_tech_support.policy_show_tech_support.include_commands is arista.avd.defined %}

#### Include Commands

| Command |
| ------- |
{%             if management_tech_support.policy_show_tech_support.include_commands is arista.avd.defined %}
{%                 for include_command in management_tech_support.policy_show_tech_support.include_commands %}
| {{ include_command.command | replace('|', '\|') }} |
{%                 endfor %}
{%             endif %}
{%         endif %}
{%     endif %}

### Policy Configuration

```eos
{%     include 'eos/management-tech-support.j2' %}
```
{% endif %}
{% if ip_ssh_client_source_interfaces is arista.avd.defined %}

## IP SSH Client Source Interfaces

### IP SSH Client Source Interfaces

| VRF | Source Interface Name |
| --- | --------------- |
{%     for ip_ssh_client_source_interface in ip_ssh_client_source_interfaces | arista.avd.natural_sort %}
{%         if ip_ssh_client_source_interface.name is arista.avd.defined %}
| {{ ip_ssh_client_source_interface.vrf | arista.avd.default('default') }} | {{ ip_ssh_client_source_interface.name | capitalize }} |
{%         endif %}
{%     endfor %}

### IP SSH Client Source Interfaces Device Configuration

```eos
{%     include 'eos/ip-ssh-client-source-interfaces.j2' %}
```
{% endif %}
{# Management API GNMI #}
{% if management_api_gnmi is defined and management_api_gnmi is not none %}

## Management API GNMI

### Management API GNMI Summary
{# legacy table view that will be deprecated in future releases #}
{%     if management_api_gnmi.enable_vrfs is defined %}
{%         if management_api_gnmi.octa is defined  %}
{%             set octa = 'enabled' %}
{%         else %}
{%             set octa = 'disabled' %}
{%         endif %}

| VRF with GNMI | OCTA |
| ------------- | ---- |
{%         for vrf in management_api_gnmi.enable_vrfs | arista.avd.natural_sort %}
| {{ vrf }} | {{ octa }} |
{%         endfor %}
{%     endif %}
{# new table view using the new flags #}
{%     if management_api_gnmi.transport is arista.avd.defined %}

| Transport | SSL Profile | VRF | Notification Timestamp | ACL |
| --------- | ----------- | --- | ---------------------- | --- |
{%         if management_api_gnmi.transport.grpc is arista.avd.defined %}
{%             for transport in management_api_gnmi.transport.grpc %}
{%                 if transport.name is arista.avd.defined %}
{%                     set transport_name = transport.name %}
{%                     set ssl_profile = transport.ssl_profile | arista.avd.default('-') %}
{%                     set vrf = transport.vrf | arista.avd.default('-') %}
{%                     set notif = transport.notification_timestamp | arista.avd.default('last-change-time') %}
{%                     set acl = transport.ip_access_group | arista.avd.default('-') %}
| {{ transport_name }} | {{ ssl_profile }} | {{ vrf }} | {{ notif }} | {{ acl }} |
{%                 endif %}
{%             endfor %}
{%         endif %}
{%     endif %}
{%     if management_api_gnmi.provider is arista.avd.defined %}

Provider {{ management_api_gnmi.provider }} is configured.
{%     endif %}

### Management API gnmi configuration

```eos
{%     include 'eos/management-api-gnmi.j2' %}
```
{% endif %}
{# Management CVX #}
{% if management_cvx is arista.avd.defined %}

## Management CVX Summary

| Shutdown | CVX Servers |
| -------- | ----------- |
{%     set shut = management_cvx.shutdown | arista.avd.default('-') %}
{%     set servers = management_cvx.server_hosts | arista.avd.default('-') | join(', ') %}
| {{ shut }} | {{ servers }} |

### Management CVX configuration

```eos
{%     include 'eos/management-cvx.j2' %}
```
{% endif %}
{# Management Console #}
{% if management_console is arista.avd.defined %}

## Management Console
{%     if management_console.idle_timeout is arista.avd.defined %}

### Management Console Timeout

Management Console Timeout is set to **{{ management_console.idle_timeout }}** minutes.
{%     endif %}

### Management Console Configuration

```eos
{%     include 'eos/management-console.j2' %}
```
{% endif %}
{# Management API HTTP #}
{% if management_api_http is arista.avd.defined %}

## Management API HTTP

### Management API HTTP Summary

| HTTP | HTTPS | Default Services |
| ---- | ----- | ---------------- |
| {{ management_api_http.enable_http | arista.avd.default(false) }} | {{ management_api_http.enable_https | arista.avd.default(true) }} | {{ management_api_http.default_services | arista.avd.default('-') }} |
{%     if management_api_http.enable_https is arista.avd.defined(true) and management_api_http.https_ssl_profile is arista.avd.defined %}

Management HTTPS is using the SSL profile {{ management_api_http.https_ssl_profile }}
{%     endif %}
{%     if management_api_http.enable_vrfs is arista.avd.defined %}

### Management API VRF Access

| VRF Name | IPv4 ACL | IPv6 ACL |
| -------- | -------- | -------- |
{%         for vrf in management_api_http.enable_vrfs | arista.avd.natural_sort('name') %}
| {{ vrf.name }} | {{ vrf.access_group | arista.avd.default('-') }} | {{ vrf.ipv6_access_group | arista.avd.default('-') }} |
{%         endfor %}
{%     endif %}
{%     if management_api_http.protocol_https_certificate.certificate is arista.avd.defined and management_api_http.protocol_https_certificate.private_key is arista.avd.defined %}

HTTPS certificate and private key are configured.
{%     endif %}

### Management API HTTP Configuration

```eos
{%     include 'eos/management-api-http.j2' %}
```
{% endif %}
{# Management API Models #}
{% if management_api_models is arista.avd.defined %}

## Management API Models

### Management API Models Summary

| Provider | Path | Disabled |
| -------- | ---- | ------- |
{%     if management_api_models.providers is arista.avd.defined %}
{%         for provider in management_api_models.providers | arista.avd.natural_sort('name') %}
{%             if provider.paths is arista.avd.defined and provider.name | lower in ['smash', 'sysdb'] %}
{%                 for path in provider.paths | arista.avd.natural_sort('path') %}
{%                     set disabled = path.disabled | arista.avd.default(false) %}
| {{ provider.name }} | {{ path.path }} | {{ disabled }} |
{%                 endfor %}
{%             endif %}
{%         endfor %}
{%     endif %}

### Management API Models Configuration

```eos
{%     include 'eos/management-api-models.j2' %}
```
{% endif %}
{% if ip_http_client_source_interfaces is defined and ip_http_client_source_interfaces is not none %}

## IP HTTP Client Source Interfaces

### IP HTTP Client Source Interfaces

| VRF | Source Interface Name |
| --- | --------------- |
{%     for ip_http_client_source_interface in ip_http_client_source_interfaces | arista.avd.natural_sort %}
| {{ ip_http_client_source_interface.vrf | arista.avd.default('default') }} | {{ ip_http_client_source_interface.name }} |
{%     endfor %}

### IP HTTP Client Source Interfaces Device Configuration

```eos
{%     include 'eos/ip-http-client-source-interfaces.j2' %}
```
{% endif %}
{# CVX #}
{% if cvx is arista.avd.defined %}

# CVX
{%     if cvx.shutdown is arista.avd.defined(true) %}

CVX is disabled
{%     elif cvx.shutdown is arista.avd.defined(false) %}

CVX is enabled
{%         if cvx.services is arista.avd.defined %}

## CVX services

| Service | Enabled | Settings |
| ------- | ------- | -------- |
{%             if cvx.services.mcs is arista.avd.defined %}
{%                 if cvx.services.mcs.shutdown is arista.avd.defined %}
{%                     set enabled = not cvx.services.mcs.shutdown %}
{%                 else %}
{%                     set enabled = '-' %}
{%                 endif %}
{%                 set settings = [] %}
{%                 if cvx.services.mcs.redis.password is arista.avd.defined %}
{%                     do settings.append("Redis Password Set") %}
{%                 endif %}
| MCS | {{ enabled }} | {{ settings | join("<br>") }} |
{%             endif %}
{%         endif %}
{%     endif %}

## CVX configuration

```eos
{%     include 'eos/cvx.j2' %}
```
{% endif %}

# Authentication
{# eos - local users #}
{% if local_users is arista.avd.defined %}

## Local Users

### Local Users Summary

| User | Privilege | Role |
| ---- | --------- | ---- |
{%     for local_user in local_users | arista.avd.natural_sort('name') %}
{%         set role = local_user.role | arista.avd.default('-') %}
| {{ local_user.name }} | {{ local_user.privilege }} | {{ role }} |
{%     endfor %}

### Local Users Device Configuration

```eos
{%     include 'eos/local-users.j2' %}
```
{% endif %}
{% if roles is arista.avd.defined %}

## Roles

### Roles Summary
{%     for role in roles | arista.avd.natural_sort %}

#### Role {{ role.name }}

| Sequence | Action | Mode | Command |
| -------- | ------ | ---- | ------- |
{%         for sequence in role.sequence_numbers | arista.avd.default([]) %}
{%             if sequence.action is arista.avd.defined and sequence.command is arista.avd.defined %}
| {{ sequence.sequence | arista.avd.default('-') }} | {{ sequence.action }} | {{ sequence.mode | arista.avd.default('-') }} | {{ sequence.command }} |
{%             endif %}
{%         endfor %}
{%     endfor %}

### Roles Device Configuration

```eos
{%     include 'eos/roles.j2' %}
```
{% endif %}
{% if enable_password is arista.avd.defined %}

## Enable Password

{%     if enable_password.key is arista.avd.defined  %}
{%         if enable_password.hash_algorithm is arista.avd.defined("md5")  %}
md5 encrypted enable password is configured
{%         elif enable_password.hash_algorithm is arista.avd.defined("sha512")  %}
sha512 encrypted enable password is configured
{%         endif %}
### Enable password configuration

```eos
{%         include 'eos/enable-password.j2' %}
!
```
{%     endif %}
{% endif %}
{# Management defaults #}
{% if management_defaults.secret.hash is arista.avd.defined %}

## Management defaults

Default secret hash is set to {{ management_defaults.secret.hash }}

### Management defaults Configuration

```eos
{%     include 'eos/management-defaults.j2' %}
```
{% endif %}
{% if tacacs_servers.hosts is defined and tacacs_servers.hosts is not none %}

## TACACS Servers

### TACACS Servers

| VRF | TACACS Servers | Single-Connection |
| --- | -------------- | ----------------- |
{%     for host in tacacs_servers.hosts %}
{%         set vrf = host.vrf | arista.avd.default('default') %}
| {{ vrf }} | {{ host.host }} | {{ host.single_connection | default(false) }} |
{%     endfor %}

{%     if tacacs_servers.policy_unknown_mandatory_attribute_ignore is arista.avd.defined and tacacs_servers.policy_unknown_mandatory_attribute_ignore == true %}
Policy unknown-mandatory-attribute ignore is configured

{%     endif %}
### TACACS Servers Device Configuration

```eos
{%     include 'eos/tacacs-servers.j2' %}
```
{% endif %}
{% if ip_tacacs_source_interfaces is defined and ip_tacacs_source_interfaces is not none %}

## IP TACACS Source Interfaces

### IP TACACS Source Interfaces

| VRF | Source Interface Name |
| --- | --------------- |
{%     for ip_tacacs_source_interface in ip_tacacs_source_interfaces %}
{%         set vrf = ip_tacacs_source_interface.vrf | arista.avd.default('default') %}
| {{ vrf }} | {{ ip_tacacs_source_interface.name }} |
{%     endfor %}

### IP TACACS Source Interfaces Device Configuration

```eos
{%     include 'eos/ip-tacacs-source-interfaces.j2' %}
```
{% endif %}
{% if radius_servers is defined and radius_servers is not none %}

## RADIUS Servers

### RADIUS Servers

| VRF | RADIUS Servers |
| --- | ---------------|
{%     for radius_server in radius_servers %}
{%         set vrf = radius_server.vrf | arista.avd.default('default') %}
| {{ vrf }} | {{ radius_server.host }} |
{%     endfor %}

### RADIUS Servers Device Configuration

```eos
{%     include 'eos/radius-servers.j2' %}
```
{% endif %}
{% if ip_radius_source_interfaces is defined and ip_radius_source_interfaces is not none %}

## IP RADIUS Source Interfaces

### IP RADIUS Source Interfaces

| VRF | Source Interface Name |
| --- | --------------- |
{%     for ip_radius_source_interface in ip_radius_source_interfaces | arista.avd.natural_sort %}
| {{ ip_radius_source_interface.vrf | arista.avd.default('default') }} | {{ ip_radius_source_interface.name }} |
{%     endfor %}

### IP SOURCE Source Interfaces Device Configuration

```eos
{%     include 'eos/ip-radius-source-interfaces.j2' %}
```
{% endif %}
{% if aaa_server_groups is defined and aaa_server_groups is not none %}

## AAA Server Groups

### AAA Server Groups Summary

| Server Group Name | Type  | VRF | IP address |
| ------------------| ----- | --- | ---------- |
{%     for aaa_server_group in aaa_server_groups %}
{%         for server in aaa_server_group.servers %}
{%             set vrf = server.vrf | arista.avd.default('default') %}
| {{ aaa_server_group.name }} | {{ aaa_server_group.type }} | {{ vrf }} | {{ server.server }} |
{%         endfor %}
{%     endfor %}

### AAA Server Groups Device Configuration

```eos
{%     include 'eos/aaa-server-groups.j2' %}
```
{% endif %}
{% if aaa_authentication is arista.avd.defined %}

## AAA Authentication

### AAA Authentication Summary

| Type | Sub-type | User Stores |
| ---- | -------- | ---------- |
{%     if aaa_authentication.login.default is arista.avd.defined %}
| Login | default | {{ aaa_authentication.login.default }} |
{%     endif %}
{%     if aaa_authentication.login.console is arista.avd.defined %}
| Login | console | {{ aaa_authentication.login.console }} |
{%     endif %}
{%     if aaa_authentication.policies is arista.avd.defined %}
{%         if aaa_authentication.policies.on_failure_log is arista.avd.defined(true) %}

AAA Authentication on-failure log has been enabled
{%         endif %}
{%         if aaa_authentication.policies.on_success_log is arista.avd.defined(true) %}

AAA Authentication on-success log has been enabled
{%         endif %}
{%         if aaa_authentication.policies.local is defined %}
{%             if aaa_authentication.policies.local.allow_nopassword is arista.avd.defined(true) %}

Policy local allow-nopassword-remote-login has been enabled.
{%             endif %}
{%         endif %}
{%         if aaa_authentication.policies.lockout.failure is arista.avd.defined and aaa_authentication.policies.lockout.duration is arista.avd.defined %}

Policy lockout has been enabled. After **{{ aaa_authentication.policies.lockout.failure }}** failed login attempts within **{{ aaa_authentication.policies.lockout.window | arista.avd.default('1440') }}** minutes, you'll be locked out for **{{ aaa_authentication.policies.lockout.duration }}** minutes.
{%         endif %}
{%     endif %}

### AAA Authentication Device Configuration

```eos
{%     include 'eos/aaa-authentication.j2' %}
!
```
{% endif %}
{% if aaa_authorization is arista.avd.defined %}

## AAA Authorization

### AAA Authorization Summary

| Type | User Stores |
| ---- | ----------- |
{%     if aaa_authorization.exec.default is arista.avd.defined %}
| Exec | {{ aaa_authorization.exec.default }} |
{%     endif %}
{%     if aaa_authorization.config_commands is arista.avd.defined(true) %}

Authorization for configuration commands is enabled.
{%     else %}

Authorization for configuration commands is disabled.
{%     endif %}
{%     if aaa_authorization.serial_console is arista.avd.defined(true) %}

Authorization for serial console is enabled.
{%     endif %}
{%     if aaa_authorization.commands.privilege is arista.avd.defined or aaa_authorization.commands.all_default is arista.avd.defined %}

### AAA Authorization Privilege Levels Summary

| Privilege Level | User Stores |
| --------------- | ----------- |
{%         if aaa_authorization.commands.all_default is arista.avd.defined %}
| all | {{ aaa_authorization.commands.all_default }} |
{%         endif %}
{%         for command_level in aaa_authorization.commands.privilege | arista.avd.natural_sort %}
{%             if command_level.level is arista.avd.defined and command_level.default is arista.avd.defined %}
| {{ command_level.level }} | {{ command_level.default }} |
{%             endif %}
{%         endfor %}
{%     endif %}

### AAA Authorization Device Configuration

```eos
{%     include 'eos/aaa-authorization.j2' %}
!
```
{% endif %}
{% if aaa_accounting is arista.avd.defined %}

## AAA Accounting

### AAA Accounting Summary

| Type | Commands | Record type | Group | Logging |
| ---- | -------- | ----------- | ----- | ------- |
{%     if aaa_accounting.exec.console.type is arista.avd.defined and aaa_accounting.exec.console.group is arista.avd.defined %}
| Exec - Console | - | {{ aaa_accounting.exec.console.type }} | {{ aaa_accounting.exec.console.group }} | - |
{%     endif %}
{%     if aaa_accounting.commands.console is arista.avd.defined %}
{%         for command_console in aaa_accounting.commands.console %}
{%             if command_console.commands is arista.avd.defined and command_console.type is arista.avd.defined %}
{%                 set group = command_console.group | arista.avd.default(" - ") %}
{%                 set logging = command_console.logging | arista.avd.default("False") %}
| Commands - Console | {{ command_console.commands }} | {{ command_console.type }} | {{ group }} | {{ logging }} |
{%             endif %}
{%         endfor %}
{%     endif %}
{%     if aaa_accounting.exec.default.type is arista.avd.defined and aaa_accounting.exec.default.group is arista.avd.defined %}
| Exec - Default | - | {{ aaa_accounting.exec.default.type }} | {{ aaa_accounting.exec.default.group }} | - |
{%     endif %}
{%     if aaa_accounting.system.default.type is arista.avd.defined and aaa_accounting.system.default.group is arista.avd.defined  %}
| System - Default | - | {{ aaa_accounting.system.default.type }} | {{ aaa_accounting.system.default.group }} | - |
{%     endif %}
{%     if aaa_accounting.commands.default is arista.avd.defined %}
{%         for command_default in aaa_accounting.commands.default %}
{%             if command_default.logging is arista.avd.defined(true) %}
{%                 set logging = 'True' %}
{%             else %}
{%                 set logging = 'False' %}
{%             endif %}
| Commands - Default | {{ command_default.commands }} | {{ command_default.type }} | {{ command_default.group | arista.avd.default('-') }} | {{ logging }} |
{%         endfor %}
{%     endif %}

### AAA Accounting Device Configuration

```eos
{%     include 'eos/aaa-accounting.j2' %}
```
{% endif %}
{% if management_security is arista.avd.defined %}

# Management Security

## Management Security Summary

| Settings | Value |
| -------- | ----- |
{%     if management_security.entropy_source is arista.avd.defined %}
| Entropy source | {{ management_security.entropy_source }} |
{%     endif %}
{%     if management_security.password.encryption_key_common is arista.avd.defined %}
| Common password encryption key | {{ management_security.password.encryption_key_common }} |
{%     endif %}
{%     if management_security.password.encryption_reversible is arista.avd.defined %}
| Reversible password encryption | {{ management_security.password.encryption_reversible }} |
{%     endif %}
{%     if management_security.password.minimum_length is arista.avd.defined %}
| Minimum password length | {{ management_security.password.minimum_length }} |
{%     endif %}
{%     if management_security.ssl_profiles is arista.avd.defined %}

## Management Security SSL Profiles

| SSL Profile Name | TLS protocol accepted | Certificate filename | Key filename | Cipher List |
| ---------------- | --------------------- | -------------------- | ------------ | ----------- |
{%         for ssl_profile in management_security.ssl_profiles | arista.avd.natural_sort %}
| {{ ssl_profile.name | arista.avd.default('-') }} | {{ ssl_profile.tls_versions | arista.avd.default('-') }} | {{ ssl_profile.certificate.file | arista.avd.default('-') }} | {{ ssl_profile.certificate.key | arista.avd.default('-') }} | {{ ssl_profile.cipher_list | arista.avd.default('-') }} |
{%         endfor %}
{%     endif %}

## Management Security Configuration

```eos
{%     include 'eos/management-security.j2' %}
```
{% endif %}
{% if prompt is arista.avd.defined %}

# Prompt

```eos
{%     include 'eos/prompt.j2' %}
```
{% endif %}
{% if aliases is defined and aliases is not none %}

# Aliases

```eos
{{ aliases }}
!
```
{% endif %}
{% if dhcp_relay is arista.avd.defined %}

# DHCP Relay

## DHCP Relay Summary
{%     if dhcp_relay.tunnel_requests_disabled is arista.avd.defined(true) %}

- DHCP Relay is disabled for tunnelled requests
{%     elif dhcp_relay.tunnel_requests_disabled is arista.avd.defined(false) %}

- DHCP Relay is enabled for tunnelled requests
{%     endif %}
{%     if dhcp_relay.servers is arista.avd.defined %}

| DHCP Relay Servers |
| ------------------ |
{%         for server in dhcp_relay.servers | arista.avd.natural_sort %}
| {{ server }} |
{%         endfor %}
{%     endif %}

## DHCP Relay Configuration

```eos
{%     include 'eos/dhcp-relay.j2' %}
```
{% endif %}
{# System Boot Configuration #}
{% if boot is arista.avd.defined %}

# System Boot Settings
{%     if boot.secret is arista.avd.defined %}
{%         if boot.secret.key is arista.avd.defined %}

## Boot Secret Summary
{%             set method = boot.secret.hash_algorithm | arista.avd.default("sha512") ~ " hashed" %}

- The {{ method }} Aboot password is configured
{%         endif %}
{%     endif %}

## System Boot Configuration

```eos
{%     include 'eos/boot.j2' %}
```
{% endif %}

# Monitoring
{% if daemon_terminattr is arista.avd.defined %}

## TerminAttr Daemon

### TerminAttr Daemon Summary

| CV Compression | CloudVision Servers | VRF | Authentication | Smash Excludes | Ingest Exclude | Bypass AAA |
| -------------- | ------------------- | --- | -------------- | -------------- | -------------- | ---------- |
{%     for cluster in daemon_terminattr.clusters | arista.avd.natural_sort('name') %}
{%         set url = cluster.cvaddrs | arista.avd.default([]) | join(',') %}
{%         if cluster.cvauth.method is arista.avd.defined('key') %}
{%             set auth = 'key,' ~ cluster.cvauth.key | arista.avd.default('') %}
{%         elif cluster.cvauth.method is arista.avd.defined('token') and cluster.cvauth.token_file is arista.avd.defined %}
{%             set auth = 'token,' ~ cluster.cvauth.token_file %}
{%         elif cluster.cvauth.method is arista.avd.defined('token-secure') and cluster.cvauth.token_file is arista.avd.defined %}
{%             set auth = 'token-secure,' ~ cluster.cvauth.token_file %}+
{%         endif %}
{%         if cluster.cvvrf is arista.avd.defined %}
{%             set cvvrf = cluster.cvvrf %}
{%         else %}
{%             set cvvrf = daemon_terminattr.cvvrf | arista.avd.default('-') %}
{%         endif %}
| gzip | {{ url }} | {{ cvvrf }} | {{ auth | arista.avd.default('-') }} | {{ daemon_terminattr.smashexcludes | arista.avd.default('-') }} | {{ daemon_terminattr.ingestexclude | arista.avd.default('-') }} | {{ daemon_terminattr.disable_aaa | arista.avd.default (false) }} |
{%     endfor %}
{%     if daemon_terminattr.cvaddrs is arista.avd.defined %}
{%         set url = daemon_terminattr.cvaddrs | arista.avd.default([]) | join(',') %}
{%         if daemon_terminattr.cvauth.method is arista.avd.defined('key') %}
{%             set auth = 'key,' ~ daemon_terminattr.cvauth.key | arista.avd.default('') %}
{%         elif daemon_terminattr.cvauth.method is arista.avd.defined('token') and daemon_terminattr.cvauth.token_file is arista.avd.defined %}
{%             set auth = 'token,' ~ daemon_terminattr.cvauth.token_file %}
{%         elif daemon_terminattr.cvauth.method is arista.avd.defined('token-secure') and daemon_terminattr.cvauth.token_file is arista.avd.defined %}
{%             set auth = 'token-secure,' ~ daemon_terminattr.cvauth.token_file %}
{%         endif %}
| gzip | {{ url }} | {{ daemon_terminattr.cvvrf | arista.avd.default('-') }} | {{ auth | arista.avd.default('-') }} | {{ daemon_terminattr.smashexcludes | arista.avd.default('-') }} | {{ daemon_terminattr.ingestexclude | arista.avd.default('-') }} | {{ daemon_terminattr.disable_aaa | arista.avd.default (false) }} |
{%     endif %}

### TerminAttr Daemon Device Configuration

```eos
{%     include 'eos/daemon-terminattr.j2' %}
```
{% endif %}
{% if daemons is arista.avd.defined() %}

## Custom daemons

### Custom Daemons Device Configuration

```eos
{%     include 'eos/daemons.j2' %}
```
{% endif %}
{% if logging is arista.avd.defined %}

## Logging

### Logging Servers and Features Summary

| Type | Level |
| -----| ----- |
{%     if logging.console is arista.avd.defined %}
| Console | {{ logging.console }} |
{%     endif %}
{%     if logging.monitor is arista.avd.defined %}
| Monitor | {{ logging.monitor }} |
{%     endif %}
{%     if logging.buffered is arista.avd.defined %}
| Buffer | {{ logging.buffered.level | arista.avd.default('-') }} |
{%     endif %}
{%     if logging.trap is arista.avd.defined %}
| Trap | {{ logging.trap }} |
{%     endif %}
{%     if logging.synchronous is arista.avd.defined() %}
| Synchronous | {{ logging.synchronous.level | arista.avd.default("critical") }} |
{%     endif %}
{%     if logging.format is arista.avd.defined %}

| Format Type | Setting |
| ----------- | ------- |
{%         if logging.format.timestamp is arista.avd.defined %}
| Timestamp | {{ logging.format.timestamp }} |
{%         endif %}
{%         if logging.format.hostname is arista.avd.defined %}
| Hostname | {{ logging.format.hostname }} |
{%         else %}
| Hostname | hostname |
{%         endif %}
{%         if logging.format.sequence_numbers is arista.avd.defined(true) %}
| Sequence-numbers | true |
{%         else %}
| Sequence-numbers | false |
{%         endif %}
{%     endif %}
{%     if logging.vrfs is arista.avd.defined %}

| VRF | Source Interface |
| --- | ---------------- |
{%         if logging.source_interface is arista.avd.defined %}
| - | {{ logging.source_interface }} |
{%         endif %}
{%         for vrf in logging.vrfs | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
{%             if vrf.source_interface is arista.avd.defined %}
| {{ vrf.name }} | {{ vrf.source_interface }} |
{%             endif %}
{%         endfor %}

| VRF | Hosts | Ports | Protocol |
| --- | ----- | ----- | -------- |
{%         for vrf in logging.vrfs | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
{%             if vrf.hosts is arista.avd.defined %}
{%                 for host in vrf.hosts | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
| {{ vrf.name }} | {{ host.name }} | {{ host.ports | arista.avd.default(['Default']) | join(', ') }} | {{ host.protocol | arista.avd.default('UDP') | upper }} |
{%                 endfor %}
{%             endif %}
{%         endfor %}
{%     endif %}
{%     if logging.facility is arista.avd.defined %}

**Syslog facility value:** {{ logging.facility }}
{%     endif %}

### Logging Servers and Features Device Configuration

```eos
{%     include 'eos/logging.j2' %}
```
{% endif %}
{# MCS Client #}
{% if mcs_client is arista.avd.defined %}

## MCS client Summary
{%     if mcs_client.shutdown is arista.avd.defined(true) %}

MCS client is shutdown
{%     elif mcs_client.shutdown is arista.avd.defined(false) %}

MCS client is enabled
{%     endif %}
{%     if mcs_client.cvx_secondary is arista.avd.defined %}

| Secondary CVX cluster | Server Hosts | Enabled |
| --------------------- | ------------ | ------- |
{%         set secondary = mcs_client.cvx_secondary.name %}
{%         set servers = mcs_client.cvx_secondary.server_hosts | arista.avd.default('-') | join(', ') %}
{%         if mcs_client.cvx_secondary.shutdown is arista.avd.defined %}
{%             set enabled = not mcs_client.cvx_secondary.shutdown %}
{%         else %}
{%             set enabled = '-' %}
{%         endif %}
| {{ secondary }} | {{ servers }} | {{ enabled }} |
{%     endif %}

### MCS client configuration

```eos
{%     include 'eos/mcs-client.j2' %}
```
{% endif %}
{% if snmp_server is arista.avd.defined %}

## SNMP

### SNMP Configuration Summary

| Contact | Location | SNMP Traps | State |
| ------- | -------- | ---------- | ----- |
{%     set row_contact = snmp_server.contact | arista.avd.default('-') %}
{%     set row_location = snmp_server.location | arista.avd.default('-') %}
{%     if snmp_server.traps.enable is arista.avd.defined(true) %}
{%         set row_state = 'Enabled' %}
{%     else %}
{%         set row_state = 'Disabled' %}
{%     endif %}
| {{ row_contact }} | {{ row_location }} | All | {{ row_state }} |
{%     if snmp_server.traps.snmp_traps is arista.avd.defined %}
{%         set row_traps_disabled = snmp_server.traps.snmp_traps | selectattr('enabled','false') | map(attribute = 'name') | arista.avd.natural_sort | join(', ') %}
{%         set row_traps_enabled = snmp_server.traps.snmp_traps | rejectattr('enabled','false') | map(attribute = 'name') | arista.avd.natural_sort | join(', ') %}
{%         if row_traps_enabled is arista.avd.defined %}
| {{ row_contact }} | {{ row_location }} | {{ row_traps_enabled }} | Enabled |
{%         endif %}
{%         if row_traps_disabled is arista.avd.defined %}
| {{ row_contact }} | {{ row_location }} | {{ row_traps_disabled }} | Disabled |
{%         endif %}
{%     endif %}
{%     if snmp_server.engine_ids is arista.avd.defined %}

### SNMP EngineID Configuration

| Type | EngineID (Hex) | IP | Port |
| ---- | -------------- | -- | ---- |
{%         if snmp_server.engine_ids.local is arista.avd.defined %}
| local | {{ snmp_server.engine_ids.local }} | - | - |
{%         endif %}
{%         for engine_id in snmp_server.engine_ids.remotes | arista.avd.default([]) %}
{%             if engine_id.id is arista.avd.defined and engine_id.address is arista.avd.defined %}
{%                 set row_udp_port = engine_id.udp_port | arista.avd.default('-') %}
| remote | {{ engine_id.id }} | {{ engine_id.address }} | {{ row_udp_port }} |
{%             endif %}
{%         endfor %}
{%     endif %}
{%     if snmp_server.ipv4_acls is arista.avd.defined %}

### SNMP ACLs
| IP | ACL | VRF |
| -- | --- | --- |
{%         for acl in snmp_server.ipv4_acls %}
| IPv4 | {{ acl.name | arista.avd.default('-') }} | {{ acl.vrf | arista.avd.default('default') }} |
{%         endfor %}
{%     endif %}
{%     if snmp_server.ipv6_acls is arista.avd.defined %}
{%         for acl in snmp_server.ipv6_acls %}
| IPv6 | {{ acl.name | arista.avd.default('-') }} | {{ acl.vrf | arista.avd.default('default') }} |
{%         endfor %}
{%     endif %}
{%     if snmp_server.local_interfaces is arista.avd.defined %}

### SNMP Local Interfaces

| Local Interface | VRF |
| --------------- | --- |
{%         for interface in snmp_server.local_interfaces | arista.avd.convert_dicts('name') %}
| {{ interface.name }} | {{ interface.vrf | arista.avd.default('default') }} |
{%         endfor %}
{%     endif %}
{%     if snmp_server.vrfs is arista.avd.defined %}

### SNMP VRF Status

| VRF | Status |
| --- | ------ |
{%         for vrf in snmp_server.vrfs %}
{%             if vrf.enable | arista.avd.default(false) %}
{%                 set status = 'Enabled' %}
{%             else %}
{%                 set status = 'Disabled' %}
{%             endif %}
| {{ vrf.name }} | {{ status }} |
{%         endfor %}
{%     endif %}
{%     if snmp_server.hosts is arista.avd.defined %}

### SNMP Hosts Configuration

| Host | VRF | Community | Username | Authentication level | SNMP Version |
| ---- |---- | --------- | -------- | -------------------- | ------------ |
{%         for host in snmp_server.hosts %}
{%             if host.host is arista.avd.defined %}
{%                 set row_host = host.host %}
{%                 set row_vrf = host.vrf | arista.avd.default('-') %}
{%                 if host.users is arista.avd.defined
                      and host.version | arista.avd.default('3') | string == '3' %}
{%                     for user in host.users %}
{%                         if user.username is arista.avd.defined
                              and user.authentication_level is arista.avd.defined %}
| {{ row_host }} | {{ row_vrf }} | - | {{ user.username }} | {{ user.authentication_level }} | {{ host.version | arista.avd.default('3') }} |
{%                         endif %}
{%                     endfor %}
{%                 elif host.community is arista.avd.defined
                        and host.version | arista.avd.default('2c') | string in ['1', '2c'] %}
| {{ row_host }} | {{ row_vrf }} | {{ host.community }} | - | - | {{ host.version | arista.avd.default('2c') }} |
{%                 endif %}
{%             endif %}
{%         endfor %}
{%     endif %}
{%     if snmp_server.views is arista.avd.defined %}

### SNMP Views Configuration

| View | MIB Family Name | Status |
| ---- | --------------- | ------ |
{%         for view in snmp_server.views %}
{%             set row_view = view.name | arista.avd.default('default') %}
{%             set row_mib_family_name = view.MIB_family_name | arista.avd.default('-') %}
{%             if view.included | arista.avd.default(false) %}
{%                 set row_status = 'Included' %}
{%             else %}
{%                 set row_status = 'Excluded' %}
{%             endif %}
| {{ row_view }} | {{ row_mib_family_name }} | {{ row_status }} |
{%         endfor %}
{%     endif %}
{%     if snmp_server.communities is arista.avd.defined %}

### SNMP Communities

| Community | Access | Access List IPv4 | Access List IPv6 | View |
| --------- | ------ | ---------------- | ---------------- | ---- |
{%         for community in snmp_server.communities | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
{%             set access = community.access | arista.avd.default("ro") %}
{%             set access_list_ipv4 = community.access_list_ipv4.name | arista.avd.default("-") %}
{%             set access_list_ipv6 = community.access_list_ipv6.name | arista.avd.default("-") %}
{%             set view = community.view | arista.avd.default("-") %}
| {{ community.name }} | {{ access }} | {{ access_list_ipv4 }} | {{ access_list_ipv6 }} | {{ view }} |
{%         endfor %}
{%     endif %}
{%     if snmp_server.groups is arista.avd.defined %}

### SNMP Groups Configuration

| Group | SNMP Version | Authentication | Read | Write | Notify |
| ----- | ------------ | -------------- | ---- | ----- | ------ |
{%         for group in snmp_server.groups %}
{%             set row_group = group.name | arista.avd.default('default') %}
{%             set row_version = group.version | arista.avd.default('-') %}
{%             set row_auth = group.authentication | arista.avd.default('-') %}
{%             set row_read = group.read | arista.avd.default('-') %}
{%             set row_write = group.write | arista.avd.default('-') %}
{%             set row_notify = group.notify | arista.avd.default('-') %}
| {{ row_group }} | {{ row_version }} | {{ row_auth }} | {{ row_read }} | {{ row_write }} | {{ row_notify }} |
{%         endfor %}
{%     endif %}
{%     if snmp_server.users is arista.avd.defined %}

### SNMP Users Configuration

| User | Group | Version | Authentication | Privacy | Remote Address | Remote Port | Engine ID |
| ---- | ----- | ------- | -------------- | ------- | -------------- | ----------- | --------- |
{%         for user in snmp_server.users %}
{%             set row_user = user.name | arista.avd.default('default') %}
{%             set row_group = user.group | arista.avd.default('-') %}
{%             set row_version = user.version | arista.avd.default('-') %}
{%             set row_auth = user.auth | arista.avd.default('-') %}
{%             set row_policy = user.priv | arista.avd.default('-') %}
{%             set row_remote_address = user.remote_address | arista.avd.default('-') %}
{%             set row_udp_port = user.udp_port | arista.avd.default('-') %}
{%             set row_engine_id = user.localized | arista.avd.default('-') %}
| {{ row_user }} | {{ row_group }} | {{ row_version }} | {{ row_auth }} | {{ row_policy }} | {{ row_remote_address }} | {{ row_udp_port }} | {{ row_engine_id }} |
{%         endfor %}
{%     endif %}

### SNMP Device Configuration

```eos
{%     include 'eos/snmp-settings.j2' %}
```
{% endif %}
{% if monitor_sessions is arista.avd.defined %}

## Monitor Sessions

### Monitor Sessions Summary
{%     for monitor_session in monitor_sessions | arista.avd.natural_sort('name') if monitor_session.name is arista.avd.defined %}
{%         if monitor_session.sources is arista.avd.defined and monitor_session.destinations is arista.avd.defined %}

#### {{ monitor_session.name }}

##### {{ monitor_session.name }} Sources

| Sources | Direction | Access Group Type | Access Group Name | Access Group Priority |
| ------- | --------- | ----------------- | ----------------- | --------------------- |
{%             for source in monitor_session.sources | arista.avd.natural_sort('name') if source.name is arista.avd.defined %}
| {{ source.name }} | {{ source.direction | arista.avd.default('both') }} | {{ source.access_group.type | arista.avd.default('-') }} | {{ source.access_group.name | arista.avd.default('-') }} | {{ source.access_group.priority | arista.avd.default('-') }} |
{%             endfor %}

##### {{ monitor_session.name }} Destinations and Session Settings

| Settings | Values |
| -------- | ------ |
| Destinations | {{ monitor_session.destinations | join(', ') }} |
{%             if monitor_session.encapsulation_gre_metadata_tx is arista.avd.defined(true) %}
| Encapsulation Gre Metadata Tx | {{ monitor_session.encapsulation_gre_metadata_tx }} |
{%             endif %}
{%             if monitor_session.header_remove_size is arista.avd.defined %}
| Header Remove Size | {{ monitor_session.header_remove_size }} |
{%             endif %}
{%             if monitor_session.access_group.type is arista.avd.defined and monitor_session.access_group.name is arista.avd.defined %}
| Access Group Type | {{ monitor_session.access_group.type }} |
| Access Group Name | {{ monitor_session.access_group.name }} |
{%             endif %}
{%             if monitor_session.rate_limit_per_ingress_chip is arista.avd.defined %}
| Rate Limit per Ingress Chip | {{ monitor_session.rate_limit_per_ingress_chip }} |
{%             endif %}
{%             if monitor_session.rate_limit_per_ingress_chip is arista.avd.defined %}
| Rate Limit per Egress Chip | {{ monitor_session.rate_limit_per_egress_chip }} |
{%             endif %}
{%             if monitor_session.sample is arista.avd.defined %}
| Sample | {{ monitor_session.sample }} |
{%             endif %}
{%             if monitor_session.truncate.enabled is arista.avd.defined(true) %}
| Truncate Enabled | {{ monitor_session.truncate.enabled }} |
{%                 if monitor_session.truncate.size is arista.avd.defined %}
| Truncate Size | {{ monitor_session.truncate.size }} |
{%                 endif %}
{%             endif %}
{%         endif %}
{%     endfor %}

### Monitor Sessions Configuration

```eos
{%     include 'eos/monitor-sessions.j2' %}
```
{% endif %}
{% if tap_aggregation is arista.avd.defined and tap_aggregation.mode.exclusive.enabled is arista.avd.defined(true) %}

## Tap Aggregation

### Tap Aggregation Summary

| Settings | Values |
| -------- | ------ |
| Mode Exclusive | {{ tap_aggregation.mode.exclusive.enabled }} |
{%     if tap_aggregation.mode.exclusive.profile is arista.avd.defined %}
| Mode Exclusive Profile | {{ tap_aggregation.mode.exclusive.profile }} |
{%     endif %}
{%     if tap_aggregation.mode.exclusive.no_errdisable is arista.avd.defined %}
| Mode Exclusive No-Errdisable | {{ tap_aggregation.mode.exclusive.no_errdisable | join(', ') }} |
{%     endif %}
{%     if tap_aggregation.encapsulation_dot1br_strip is arista.avd.defined(true) %}
| Encapsulation Dot1br Strip | {{ tap_aggregation.encapsulation_dot1br_strip }} |
{%     endif %}
{%     if tap_aggregation.encapsulation_vn_tag_strip is arista.avd.defined(true) %}
| Encapsulation Vn Tag Strip | {{ tap_aggregation.encapsulation_vn_tag_strip }} |
{%     endif %}
{%     if tap_aggregation.protocol_lldp_trap is arista.avd.defined(true) %}
| Protocol LLDP Trap | {{ tap_aggregation.protocol_lldp_trap }} |
{%     endif %}
{%     if tap_aggregation.truncation_size is arista.avd.defined %}
| Truncation Size | {{ tap_aggregation.truncation_size }} |
{%     endif %}
{%     if tap_aggregation.mac.timestamp.replace_source_mac is arista.avd.defined(true) %}
| Mac Timestamp | Replace Source-Mac |
{%     elif tap_aggregation.mac.timestamp.header is arista.avd.defined %}
{%         if tap_aggregation.mac.timestamp.header.format is arista.avd.defined %}
| Mac Timestamp | Header Format {{ tap_aggregation.mac.timestamp.header.format }} |
{%         endif %}
{%         if tap_aggregation.mac.timestamp.header.eth_type is arista.avd.defined %}
| Mac Timestamp | Header eth-type {{ tap_aggregation.mac.timestamp.header.eth_type }} |
{%         endif %}
{%     endif %}
{%     if tap_aggregation.mac.fcs_append is arista.avd.defined(true) %}
| Mac FCS Append | {{ tap_aggregation.mac.fcs_append }} |
{%     elif tap_aggregation.mac.fcs_error is arista.avd.defined %}
| Mac FCS Error | {{ tap_aggregation.mac.fcs_error }} |
{%     endif %}

### Tap Aggregation Configuration

```eos
{%     include 'eos/tap-aggregation.j2' %}
```
{% endif %}
{% if sflow is arista.avd.defined %}

## SFlow

### SFlow Summary
{%     if ((sflow.vrfs is arista.avd.defined) or (sflow.destinations is arista.avd.defined) or (sflow.source_interface is arista.avd.defined)) %}

| VRF | SFlow Source Interface | SFlow Destination | Port |
| --- | ---------------------- | ----------------- | ---- |
{%         if sflow.vrfs is arista.avd.defined %}
{%             for vrf in sflow.vrfs | arista.avd.natural_sort('name') %}
{%                 if vrf.destinations is arista.avd.defined %}
{%                     for destination in vrf.destinations | arista.avd.natural_sort('destination') %}
{%                         set port = destination.port | arista.avd.default('6343') %}
| {{ vrf.name }} | - | {{ destination.destination }} | {{ port }} |
{%                     endfor %}
{%                 endif %}
{%                 if vrf.source_interface is arista.avd.defined %}
| {{ vrf.name }} | {{ vrf.source_interface }} | - | - |
{%                 endif %}
{%             endfor %}
{%         endif %}
{%         if sflow.destinations is arista.avd.defined %}
{%             for destination in sflow.destinations  %}
{%                 set port = destination.port | arista.avd.default('6343') %}
| default | - | {{ destination.destination }} | {{ port }} |
{%             endfor %}
{%         endif %}
{%         if sflow.source_interface is arista.avd.defined %}
| default | {{ sflow.source_interface }} | - | - |
{%         endif %}
{%     endif %}
{%     if sflow.sample is arista.avd.defined %}

sFlow Sample Rate: {{ sflow.sample }}
{%     endif %}
{%     if sflow.run is defined and sflow.run == true %}

sFlow is enabled.
{%     else %}

sFlow is disabled.
{%     endif %}
{%     if sflow.interface.disable.default is arista.avd.defined(true) %}

sFlow is disabled on all interfaces by default.
{%     endif %}
{%     if sflow.hardware_acceleration.enabled is arista.avd.defined(true) %}

sFlow hardware acceleration is enabled.
{%     endif %}
{%     if sflow.hardware_acceleration.sample is arista.avd.defined %}

sFlow hardware accelerated Sample Rate: {{ sflow.hardware_acceleration.sample }}
{%     endif %}
{%     if sflow.hardware_acceleration.modules is arista.avd.defined and sflow.hardware_acceleration.modules | length > 0 %}

### SFlow Hardware Accelerated Modules

| Module | Acceleration Enabled |
| ------ | -------------------- |
{%         for module in sflow.hardware_acceleration.modules %}
{%             if module.name is arista.avd.defined %}
| {{ module.name }} | {{ module.enabled | arista.avd.default(true) }} |
{%             endif %}
{%         endfor %}
{%     endif %}

### SFlow Device Configuration

```eos
{%     include 'eos/sflow.j2' %}
```
{% endif %}
{% if hardware_counters is defined and hardware_counters is not none %}

## Hardware Counters

### Hardware Counters Summary

#### Hardware Counter Features

| Feature | Flow Direction |
| ------- | -------------- |
{%     if hardware_counters is arista.avd.defined %}
{%         if hardware_counters.features is arista.avd.defined %}
{%             for feature in hardware_counters.features %}
{%                 if 'name' in feature %}
| {{ feature.name }} | {{ feature.direction }} |
{%                 else %}
{%                     for feat in feature | arista.avd.convert_dicts('name','direction') %}
| {{ feat.name }} | {{ feat.direction }} |
{%                     endfor %}
{%                 endif %}
{%             endfor %}
{%         endif %}
{%     endif %}

### Hardware Counters Configuration

```eos
{%     include 'eos/hardware-counters.j2' %}
```
{% endif %}
{% if vmtracer_sessions is arista.avd.defined %}

## VM Tracer Sessions

### VM Tracer Summary

| Session | URL | Username | Autovlan | Source Interface |
| ------- | --- | -------- | -------- | ---------------- |
{%     for session in vmtracer_sessions | arista.avd.natural_sort('name') %}
{%         set url = session.url | arista.avd.default('-') %}
{%         if session.autovlan_disable is arista.avd.defined(true) %}
{%             set autovlan = 'disabled' %}
{%         endif %}
{%         set source_interface = session.source_interface | arista.avd.default('-') %}
| {{ session.name }} | {{ url }} | {{ session.username | arista.avd.default('-') }} | {{ autovlan | arista.avd.default('enabled') }} | {{ source_interface }} |
{%     endfor %}

### VM Tracer Device Configuration

```eos
{%     include 'eos/vmtracer-sessions.j2' %}
```
{% endif %}
{# eos - event-handler #}
{% if event_handlers is arista.avd.defined %}

## Event Handler

### Event Handler Summary

| Handler | Action Type | Action | Trigger |
| ------- | ----------- | ------ | ------- |
{%     for handler in event_handlers | arista.avd.natural_sort('name') %}
| {{ handler.name }} | {{ handler.action_type }} | {{ handler.action }} | {{ handler.trigger }} |
{%     endfor %}

### Event Handler Device Configuration

```eos
{%     include 'eos/event-handler.j2' %}
```
{% endif %}
{# Object Tracking #}
{% if trackers is arista.avd.defined %}

## Object Tracking

### Object Tracking Summary

| Name | Interface | Tracked Property |
| ---- | --------- | ---------------- |
{%     for tracked_obj in trackers | arista.avd.natural_sort('name') %}
{%         if tracked_obj.name is arista.avd.defined and tracked_obj.interface is arista.avd.defined %}
| {{ tracked_obj.name }} | {{ tracked_obj.interface }} | {{ tracked_obj.tracked_property | arista.avd.default("line-protocol") }} |
{%         endif %}
{%     endfor %}

### Object Tracking Configuration

```eos
{%     include 'eos/object-tracking.j2' %}
```
{% endif %}
{% if monitor_connectivity is arista.avd.defined %}

# Monitor Connectivity

## Global Configuration
{%     if monitor_connectivity.interface_sets is arista.avd.defined %}

### Interface Sets

| Name | Interfaces |
| ---- | ---------- |
{%         for interface_set in monitor_connectivity.interface_sets | arista.avd.natural_sort('name') %}
{%             if interface_set.name is arista.avd.defined and interface_set.interfaces is arista.avd.defined %}
| {{ interface_set.name }} | {{ interface_set.interfaces }} |
{%             endif %}
{%         endfor %}
{%     endif %}

### Probing Configuration

| Enabled | Interval | Default Interface Set |
| ------- | -------- | --------------------- |
| {{ not monitor_connectivity.shutdown | arista.avd.default(true) }} | {{ monitor_connectivity.interval | arista.avd.default('-') }} | {{ monitor_connectivity.local_interfaces | arista.avd.default('-') }} |
{%     if monitor_connectivity.hosts is arista.avd.defined %}

### Host Parameters

| Host Name | Description | IPv4 Address | Probing Interface Set | URL |
| --------- | ----------- | ------------ | --------------------- | --- |
{%         for host in monitor_connectivity.hosts | arista.avd.natural_sort('name') %}
{%             if host.name is arista.avd.defined %}
| {{ host.name }} | {{ host.description | arista.avd.default('-') }} | {{ host.ip | arista.avd.default('-') }} | {{ host.local_interfaces | arista.avd.default('-') }} | {{ host.url | arista.avd.default('-') }} |
{%             endif %}
{%         endfor %}
{%     endif %}
{%     if monitor_connectivity.vrfs is arista.avd.defined %}

## Vrf Configuration

| Name | Description | Default Interface Set |
| ---- | ----------- | --------------------- |
{%         for vrf in monitor_connectivity.vrfs | arista.avd.natural_sort('name') %}
{%             if vrf.name is arista.avd.defined %}
| {{ vrf.name }} | {{ vrf.description | arista.avd.default('-') }} | {{ vrf.local_interfaces | arista.avd.default('-') }} |
{%             endif %}
{%         endfor %}
{%         for vrf in monitor_connectivity.vrfs | arista.avd.natural_sort('name') %}
{%             if vrf.name is arista.avd.defined %}

### Vrf {{ vrf.name }} Configuration
{%                 if vrf.interface_sets is arista.avd.defined %}

#### Interface Sets

| Name | Interfaces |
| ---- | ---------- |
{%                     for interface_set in vrf.interface_sets | arista.avd.natural_sort('name') %}
{%                         if interface_set.name is arista.avd.defined and interface_set.interfaces is arista.avd.defined %}
| {{ interface_set.name }} | {{ interface_set.interfaces }} |
{%                         endif %}
{%                     endfor %}
{%                 endif %}
{%                 if vrf.hosts is arista.avd.defined %}

#### Host Parameters

| Host Name | Description | IPv4 Address | Probing Interface Set | URL |
| --------- | ----------- | ------------ | --------------------- | --- |
{%                     for host in vrf.hosts | arista.avd.natural_sort('name') %}
{%                         if host.name is arista.avd.defined %}
| {{ host.name }} | {{ host.description | arista.avd.default('-') }} | {{ host.ip | arista.avd.default('-') }} | {{ host.local_interfaces | arista.avd.default('-') }} | {{ host.url | arista.avd.default('-') }} |
{%                         endif %}
{%                     endfor %}
{%                 endif %}
{%             endif %}
{%         endfor %}
{%     endif %}

## Monitor Connectivity Device Configuration

```eos
{%     include 'eos/monitor-connectivity.j2' %}
```
{% endif %}
{% if tcam_profile is arista.avd.defined %}

# Hardware TCAM Profile

TCAM profile __`{{ tcam_profile.system | arista.avd.default('default') }}`__ is active
{%     if tcam_profile.profiles is arista.avd.defined %}

## Custom TCAM profiles

Following TCAM profiles are configured on device:

{%         for profile in tcam_profile.profiles %}
- Profile Name: `{{ profile.name }}`
{%         endfor %}
{%     endif %}

## Hardware TCAM configuration

```eos
{%     include 'eos/tcam-profile.j2' %}
```
{% endif %}
{# Link Tracking Groups #}
{% if link_tracking_groups is arista.avd.defined %}

## Link Tracking

### Link Tracking Groups Summary

| Group Name | Minimum Links | Recovery Delay |
| ---------- | ------------- | -------------- |
{%     for link_tracking_group in link_tracking_groups | arista.avd.natural_sort('name') %}
{%         if link_tracking_group.name is arista.avd.defined %}
| {{ link_tracking_group.name }} | {{ link_tracking_group.links_minimum | arista.avd.default("-") }} | {{ link_tracking_group.recovery_delay | arista.avd.default("-") }} |
{%         endif %}
{%     endfor %}

### Link Tracking Groups Configuration

```eos
{%     include 'eos/link-tracking-groups.j2' %}
```
{% endif %}
{% if mlag_configuration is arista.avd.defined %}

# MLAG

## MLAG Summary

| Domain-id | Local-interface | Peer-address | Peer-link |
| --------- | --------------- | ------------ | --------- |
| {{ mlag_configuration.domain_id }} | {{ mlag_configuration.local_interface }} | {{ mlag_configuration.peer_address }} | {{ mlag_configuration.peer_link }} |

{%     if mlag_configuration.heartbeat_interval is arista.avd.defined %}
Heartbeat Interval is {{ mlag_configuration.heartbeat_interval }} milliseconds.
{%     endif %}
{%     if mlag_configuration.dual_primary_detection_delay is arista.avd.defined %}
Dual primary detection is enabled. The detection delay is {{ mlag_configuration.dual_primary_detection_delay }} seconds.
{%         if mlag_configuration.dual_primary_recovery_delay_mlag is arista.avd.defined and
              mlag_configuration.dual_primary_recovery_delay_non_mlag is arista.avd.defined %}
Dual primary recovery delay for MLAG interfaces is {{ mlag_configuration.dual_primary_recovery_delay_mlag }} seconds.
Dual primary recovery delay for NON-MLAG interfaces is {{ mlag_configuration.dual_primary_recovery_delay_non_mlag }} seconds.
{%         endif %}
{%     else %}
Dual primary detection is disabled.
{%     endif %}

## MLAG Device Configuration

```eos
{%     include 'eos/mlag-configuration.j2' %}
```
{% endif %}
{% if lldp is arista.avd.defined %}

# LLDP

## LLDP Summary

### LLDP Global Settings

| Enabled | Management Address | Management VRF | Timer | Hold-Time | Re-initialization Timer | Drop Received Tagged Packets |
| ------- | ------------------ | -------------- | ----- | --------- | ----------------------- | ---------------------------- |
| {{ lldp.run | arista.avd.default(true) }} | {{ lldp.management_address | arista.avd.default('-') }} | {{ lldp.vrf | arista.avd.default('Default') }} | {{ lldp.timer | arista.avd.default('30') }} | {{ lldp.holdtime | arista.avd.default('120') }} | {{ lldp.timer_reinitialization | arista.avd.default('2') }} | {{ lldp.receive_packet_tagged_drop | arista.avd.default('-') }} |
{%     if lldp.tlvs is arista.avd.defined %}

### LLDP Explicit TLV Transmit Settings

| TLV | Transmit |
| --- | -------- |
{%         for tlv in lldp.tlvs %}
| {{ tlv.name | arista.avd.default('-') }} | {{ tlv.transmit | arista.avd.default('-') }} |
{%         endfor %}
{%     endif %}
{%     if ethernet_interfaces is arista.avd.defined %}

### LLDP Interface Settings
{%         if lldp.run is arista.avd.defined(false) %}

LLDP is **disabled** globally. Local interface configs will not apply.
{%         endif %}

| Interface | Transmit | Receive |
| --------- | -------- | ------- |
{%         for ethernet_interface in ethernet_interfaces | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
{%             if ethernet_interface.lldp.transmit is arista.avd.defined or ethernet_interface.lldp.receive is arista.avd.defined %}
| {{ ethernet_interface.name }} | {{ ethernet_interface.lldp.transmit | arista.avd.default('-') }} | {{ ethernet_interface.lldp.receive | arista.avd.default('-') }} |
{%             endif %}
{%         endfor %}
{%     endif %}

## LLDP Device Configuration

```eos
{%     include 'eos/lldp.j2' %}
```
{% endif %}
{% if lacp is arista.avd.defined %}

# LACP

## LACP Summary

| Port-id range | Rate-limit default | System-priority |
| ------------- | ------------------ | --------------- |
{%     if lacp.port_id.range.begin is arista.avd.defined and lacp.port_id.range.end is arista.avd.defined %}
{%         set row_range = lacp.port_id.range.begin ~ ' - ' ~ lacp.port_id.range.end %}
{%     else %}
{%         set row_range = '-' %}
{%     endif %}
| {{ row_range }} | {{ lacp.rate_limit.default | arista.avd.default('-') }} | {{ lacp.system_priority | arista.avd.default('-') }} |

## LACP Device Configuration

```eos
{%     include 'eos/lacp.j2' %}
```
{% endif %}
{# spanning-tree #}
{% if spanning_tree is arista.avd.defined %}

# Spanning Tree

## Spanning Tree Summary

STP mode: **{{ spanning_tree.mode | arista.avd.default("mstp") }}**
{%     if spanning_tree.root_super is arista.avd.defined %}

STP Root Super: **{{ spanning_tree.root_super }}**
{%     endif %}
{%     if spanning_tree.mst_instances is arista.avd.defined %}

### MSTP Instance and Priority

| Instance(s) | Priority |
| -------- | -------- |
{%         for mst_instance in spanning_tree.mst_instances | arista.avd.natural_sort('id') %}
| {{ mst_instance.id }} | {{ mst_instance.priority | arista.avd.default("-") }} |
{%         endfor %}
{%     endif %}
{%     if spanning_tree.mst.configuration is arista.avd.defined %}

### MST Configuration

| Variable | Value |
| -------- | -------- |
{%         if spanning_tree.mst.configuration.name is arista.avd.defined %}
| Name | {{ spanning_tree.mst.configuration.name }} |
{%         endif %}
{%         if spanning_tree.mst.configuration.revision is arista.avd.defined %}
| Revision | {{ spanning_tree.mst.configuration.revision }} |
{%         endif %}
{%         if spanning_tree.mst.configuration.instances is arista.avd.defined %}
{%             for instance in spanning_tree.mst.configuration.instances | arista.avd.natural_sort('id') %}
| Instance {{ instance.id }} | VLAN(s) {{ instance.vlans | arista.avd.default("-") }} |
{%             endfor %}
{%         endif %}
{%     endif %}
{%     if spanning_tree.mode is arista.avd.defined("rapid-pvst") %}

### Rapid-PVST Instance and Priority

| Instance(s) | Priority |
| -------- | -------- |
{%         if spanning_tree.rapid_pvst_instances is arista.avd.defined  %}
{%             for vlan_id in spanning_tree.rapid_pvst_instances | arista.avd.natural_sort('id') %}
| {{ vlan_id.id }} | {{ vlan_id.priority | arista.avd.default("-") }} |
{%             endfor %}
{%         endif %}
{%     endif %}
{%     set global_settings = [] %}
{%     if spanning_tree.mode is arista.avd.defined("rstp") %}
{%         if spanning_tree.rstp_priority is arista.avd.defined %}
{%             do global_settings.append("- Global RSTP priority: " ~ spanning_tree.rstp_priority) %}
{%         endif %}
{%     endif %}
{%     if spanning_tree.no_spanning_tree_vlan is arista.avd.defined %}
{%         do global_settings.append("- Spanning Tree disabled for VLANs: " ~ "**" ~ spanning_tree.no_spanning_tree_vlan ~ "**") %}
{%     endif %}
{%     if spanning_tree.edge_port.bpduguard_default is arista.avd.defined(true) %}
{%         do global_settings.append("- Global BPDU Guard for Edge ports is enabled.") %}
{%     elif spanning_tree.edge_port.bpduguard_default is arista.avd.defined(false) %}
{%         do global_settings.append("- Global BPDU Guard for Edge ports is disabled.") %}
{%     endif %}
{%     if spanning_tree.edge_port.bpdufilter_default is arista.avd.defined(true) %}
{%         do global_settings.append("- Global BPDU Filter for Edge ports is enabled.") %}
{%     elif spanning_tree.edge_port.bpdufilter_default is arista.avd.defined(false) %}
{%         do global_settings.append("- Global BPDU Filter for Edge ports is disabled.") %}
{%     endif %}
{%     if spanning_tree.mode is arista.avd.defined("mstp") %}
{%         if spanning_tree.mst is arista.avd.defined %}
{%             if spanning_tree.mst.pvst_border is arista.avd.defined(true) %}
{%                 do global_settings.append("- MST PSVT Border is enabled.") %}
{%             endif %}
{%         endif %}
{%     endif %}
{%     if global_settings | length > 0 %}

### Global Spanning-Tree Settings

{{ global_settings | join("\n") }}
{%     endif %}

## Spanning Tree Device Configuration

```eos
{%     include 'eos/spanning-tree.j2' %}
```
{% endif %}

# Internal VLAN Allocation Policy

{% if vlan_internal_order is defined and vlan_internal_order is not none %}
## Internal VLAN Allocation Policy Summary

| Policy Allocation | Range Beginning | Range Ending |
| ------------------| --------------- | ------------ |
| {{ vlan_internal_order.allocation }} | {{ vlan_internal_order.range.beginning }} | {{ vlan_internal_order.range.ending }} |

## Internal VLAN Allocation Policy Configuration

```eos
{%     include 'eos/vlan-internal-order.j2' %}
```
{% else %}
## Internal VLAN Allocation Policy Summary

**Default Allocation Policy**

| Policy Allocation | Range Beginning | Range Ending |
| ------------------| --------------- | ------------ |
| ascending | 1006 | 4094 |
{% endif %}
{# VLANs Summary #}
{% if vlans is arista.avd.defined %}
{%     set ns = namespace(show_private_vlan_table = false) %}

# VLANs

## VLANs Summary

| VLAN ID | Name | Trunk Groups |
| ------- | ---- | ------------ |
{%     for vlan in vlans | arista.avd.natural_sort('id') %}
{%         if vlan.private_vlan is arista.avd.defined %}
{%             set ns.show_private_vlan_table = true %}
{%         endif %}
{%         set row_name = vlan.name | arista.avd.default('-') %}
{%         if vlan.trunk_groups is arista.avd.defined %}
{%             set row_trunk_groups = vlan.trunk_groups | join(' ') %}
{%         else %}
{%             set row_trunk_groups = '-' %}
{%         endif %}
| {{ vlan.id }} | {{ row_name }} | {{ row_trunk_groups }} |
{%     endfor %}
{%     if ns.show_private_vlan_table %}

### Private VLANs

| Primary Vlan ID | Secondary VLAN ID | Private Vlan Type |
| --------------- | ----------------- | ----------------- |
{%         for vlan in vlans | arista.avd.natural_sort('id') %}
{%             if vlan.private_vlan.type is arista.avd.defined and
                  vlan.private_vlan.primary_vlan is arista.avd.defined %}
| {{ vlan.private_vlan.type }} | {{ vlan.id }} | {{ vlan.private_vlan.primary_vlan }} |
{%             endif %}
{%         endfor %}
{%     endif %}

## VLANs Device Configuration

```eos
{%     include 'eos/vlans.j2' %}
```
{% endif %}
{% if mac_address_table is arista.avd.defined %}

# MAC Address Table

## MAC Address Table Summary
{%     if mac_address_table.aging_time is arista.avd.defined %}

- MAC address table entry maximum age: {{ mac_address_table.aging_time }} seconds
{%     endif %}
{%     if mac_address_table.notification_host_flap.logging is arista.avd.defined(false) %}

- Logging MAC address interface flapping is Disabled
{%     elif mac_address_table.notification_host_flap.logging is arista.avd.defined(true) %}

- Logging MAC address interface flapping is Enabled
{%     endif %}
{%     if mac_address_table.notification_host_flap.detection.moves is arista.avd.defined %}

- {{ mac_address_table.notification_host_flap.detection.moves }} MAC moves are considered as one flap
{%     endif %}
{%     if mac_address_table.notification_host_flap.detection.window is arista.avd.defined %}

- Size of the flap detection time window: {{ mac_address_table.notification_host_flap.detection.window }} seconds
{%     endif %}

## MAC Address Table Device Configuration

```eos
{%     include 'eos/mac-address-table-aging-time.j2' %}
{%     include 'eos/mac-address-table-notification.j2' %}
```
{% endif %}

# Interfaces
{% if switchport_default is arista.avd.defined %}

## Switchport Default

### Switchport Defaults Summary

{%     if switchport_default.mode is arista.avd.defined %}
- Default Switchport Mode: {{ switchport_default.mode }}
{%     endif %}
{%     if switchport_default.phone.cos is arista.avd.defined %}
- Default Switchport Phone COS: {{ switchport_default.phone.cos }}
{%     endif %}
{%     if switchport_default.phone.trunk is arista.avd.defined %}
- Default Switchport Phone Trunk: {{ switchport_default.phone.trunk }}
{%     endif %}
{%     if switchport_default.phone.vlan is arista.avd.defined %}
- Default Switchport Phone VLAN: {{ switchport_default.phone.vlan }}
{%     endif %}

### Switchport Default Configuration

```eos
{%     include 'eos/switchport-default.j2' %}
```
{% endif %}
{% if interface_defaults is arista.avd.defined %}

## Interface Defaults

### Interface Defaults Summary
{%     if interface_defaults.ethernet.shutdown is arista.avd.defined %}

- Default Ethernet Interface Shutdown: {{ interface_defaults.ethernet.shutdown }}
{%     endif %}
{%     if interface_defaults.mtu is arista.avd.defined %}

- Default Routed Interface MTU: {{ interface_defaults.mtu }}
{%     endif %}

### Interface Defaults Configuration

```eos
{%     include 'eos/interface-defaults.j2' %}
```
{% endif %}
{% if interface_profiles is arista.avd.defined %}

## Interface Profiles

### Interface Profiles Summary

{%     for interface_profile in interface_profiles | arista.avd.natural_sort('name') %}
- {{ interface_profile.name }}
{%     endfor %}

### Interface Profiles Configuration

```eos
{%     include 'eos/interface-profiles.j2' %}
```
{% endif %}
{% if ethernet_interfaces is arista.avd.defined %}

## Ethernet Interfaces

### Ethernet Interfaces Summary

#### L2

| Interface | Description | Mode | VLANs | Native VLAN | Trunk Group | Channel-Group |
| --------- | ----------- | ---- | ----- | ----------- | ----------- | ------------- |
{%     for ethernet_interface in ethernet_interfaces | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
{%         if ethernet_interface.channel_group.id is arista.avd.defined %}
{%             set port_channel_interface_name = 'Port-Channel' ~ ethernet_interface.channel_group.id %}
{%             set port_channel_interface = port_channel_interfaces | arista.avd.default([]) |
                                                                      arista.avd.convert_dicts('name') |
                                                                      selectattr('name', 'arista.avd.defined', port_channel_interface_name) |
                                                                      first %}
{%             if port_channel_interface.type is not defined or port_channel_interface.type not in ['routed', 'l3dot1q', 'l2dot1q'] %}
{%                 set description = ethernet_interface.description | arista.avd.default("-") %}
{%                 set mode = port_channel_interface.mode | arista.avd.default("access") %}
{%                 set vlans = port_channel_interface.vlans | arista.avd.default('-') %}
{%                 if  port_channel_interface.native_vlan_tag is arista.avd.defined(true) %}
{%                     set native_vlan = "tag" %}
{%                 else %}
{%                     set native_vlan = port_channel_interface.native_vlan | arista.avd.default('-') %}
{%                 endif %}
{%                 set channel_group = ethernet_interface.channel_group.id %}
{%                 if port_channel_interface.trunk_groups is arista.avd.defined %}
{%                     set l2 = namespace() %}
{%                     set l2.trunk_groups = [] %}
{%                     for trunk_group in port_channel_interface.trunk_groups | arista.avd.natural_sort %}
{%                         do l2.trunk_groups.append(trunk_group) %}
{%                     endfor %}
{%                 else %}
{%                     set l2 = namespace() %}
{%                     set l2.trunk_groups = "-" %}
{%                 endif %}
| {{ ethernet_interface.name }} | {{ description }} | *{{ mode }} | *{{ vlans }} | *{{ native_vlan }} | *{{ l2.trunk_groups }} | {{ channel_group }} |
{%             endif %}
{%         elif ethernet_interface.type is not defined or ethernet_interface.type not in ['routed', 'l3dot1q', 'l2dot1q'] %}
{%             set description = ethernet_interface.description | arista.avd.default("-") %}
{%             set mode = ethernet_interface.mode | arista.avd.default("access") %}
{%             set vlans = ethernet_interface.vlans | arista.avd.default('-') %}
{%             if  ethernet_interface.native_vlan_tag is arista.avd.defined(true) %}
{%                 set native_vlan = "tag" %}
{%             else %}
{%                 set native_vlan = ethernet_interface.native_vlan | arista.avd.default('-') %}
{%             endif %}
{%             if ethernet_interface.trunk_groups is defined %}
{%                 set l2 = namespace() %}
{%                 set l2.trunk_groups = [] %}
{%                 for trunk_group in ethernet_interface.trunk_groups | arista.avd.natural_sort %}
{%                     do l2.trunk_groups.append(trunk_group) %}
{%                 endfor %}
{%             else %}
{%                 set l2 = namespace() %}
{%                 set l2.trunk_groups = "-" %}
{%             endif %}
| {{ ethernet_interface.name }} |  {{ description }} | {{ mode }} | {{ vlans }} | {{ native_vlan }} | {{ l2.trunk_groups }} | - |
{%         endif %}
{%     endfor %}

*Inherited from Port-Channel Interface
{# Encapsulation #}
{%     set encapsulation_dot1q_interfaces = [] %}
{%     set flexencap_interfaces = [] %}
{%     for ethernet_interface in ethernet_interfaces | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
{%         if ethernet_interface.type | arista.avd.default in ['l3dot1q', 'l2dot1q'] %}
{%             if ethernet_interface.encapsulation_dot1q_vlan is arista.avd.defined %}
{%                 do encapsulation_dot1q_interfaces.append(ethernet_interface) %}
{%             elif ethernet_interface.encapsulation_vlan is arista.avd.defined %}
{%                 do flexencap_interfaces.append(ethernet_interface) %}
{%             endif %}
{%         endif %}
{%     endfor %}
{%     if encapsulation_dot1q_interfaces | length > 0 %}

#### Encapsulation Dot1q Interfaces

| Interface | Description | Type | Vlan ID | Dot1q VLAN Tag |
| --------- | ----------- | -----| ------- | -------------- |
{%         for ethernet_interface in encapsulation_dot1q_interfaces %}
{%             set description = ethernet_interface.description | arista.avd.default('-') %}
{%             set type = ethernet_interface.type %}
{%             set vlan_id = ethernet_interface.vlan_id | arista.avd.default('-') %}
{%             set encapsulation_dot1q_vlan = ethernet_interface.encapsulation_dot1q_vlan | arista.avd.default('-') %}
| {{ ethernet_interface.name }} | {{ description }} | {{ type }} | {{ vlan_id }} | {{ encapsulation_dot1q_vlan }} |
{%         endfor %}
{%     endif %}
{%     if flexencap_interfaces | length > 0 %}

#### Flexible Encapsulation Interfaces

| Interface | Description | Type | Vlan ID | Client Unmatched | Client Dot1q VLAN | Client Dot1q Outer Tag | Client Dot1q Inner Tag | Network Retain Client Encapsulation | Network Dot1q VLAN | Network Dot1q Outer Tag | Network Dot1q Inner Tag |
| --------- | ----------- | ---- | ------- | -----------------| ----------------- | ---------------------- | ---------------------- | ----------------------------------- | ------------------ | ----------------------- | ----------------------- |
{%         for ethernet_interface in flexencap_interfaces %}
{%             set description = ethernet_interface.description | arista.avd.default("-") %}
{%             set type = ethernet_interface.type %}
{%             set vlan_id = ethernet_interface.vlan_id | arista.avd.default('-') %}
{%             set client_unmatched = ethernet_interface.encapsulation_vlan.client.unmatched | arista.avd.default(false) %}
{%             set client_dot1q_vlan = ethernet_interface.encapsulation_vlan.client.dot1q.vlan | arista.avd.default("-") %}
{%             set client_dot1q_outer = ethernet_interface.encapsulation_vlan.client.dot1q.outer | arista.avd.default("-") %}
{%             set client_dot1q_inner = ethernet_interface.encapsulation_vlan.client.dot1q.inner | arista.avd.default("-") %}
{%             set network_client = ethernet_interface.encapsulation_vlan.network.client | arista.avd.default(false) %}
{%             set network_dot1q_vlan = ethernet_interface.encapsulation_vlan.network.dot1q.vlan | arista.avd.default("-") %}
{%             set network_dot1q_outer = ethernet_interface.encapsulation_vlan.network.dot1q.outer | arista.avd.default("-") %}
{%             set network_dot1q_inner = ethernet_interface.encapsulation_vlan.network.dot1q.inner | arista.avd.default("-") %}
| {{ ethernet_interface.name }} | {{ description }} | {{ type }} | {{ vlan_id }} | {{ client_unmatched }} | {{ client_dot1q_vlan }} | {{ client_dot1q_outer }} | {{ client_dot1q_inner }} | {{ network_client }} | {{ network_dot1q_vlan }} | {{ network_dot1q_outer }} | {{ network_dot1q_inner }} |
{%         endfor %}
{%     endif %}
{# PVLAN #}
{%     set ethernet_interface_pvlan = namespace() %}
{%     set ethernet_interface_pvlan.configured = false %}
{%     for ethernet_interface in ethernet_interfaces | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
{%         if ethernet_interface.pvlan_mapping is arista.avd.defined or
              ethernet_interface.trunk_private_vlan_secondary is arista.avd.defined %}
{%             set ethernet_interface_pvlan.configured = true %}
{%             break %}
{%         endif %}
{%     endfor %}
{%     if ethernet_interface_pvlan.configured == true %}

#### Private VLAN

| Interface | PVLAN Mapping | Secondary Trunk |
| --------- | ------------- | ----------------|
{%         for ethernet_interface in ethernet_interfaces | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
{%             if ethernet_interface.pvlan_mapping is arista.avd.defined or
               ethernet_interface.trunk_private_vlan_secondary is arista.avd.defined %}
{%                 set row_pvlan_mapping = ethernet_interface.pvlan_mapping | arista.avd.default('-') %}
{%                 set row_trunk_private_vlan_secondary = ethernet_interface.trunk_private_vlan_secondary | arista.avd.default('-') %}
| {{ ethernet_interface.name }} | {{ row_pvlan_mapping }} | {{ row_trunk_private_vlan_secondary }} |
{%             endif %}
{%         endfor %}
{%     endif %}
{# VLAN Translations #}
{%     set ethernet_interface_vlan_xlate = namespace() %}
{%     set ethernet_interface_vlan_xlate.configured = false %}
{%     for ethernet_interface in ethernet_interfaces | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
{%         if ethernet_interface.vlan_translations is arista.avd.defined %}
{%             set ethernet_interface_vlan_xlate.configured = true %}
{%             break %}
{%         endif %}
{%     endfor %}
{%     if ethernet_interface_vlan_xlate.configured == true %}

#### VLAN Translations

| Interface | From VLAN ID(s) | To VLAN ID | Direction |
| --------- | --------------- | -----------| --------- |
{%         for ethernet_interface in ethernet_interfaces | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
{%             if ethernet_interface.vlan_translations is arista.avd.defined %}
{%                 for vlan_translation in ethernet_interface.vlan_translations | arista.avd.natural_sort %}
{%                     if vlan_translation.from is arista.avd.defined and vlan_translation.to is arista.avd.defined %}
{%                         set row_direction = vlan_translation.direction | arista.avd.default('both') %}
| {{ ethernet_interface.name }} | {{ vlan_translation.from }} | {{ vlan_translation.to }} | {{ row_direction }}
{%                     endif %}
{%                 endfor %}
{%             endif %}
{%         endfor %}
{%     endif %}
{# Link Tracking Groups #}
{%     set link_tracking_interfaces = [] %}
{%     for ethernet_interface in ethernet_interfaces | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
{%         if ethernet_interface.link_tracking_groups is arista.avd.defined %}
{%             do link_tracking_interfaces.append(ethernet_interface) %}
{%         endif %}
{%     endfor %}
{%     if link_tracking_interfaces | length > 0 %}

#### Link Tracking Groups

| Interface | Group Name | Direction |
| --------- | ---------- | --------- |
{%         for link_tracking_interface in link_tracking_interfaces %}
{%             for link_tracking_group in link_tracking_interface.link_tracking_groups | arista.avd.natural_sort('name') %}
{%                 if link_tracking_group.name is arista.avd.defined and link_tracking_group.direction is arista.avd.defined %}
| {{ link_tracking_interface.name }} | {{ link_tracking_group.name }} | {{ link_tracking_group.direction }} |
{%                 endif %}
{%             endfor %}
{%         endfor %}
{%     endif %}
{# Multicast Routing #}
{%     set multicast_interfaces = [] %}
{%     for ethernet_interface in ethernet_interfaces | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
{%         if ethernet_interface.multicast is arista.avd.defined %}
{%             do multicast_interfaces.append(ethernet_interface) %}
{%         endif %}
{%     endfor %}
{%     if multicast_interfaces | length > 0 %}

#### Multicast Routing

| Interface | IP Version | Static Routes Allowed | Multicast Boundaries |
| --------- | ---------- | --------------------- | -------------------- |
{%         for multicast_interface in multicast_interfaces %}
{%             if multicast_interface.multicast.ipv4 is arista.avd.defined %}
{%                 set static = multicast_interface.multicast.ipv4.static | arista.avd.default('-') %}
{%                 if multicast_interface.multicast.ipv4.boundaries is arista.avd.defined %}
{%                     set boundaries = multicast_interface.multicast.ipv4.boundaries | selectattr('boundary', 'arista.avd.defined') |
                                                                                        map(attribute='boundary') |
                                                                                        join(', ') %}
{%                 else %}
{%                     set boundaries = '-' %}
{%                 endif %}
| {{ multicast_interface.name }} | IPv4 | {{ static }} | {{ boundaries }} |
{%             endif %}
{%             if multicast_interface.multicast.ipv6 is arista.avd.defined %}
{%                 set static = multicast_interface.multicast.ipv6.static | arista.avd.default('-') %}
{%                 if multicast_interface.multicast.ipv6.boundaries is arista.avd.defined %}
{%                     set boundaries = multicast_interface.multicast.ipv6.boundaries | selectattr('boundary', 'arista.avd.defined') |
                                                                                        map(attribute='boundary') |
                                                                                        join(', ') %}
{%                 else %}
{%                     set boundaries = '-' %}
{%                 endif %}
| {{ multicast_interface.name }} | IPv6 | {{ static }} | {{ boundaries }} |
{%             endif %}
{%         endfor %}
{%     endif %}
{# IPv4 #}
{%     set ethernet_interface_ipv4 = namespace() %}
{%     set ethernet_interface_ipv4.configured = false %}
{%     for ethernet_interface in ethernet_interfaces | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
{%         if ethernet_interface.type is arista.avd.defined
            and ethernet_interface.type in ['routed', 'l3dot1q']
            and ethernet_interface.ip_address is arista.avd.defined %}
{%             set ethernet_interface_ipv4.configured = true %}
{%             break %}
{%         endif %}
{%     endfor %}
{%     set port_channel_interface_ipv4 = namespace() %}
{%     set port_channel_interface_ipv4.configured = false %}
{%     for port_channel_interface in port_channel_interfaces | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
{%         if port_channel_interface.type is arista.avd.defined
              and port_channel_interface.type in ['routed', 'l3dot1q']
              and port_channel_interface.ip_address is arista.avd.defined %}
{%             set port_channel_interface_ipv4.configured = true %}
{%             break %}
{%         endif %}
{%     endfor %}
{%     if ethernet_interface_ipv4.configured == true or port_channel_interface_ipv4.configured == true %}

#### IPv4

| Interface | Description | Type | Channel Group | IP Address | VRF |  MTU | Shutdown | ACL In | ACL Out |
| --------- | ----------- | -----| ------------- | ---------- | ----| ---- | -------- | ------ | ------- |
{%         for ethernet_interface in ethernet_interfaces | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
{%             if ethernet_interface.channel_group.id is arista.avd.defined %}
{%                 set port_channel_interface_name = 'Port-Channel' ~ ethernet_interface.channel_group.id %}
{%                 set port_channel_interface = port_channel_interfaces | arista.avd.default([]) |
                                                                          arista.avd.convert_dicts('name') |
                                                                          selectattr('name', 'arista.avd.defined', port_channel_interface_name) |
                                                                          first %}
{%                 if port_channel_interface.ip_address is arista.avd.defined %}
{%                     set description = ethernet_interface.description | arista.avd.default("-") %}
{%                     set type = port_channel_interface.type | arista.avd.default("*switchport") %}
{%                     set channel_group = ethernet_interface.channel_group.id | arista.avd.default("-") %}
{%                     set ip_address = port_channel_interface.ip_address | arista.avd.default("-") %}
{%                     set vrf = port_channel_interface.vrf | arista.avd.default("*default") %}
{%                     set mtu = port_channel_interface.mtu | arista.avd.default("*-") %}
{%                     set shutdown = port_channel_interface.shutdown | arista.avd.default("*-") %}
{%                     set acl_in = port_channel_interface.access_group_in | arista.avd.default("*-") %}
{%                     set acl_out = port_channel_interface.access_group_out | arista.avd.default("*-") %}
| {{ ethernet_interface.name }} | {{ description }} | *{{ type }} | {{ channel_group }} | *{{ ip_address }} | *{{ vrf }} | *{{ mtu }} | *{{ shutdown }} | *{{ acl_in }} | *{{ acl_out }} |
{%                 endif %}
{%             else %}
{%                 if ethernet_interface.ip_address is arista.avd.defined %}
{%                     set description = ethernet_interface.description | arista.avd.default("-") %}
{%                     set type = ethernet_interface.type | arista.avd.default("switchport") %}
{%                     set ip_address = ethernet_interface.ip_address | arista.avd.default("-") %}
{%                     set vrf = ethernet_interface.vrf | arista.avd.default("default") %}
{%                     set mtu = ethernet_interface.mtu | arista.avd.default("-") %}
{%                     set shutdown = ethernet_interface.shutdown | arista.avd.default("-") %}
{%                     set acl_in = ethernet_interface.access_group_in | arista.avd.default("-") %}
{%                     set acl_out = ethernet_interface.access_group_out | arista.avd.default("-") %}
| {{ ethernet_interface.name }} | {{ description }} | {{ type }} | - | {{ ip_address }} | {{ vrf }} | {{ mtu }} | {{ shutdown }} | {{ acl_in }} | {{ acl_out }} |
{%                 endif %}
{%             endif %}
{%         endfor %}
{%     endif %}
{%     if port_channel_interface_ipv4.configured == true %}
*Inherited from Port-Channel Interface
{%     endif %}
{# IPv6 #}
{%     set ethernet_interface_ipv6 = namespace() %}
{%     set ethernet_interface_ipv6.configured = false %}
{%     for ethernet_interface in ethernet_interfaces | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
{%         if ethernet_interface.type is arista.avd.defined
              and ethernet_interface.type in ['routed', 'l3dot1q']
              and (ethernet_interface.ipv6_address is arista.avd.defined or ethernet_interface.ipv6_enable is arista.avd.defined(true)) %}
{%             set ethernet_interface_ipv6.configured = true %}
{%             break %}
{%         endif %}
{%     endfor %}
{%     set port_channel_interface_ipv6 = namespace() %}
{%     set port_channel_interface_ipv6.configured = false %}
{%     for port_channel_interface in port_channel_interfaces | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
{%         if port_channel_interface.type is arista.avd.defined
              and port_channel_interface.type in ['routed', 'l3dot1q']
              and (port_channel_interface.ipv6_address is arista.avd.defined or port_channel_interface.ipv6_enable is arista.avd.defined(true)) %}
{%             set port_channel_interface_ipv6.configured = true %}
{%             break %}
{%         endif %}
{%     endfor %}
{%     if ethernet_interface_ipv6.configured == true or port_channel_interface_ipv6.configured == true %}

#### IPv6

| Interface | Description | Type | Channel Group | IPv6 Address | VRF | MTU | Shutdown | ND RA Disabled | Managed Config Flag | IPv6 ACL In | IPv6 ACL Out |
| --------- | ----------- | ---- | --------------| ------------ | --- | --- | -------- | -------------- | -------------------| ----------- | ------------ |
{%         for ethernet_interface in ethernet_interfaces | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
{%             if ethernet_interface.channel_group.id is arista.avd.defined %}
{%                 set port_channel_interface_name = 'Port-Channel' ~ ethernet_interface.channel_group.id %}
{%                 set port_channel_interface = port_channel_interfaces | arista.avd.default([]) |
                                                                          arista.avd.convert_dicts('name') |
                                                                          selectattr('name', 'arista.avd.defined', port_channel_interface_name) |
                                                                          first %}
{%                 if port_channel_interface.ipv6_address is arista.avd.defined or port_channel_interface.ipv6_enable is arista.avd.defined(true) %}
{%                     set description = ethernet_interface.description | arista.avd.default("-") %}
{%                     set type = port_channel_interface.type | arista.avd.default("switchport") %}
{%                     set channel_group = ethernet_interface.channel_group.id | arista.avd.default("-") %}
{%                     set ipv6_address = port_channel_interface.ipv6_address | arista.avd.default("-") %}
{%                     set vrf = port_channel_interface.vrf | arista.avd.default("default") %}
{%                     set mtu = port_channel_interface.mtu | arista.avd.default("-") %}
{%                     set shutdown = port_channel_interface.shutdown | arista.avd.default("-") %}
{%                     set nd_ra_disabled = port_channel_interface.ipv6_nd_ra_disabled | arista.avd.default("-") %}
{%                     set managed_config_flag = port_channel_interface.ipv6_nd_managed_config_flag | arista.avd.default("-") %}
{%                     set ipv6_acl_in = port_channel_interface.ipv6_access_group_in | arista.avd.default("-") %}
{%                     set ipv6_acl_out = port_channel_interface.ipv6_access_group_out | arista.avd.default("-") %}
| {{ ethernet_interface.name }} | {{ description }} | *{{ type }} | {{ channel_group }} | *{{ ipv6_address }} | *{{ vrf }} | *{{ mtu }} | *{{ shutdown }} | *{{ nd_ra_disabled }} | *{{ managed_config_flag }} | *{{ ipv6_acl_in }} | *{{ ipv6_acl_out }} |
{%                 endif %}
{%             else %}
{%                 if ethernet_interface.ipv6_address is arista.avd.defined or ethernet_interface.ipv6_enable is arista.avd.defined(true) %}
{%                     set description = ethernet_interface.description | arista.avd.default("-") %}
{%                     set type = ethernet_interface.type | arista.avd.default("switchport") %}
{%                     set ipv6_address = ethernet_interface.ipv6_address | arista.avd.default("-") %}
{%                     set vrf = ethernet_interface.vrf | arista.avd.default("default") %}
{%                     set mtu = ethernet_interface.mtu | arista.avd.default("-") %}
{%                     set shutdown = ethernet_interface.shutdown | arista.avd.default("-") %}
{%                     set nd_ra_disabled = ethernet_interface.ipv6_nd_ra_disabled | arista.avd.default("-") %}
{%                     set managed_config_flag = ethernet_interface.ipv6_nd_managed_config_flag | arista.avd.default("-") %}
{%                     set ipv6_acl_in = ethernet_interface.ipv6_access_group_in | arista.avd.default("-") %}
{%                     set ipv6_acl_out = ethernet_interface.ipv6_access_group_out | arista.avd.default("-") %}
| {{ ethernet_interface.name }} | {{ description }} | {{ type }} | - | {{ ipv6_address }} | {{ vrf }} | {{ mtu }} | {{ shutdown }} | {{ nd_ra_disabled }} | {{ managed_config_flag }} | {{ ipv6_acl_in }} | {{ ipv6_acl_out }} |
{%                 endif %}
{%             endif %}
{%         endfor %}
{%     endif %}
{%     if port_channel_interface_ipv6.configured == true %}
 *Inherited from Port-Channel Interface
{%     endif %}
{# ISIS #}
{%     set ethernet_interfaces_isis = [] %}
{%     for ethernet_interface in ethernet_interfaces | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
{%         if ethernet_interface.isis_enable is arista.avd.defined or
               ethernet_interface.isis_metric is arista.avd.defined or
               ethernet_interface.isis_circuit_type is arista.avd.defined or
               ethernet_interface.isis_network_point_to_point is arista.avd.defined or
               ethernet_interface.isis_passive is arista.avd.defined or
               ethernet_interface.isis_hello_padding is arista.avd.defined or
               ethernet_interface.isis_authentication_mode is arista.avd.defined %}
{%             do ethernet_interfaces_isis.append(ethernet_interface) %}
{%         endif %}
{%     endfor %}
{%     set port_channel_interfaces_isis = [] %}
{%     for port_channel_interface in port_channel_interfaces | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
{%         if port_channel_interface.isis_enable is arista.avd.defined or
               port_channel_interface.isis_metric is arista.avd.defined or
               port_channel_interface.isis_circuit_type is arista.avd.defined or
               port_channel_interface.isis_network_point_to_point is arista.avd.defined or
               port_channel_interface.isis_passive is arista.avd.defined or
               port_channel_interface.isis_hello_padding is arista.avd.defined or
               port_channel_interface.isis_authentication_mode is arista.avd.defined %}
{%             do port_channel_interfaces_isis.append(port_channel_interface) %}
{%         endif %}
{%     endfor %}
{%     if ethernet_interfaces_isis | length > 0 or port_channel_interfaces_isis | length > 0 %}

#### ISIS

| Interface | Channel Group | ISIS Instance | ISIS Metric | Mode | ISIS Circuit Type | Hello Padding | Authentication Mode |
| --------- | ------------- | ------------- | ----------- | ---- | ----------------- | ------------- | ------------------- |
{%         for ethernet_interface in ethernet_interfaces | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
{%             if ethernet_interface.channel_group.id is arista.avd.defined %}
{%                 set port_channel_interface_name = 'Port-Channel' ~ ethernet_interface.channel_group.id %}
{%                 set port_channel_interface = port_channel_interfaces_isis | selectattr('name', 'arista.avd.defined', port_channel_interface_name) |
                                                                               first %}
{%                 if port_channel_interface is arista.avd.defined %}
{%                     set channel_group = ethernet_interface.channel_group.id | arista.avd.default("-") %}
{%                     set isis_instance = port_channel_interface.isis_enable | arista.avd.default("-") %}
{%                     set isis_metric = port_channel_interface.isis_metric | arista.avd.default("-") %}
{%                     set isis_circuit_type = port_channel_interface.isis_circuit_type | arista.avd.default("-") %}
{%                     set isis_hello_padding = port_channel_interface.isis_hello_padding | arista.avd.default("-") %}
{%                     set isis_authentication_mode = port_channel_interface.isis_authentication_mode | arista.avd.default("-") %}
{%                     if port_channel_interface.isis_network_point_to_point is arista.avd.defined(true) %}
{%                         set mode = "point-to-point" %}
{%                     elif port_channel_interface.isis_passive is arista.avd.defined(true) %}
{%                         set mode = "passive" %}
{%                     else %}
{%                         set mode = "-" %}
{%                     endif %}
| {{ ethernet_interface.name }} | {{ channel_group }} | *{{ isis_instance }} | *{{ isis_metric }} | *{{ mode }} | *{{ isis_circuit_type }} | *{{ isis_hello_padding }} | *{{ isis_authentication_mode }} |
{%                 endif %}
{%             else %}
{%                 if ethernet_interface in ethernet_interfaces_isis %}
{%                     set channel_group = ethernet_interface.channel_group.id | arista.avd.default("-") %}
{%                     set isis_instance = ethernet_interface.isis_enable | arista.avd.default("-") %}
{%                     set isis_metric = ethernet_interface.isis_metric | arista.avd.default("-") %}
{%                     set isis_circuit_type = ethernet_interface.isis_circuit_type | arista.avd.default("-") %}
{%                     set isis_hello_padding = ethernet_interface.isis_hello_padding | arista.avd.default("-") %}
{%                     set isis_authentication_mode = ethernet_interface.isis_authentication_mode | arista.avd.default("-") %}
{%                     if ethernet_interface.isis_network_point_to_point is arista.avd.defined(true) %}
{%                         set mode = "point-to-point" %}
{%                     elif ethernet_interface.isis_passive is arista.avd.defined(true) %}
{%                         set mode = "passive" %}
{%                     else %}
{%                         set mode = "-" %}
{%                     endif %}
| {{ ethernet_interface.name }} | {{ channel_group }} | {{ isis_instance }} | {{ isis_metric }} | {{ mode }} | {{ isis_circuit_type }} | {{ isis_hello_padding }} | {{ isis_authentication_mode }} |
{%                 endif %}
{%             endif %}
{%         endfor %}
{%     endif %}
{%     if port_channel_interfaces_isis | length > 0 %}
 *Inherited from Port-Channel Interface
{%     endif %}
{# EVPN Multihoming #}
{%     set evpn_es_ethernet_interfaces = [] %}
{%     set evpn_dfe_ethernet_interfaces = [] %}
{%     set evpn_mpls_ethernet_interfaces = [] %}
{%     for ethernet_interface in ethernet_interfaces | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
{%         if ethernet_interface.evpn_ethernet_segment is arista.avd.defined %}
{%             do evpn_es_ethernet_interfaces.append(ethernet_interface) %}
{%             if ethernet_interface.evpn_ethernet_segment.designated_forwarder_election is arista.avd.defined %}
{%                 do evpn_dfe_ethernet_interfaces.append(ethernet_interface) %}
{%             endif %}
{%             if ethernet_interface.evpn_ethernet_segment.mpls is arista.avd.defined %}
{%                 do evpn_mpls_ethernet_interfaces.append(ethernet_interface) %}
{%             endif %}
{%         endif %}
{%     endfor %}
{%     if evpn_es_ethernet_interfaces | length > 0 %}

#### EVPN Multihoming

##### EVPN Multihoming Summary

| Interface | Ethernet Segment Identifier | Multihoming Redundancy Mode | Route Target |
| --------- | --------------------------- | --------------------------- | ------------ |
{%         for evpn_es_ethernet_interface in evpn_es_ethernet_interfaces %}
{%             set esi = evpn_es_ethernet_interface.evpn_ethernet_segment.identifier | arista.avd.default("-") %}
{%             set redundancy = evpn_es_ethernet_interface.evpn_ethernet_segment.redundancy | arista.avd.default("all-active") %}
{%             set rt = evpn_es_ethernet_interface.evpn_ethernet_segment.route_target | arista.avd.default("-") %}
| {{ evpn_es_ethernet_interface.name }} | {{ esi }} | {{ redundancy }} | {{ rt }} |
{%         endfor %}
{%         if evpn_dfe_ethernet_interfaces | length > 0 %}

##### Designated Forwarder Election Summary

| Interface | Algorithm | Preference Value | Dont Preempt | Hold time | Subsequent Hold Time | Candidate Reachability Required |
| --------- | --------- | ---------------- | ------------ | --------- | -------------------- | ------------------------------- |
{%             for evpn_dfe_ethernet_interface in evpn_dfe_ethernet_interfaces %}
{%                 set df_eth_settings = evpn_dfe_ethernet_interface.evpn_ethernet_segment.designated_forwarder_election %}
{%                 set algorithm = df_eth_settings.algorithm | arista.avd.default("modulus") %}
{%                 set pref_value = df_eth_settings.preference_value | arista.avd.default("-") %}
{%                 set dont_preempt = df_eth_settings.dont_preempt | arista.avd.default(false) %}
{%                 set hold_time = df_eth_settings.hold_time | arista.avd.default("-") %}
{%                 set subsequent_hold_time = df_eth_settings.subsequent_hold_time | arista.avd.default("-") %}
{%                 set candidate_reachability = df_eth_settings.candidate_reachability_required | arista.avd.default(false) %}
| {{ evpn_dfe_ethernet_interface.name }} | {{ algorithm }} | {{ pref_value }} | {{ dont_preempt }} | {{ hold_time }} | {{ subsequent_hold_time }} | {{ candidate_reachability }} |
{%             endfor %}
{%         endif %}
{%         if evpn_mpls_ethernet_interfaces | length > 0 %}

##### EVPN-MPLS summary

| Interface | Shared Index | Tunnel Flood Filter Time |
| --------- | ------------ | ------------------------ |
{%             for evpn_mpls_ethernet_interface in evpn_mpls_ethernet_interfaces %}
{%                 set shared_index = evpn_mpls_ethernet_interface.evpn_ethernet_segment.mpls.shared_index | arista.avd.default("-") %}
{%                 set tff_time = evpn_mpls_ethernet_interface.evpn_ethernet_segment.mpls.tunnel_flood_filter_time | arista.avd.default("-") %}
| {{ evpn_mpls_ethernet_interface.name }} | {{ shared_index }} | {{ tff_time }} |
{%             endfor %}
{%         endif %}
{%     endif %}
{%     set err_cor_enc_intfs = [] %}
{%     for ethernet_interface in ethernet_interfaces | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
{%         if ethernet_interface.error_correction_encoding is arista.avd.defined %}
{%             do err_cor_enc_intfs.append(ethernet_interface) %}
{%         endif %}
{%     endfor %}
{%     if err_cor_enc_intfs | length > 0 %}

#### Error Correction Encoding Interfaces

| Interface | Enabled |
| --------- | ------- |
{%         for ethernet_interface in err_cor_enc_intfs %}
{%             if ethernet_interface.error_correction_encoding.enabled is arista.avd.defined(false) %}
{%                 set enabled = ['Disabled'] %}
{%             else %}
{%                 set enabled = [] %}
{%                 if ethernet_interface.error_correction_encoding.fire_code is arista.avd.defined(true) %}
{%                     do enabled.append('fire-code') %}
{%                 endif %}
{%                 if ethernet_interface.error_correction_encoding.reed_solomon is arista.avd.defined(true) %}
{%                     do enabled.append('reed-solomon') %}
{%                 endif %}
{%             endif %}
| {{ ethernet_interface.name }} | {{ enabled | join('<br>') }} |
{%         endfor %}
{%     endif %}
{%     set priority_intfs = [] %}
{%     for ethernet_interface in ethernet_interfaces | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
{%         if ethernet_interface.priority_flow_control.enabled is arista.avd.defined %}
{%             do priority_intfs.append(ethernet_interface) %}
{%         endif %}
{%     endfor %}
{%     if priority_intfs | length > 0 %}

### Priority Flow Control

| Interface | PFC | Priority | Drop/No_drop |
{%         for priority_intf in priority_intfs %}
{%             if priority_intf.priority_flow_control.priorities is arista.avd.defined %}
{%                 for priority_block in priority_intf.priority_flow_control.priorities | arista.avd.natural_sort %}
{%                     set priority = priority_block.priority | arista.avd.default("-") %}
{%                     set drop_no_drop = priority_block.no_drop | arista.avd.default("-") %}
| {{ priority_intf.name }} | {{ priority_intf.priority_flow_control.enabled }} | {{ priority }} | {{ drop_no_drop }} |
{%                 endfor %}
{%             else %}
| {{ priority_intf.name }} | {{ priority_intf.priority_flow_control.enabled }} | - | - |
{%             endif %}
{%         endfor %}
{%     endif %}

### Ethernet Interfaces Device Configuration

```eos
{%     include 'eos/ethernet-interfaces.j2' %}
```
{% endif %}
{% if port_channel_interfaces is arista.avd.defined %}

## Port-Channel Interfaces

### Port-Channel Interfaces Summary

#### L2

| Interface | Description | Type | Mode | VLANs | Native VLAN | Trunk Group | LACP Fallback Timeout | LACP Fallback Mode | MLAG ID | EVPN ESI |
| --------- | ----------- | ---- | ---- | ----- | ----------- | ------------| --------------------- | ------------------ | ------- | -------- |
{%     for port_channel_interface in port_channel_interfaces | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
{%         if port_channel_interface.type is not defined or port_channel_interface.type not in ['routed', 'l3dot1q', 'l2dot1q'] %}
{%             set description = port_channel_interface.description | arista.avd.default("-") %}
{%             set type = port_channel_interface.type | arista.avd.default("switched") %}
{%             set mode = port_channel_interface.mode | arista.avd.default("access") %}
{%             set vlans = port_channel_interface.vlans | arista.avd.default("-") %}
{%             if  port_channel_interface.native_vlan_tag is arista.avd.defined(true) %}
{%                 set native_vlan = "tag" %}
{%             else %}
{%                 set native_vlan = port_channel_interface.native_vlan | arista.avd.default("-") %}
{%             endif %}
{%             if port_channel_interface.trunk_groups is defined %}
{%                 set l2 = namespace() %}
{%                 set l2.trunk_groups = [] %}
{%                 for trunk_group in port_channel_interface.trunk_groups | arista.avd.natural_sort %}
{%                     do l2.trunk_groups.append(trunk_group) %}
{%                 endfor %}
{%             else %}
{%                 set l2 = namespace() %}
{%                 set l2.trunk_groups = "-" %}
{%             endif %}
{%             set lacp_fallback_timeout = port_channel_interface.lacp_fallback_timeout | arista.avd.default("-") %}
{%             set lacp_fallback_mode = port_channel_interface.lacp_fallback_mode | arista.avd.default("-") %}
{%             set mlag = port_channel_interface.mlag | arista.avd.default("-") %}
{%             set esi = port_channel_interface.evpn_ethernet_segment.identifier | arista.avd.default(port_channel_interface.esi, "-") %}
| {{ port_channel_interface.name }} | {{ description }} | {{ type }} | {{ mode }} | {{ vlans }} | {{ native_vlan }} | {{ l2.trunk_groups }} | {{ lacp_fallback_timeout }} | {{ lacp_fallback_mode }} | {{ mlag }} | {{ esi }} |
{%         endif %}
{%     endfor %}
{# Encapsulation #}
{%     set encapsulation_dot1q_interfaces = [] %}
{%     set flexencap_interfaces = [] %}
{%     for port_channel_interface in port_channel_interfaces | arista.avd.convert_dicts('name') %}
{%         if port_channel_interface.type | arista.avd.default in ['l3dot1q', 'l2dot1q'] %}
{%             if port_channel_interface.encapsulation_dot1q_vlan is arista.avd.defined %}
{%                 do encapsulation_dot1q_interfaces.append(port_channel_interface) %}
{%             elif port_channel_interface.encapsulation_vlan is arista.avd.defined %}
{%                 do flexencap_interfaces.append(port_channel_interface) %}
{%             endif %}
{%         endif %}
{%     endfor %}
{%     if encapsulation_dot1q_interfaces | length > 0 %}

#### Encapsulation Dot1q Interfaces

| Interface | Description | Type | Vlan ID | Dot1q VLAN Tag |
| --------- | ----------- | -----| ------- | -------------- |
{%         for port_channel_interface in encapsulation_dot1q_interfaces | arista.avd.natural_sort('name') %}
{%             set description = port_channel_interface.description | arista.avd.default('-') %}
{%             set type = port_channel_interface.type %}
{%             set vlan_id = port_channel_interface.vlan_id | arista.avd.default('-') %}
{%             set encapsulation_dot1q_vlan = port_channel_interface.encapsulation_dot1q_vlan | arista.avd.default('-') %}
| {{ port_channel_interface.name }} | {{ description }} | {{ type }} | {{ vlan_id }} | {{ encapsulation_dot1q_vlan }} |
{%         endfor %}
{%     endif %}
{%     if flexencap_interfaces | length > 0 %}

#### Flexible Encapsulation Interfaces

| Interface | Description | Type | Vlan ID | Client Unmatched | Client Dot1q VLAN | Client Dot1q Outer Tag | Client Dot1q Inner Tag | Network Retain Client Encapsulation | Network Dot1q VLAN | Network Dot1q Outer Tag | Network Dot1q Inner Tag |
| --------- | ----------- | ---- | ------- | -----------------| ----------------- | ---------------------- | ---------------------- | ----------------------------------- | ------------------ | ----------------------- | ----------------------- |
{%         for port_channel_interface in flexencap_interfaces | arista.avd.natural_sort('name') %}
{%             set description = port_channel_interface.description | arista.avd.default("-") %}
{%             set type = port_channel_interface.type %}
{%             set vlan_id = port_channel_interface.vlan_id | arista.avd.default('-') %}
{%             set client_unmatched = port_channel_interface.encapsulation_vlan.client.unmatched | arista.avd.default(false) %}
{%             set client_dot1q_vlan = port_channel_interface.encapsulation_vlan.client.dot1q.vlan | arista.avd.default("-") %}
{%             set client_dot1q_outer = port_channel_interface.encapsulation_vlan.client.dot1q.outer | arista.avd.default("-") %}
{%             set client_dot1q_inner = port_channel_interface.encapsulation_vlan.client.dot1q.inner | arista.avd.default("-") %}
{%             set network_client = port_channel_interface.encapsulation_vlan.network.client | arista.avd.default(false) %}
{%             set network_dot1q_vlan = port_channel_interface.encapsulation_vlan.network.dot1q.vlan | arista.avd.default("-") %}
{%             set network_dot1q_outer = port_channel_interface.encapsulation_vlan.network.dot1q.outer | arista.avd.default("-") %}
{%             set network_dot1q_inner = port_channel_interface.encapsulation_vlan.network.dot1q.inner | arista.avd.default("-") %}
| {{ port_channel_interface.name }} | {{ description }} | {{ type }} | {{ vlan_id }} | {{ client_unmatched }} | {{ client_dot1q_vlan }} | {{ client_dot1q_outer }} | {{ client_dot1q_inner }} | {{ network_client }} | {{ network_dot1q_vlan }} | {{ network_dot1q_outer }} | {{ network_dot1q_inner }} |
{%         endfor %}
{%     endif %}
{# PVLAN #}
{%     set port_channel_interface_pvlan = namespace() %}
{%     set port_channel_interface_pvlan.configured = false %}
{%     for port_channel_interface in port_channel_interfaces | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
{%         if port_channel_interface.pvlan_mapping is arista.avd.defined or
              port_channel_interface.trunk_private_vlan_secondary is arista.avd.defined %}
{%             set port_channel_interface_pvlan.configured = true %}
{%             break %}
{%         endif %}
{%     endfor %}
{%     if port_channel_interface_pvlan.configured %}

#### Private VLAN

| Interface | PVLAN Mapping | Secondary Trunk |
| --------- | ------------- | ----------------|
{%         for port_channel_interface in port_channel_interfaces | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
{%             if port_channel_interface.pvlan_mapping is arista.avd.defined or
               port_channel_interface.trunk_private_vlan_secondary is arista.avd.defined %}
{%                 set row_pvlan_mapping = port_channel_interface.pvlan_mapping | arista.avd.default('-') %}
{%                 set row_trunk_private_vlan_secondary = port_channel_interface.trunk_private_vlan_secondary | arista.avd.default('-') %}
| {{ port_channel_interface.name }} | {{ row_pvlan_mapping }} | {{ row_trunk_private_vlan_secondary }} |
{%             endif %}
{%         endfor %}
{%     endif %}
{# VLAN Translations #}
{%     set port_channel_interface_vlan_xlate = namespace() %}
{%     set port_channel_interface_vlan_xlate.configured = false %}
{%     for port_channel_interface in port_channel_interfaces | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
{%         if port_channel_interface.vlan_translations is arista.avd.defined %}
{%             set port_channel_interface_vlan_xlate.configured = true %}
{%             break %}
{%         endif %}
{%     endfor %}
{%     if port_channel_interface_vlan_xlate.configured %}

#### VLAN Translations

| Interface | From VLAN ID(s) | To VLAN ID | Direction |
| --------- | --------------- | -----------| --------- |
{%         for port_channel_interface in port_channel_interfaces | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
{%             if port_channel_interface.vlan_translations is arista.avd.defined %}
{%                 for vlan_translation in port_channel_interface.vlan_translations | arista.avd.natural_sort %}
{%                     if vlan_translation.from is arista.avd.defined and vlan_translation.to is arista.avd.defined %}
{%                         set row_direction = vlan_translation.direction | arista.avd.default('both') %}
| {{ port_channel_interface.name }} | {{ vlan_translation.from }} | {{ vlan_translation.to }} | {{ row_direction }}
{%                     endif %}
{%                 endfor %}
{%             endif %}
{%         endfor %}
{%     endif %}
{#     Fecth EVPN multihoming and Link Tracking variables #}
{%     set evpn_es_po_interfaces = [] %}
{%     set evpn_dfe_po_interfaces = [] %}
{%     set evpn_mpls_po_interfaces = [] %}
{%     set link_tracking_interfaces = [] %}
{%     for port_channel_interface in port_channel_interfaces | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
{%         if port_channel_interface.evpn_ethernet_segment is arista.avd.defined %}
{%             do evpn_es_po_interfaces.append(port_channel_interface) %}
{%             if port_channel_interface.evpn_ethernet_segment.designated_forwarder_election is arista.avd.defined %}
{%                 do evpn_dfe_po_interfaces.append(port_channel_interface) %}
{%             endif %}
{%             if port_channel_interface.evpn_ethernet_segment.mpls is arista.avd.defined %}
{%                 do evpn_mpls_po_interfaces.append(port_channel_interface) %}
{%             endif %}
{%         endif %}
{%         if port_channel_interface.link_tracking_groups is arista.avd.defined %}
{%             do link_tracking_interfaces.append(port_channel_interface) %}
{%         endif %}
{%     endfor %}
{#     EVPN Multihoming #}
{%     if evpn_es_po_interfaces | length > 0 %}

#### EVPN Multihoming

##### EVPN Multihoming Summary

| Interface | Ethernet Segment Identifier | Multihoming Redundancy Mode | Route Target |
| --------- | --------------------------- | --------------------------- | ------------ |
{%         for evpn_es_po_interface in evpn_es_po_interfaces | arista.avd.natural_sort('name') %}
{%             set esi = evpn_es_po_interface.evpn_ethernet_segment.identifier | arista.avd.default(evpn_es_po_interface.esi, "-") %}
{%             set redundancy = evpn_es_po_interface.evpn_ethernet_segment.redundancy | arista.avd.default("all-active") %}
{%             set rt = evpn_es_po_interface.evpn_ethernet_segment.route_target | arista.avd.default(evpn_es_po_interface.rt, "-") %}
| {{ evpn_es_po_interface.name }} | {{ esi }} | {{ redundancy }} | {{ rt }} |
{%         endfor %}
{%         if evpn_dfe_po_interfaces | length > 0 %}

##### Designated Forwarder Election Summary

| Interface | Algorithm | Preference Value | Dont Preempt | Hold time | Subsequent Hold Time | Candidate Reachability Required |
| --------- | --------- | ---------------- | ------------ | --------- | -------------------- | ------------------------------- |
{%             for evpn_dfe_po_interface in evpn_dfe_po_interfaces | arista.avd.natural_sort('name') %}
{%                 set df_po_settings = evpn_dfe_po_interface.evpn_ethernet_segment.designated_forwarder_election %}
{%                 set algorithm = df_po_settings.algorithm | arista.avd.default("modulus") %}
{%                 set pref_value = df_po_settings.preference_value | arista.avd.default("-") %}
{%                 set dont_preempt = df_po_settings.dont_preempt | arista.avd.default(false) %}
{%                 set hold_time = df_po_settings.hold_time | arista.avd.default("-") %}
{%                 set subsequent_hold_time = df_po_settings.subsequent_hold_time | arista.avd.default("-") %}
{%                 set candidate_reachability = df_po_settings.candidate_reachability_required | arista.avd.default(false) %}
| {{ evpn_dfe_po_interface.name }} | {{ algorithm }} | {{ pref_value }} | {{ dont_preempt }} | {{ hold_time }} | {{ subsequent_hold_time }} | {{ candidate_reachability }} |
{%             endfor %}
{%         endif %}
{%         if evpn_mpls_po_interfaces | length > 0 %}

##### EVPN-MPLS summary

| Interface | Shared Index | Tunnel Flood Filter Time |
| --------- | ------------ | ------------------------ |
{%             for evpn_mpls_po_interface in evpn_mpls_po_interfaces | arista.avd.natural_sort %}
{%                 set shared_index = evpn_mpls_po_interface.evpn_ethernet_segment.mpls.shared_index | arista.avd.default("-") %}
{%                 set tff_time = evpn_mpls_po_interface.evpn_ethernet_segment.mpls.tunnel_flood_filter_time | arista.avd.default("-") %}
| {{ evpn_mpls_po_interface.name }} | {{ shared_index }} | {{ tff_time }} |
{%             endfor %}
{%         endif %}
{%     endif %}
{#     Link Tracking Groups #}
{%     if link_tracking_interfaces | length > 0 %}

#### Link Tracking Groups

| Interface | Group Name | Direction |
| --------- | ---------- | --------- |
{%         for link_tracking_interface in link_tracking_interfaces | arista.avd.natural_sort('name') %}
{%             for link_tracking_group in link_tracking_interface.link_tracking_groups | arista.avd.natural_sort('name') %}
{%                 if link_tracking_group.name is arista.avd.defined and link_tracking_group.direction is arista.avd.defined %}
| {{ link_tracking_interface.name }} | {{ link_tracking_group.name }} | {{ link_tracking_group.direction }} |
{%                 endif %}
{%             endfor %}
{%         endfor %}
{%     endif %}
{# IPv4 #}
{%     set port_channel_interface_ipv4 = namespace() %}
{%     set port_channel_interface_ipv4.configured = false %}
{%     for port_channel_interface in port_channel_interfaces | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
{%         if port_channel_interface.type is defined and port_channel_interface.type in ['routed', 'l3dot1q'] and port_channel_interface.ip_address is defined %}
{%             set port_channel_interface_ipv4.configured = true %}
{%         endif %}
{%     endfor %}
{%     if port_channel_interface_ipv4.configured %}

#### IPv4

| Interface | Description | Type | MLAG ID | IP Address | VRF | MTU | Shutdown | ACL In | ACL Out |
| --------- | ----------- | ---- | ------- | ---------- | --- | --- | -------- | ------ | ------- |
{%         for port_channel_interface in port_channel_interfaces | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
{%             if port_channel_interface.type is defined and port_channel_interface.type in ['routed', 'l3dot1q'] and port_channel_interface.ip_address is arista.avd.defined %}
{%                 set description = port_channel_interface.description | arista.avd.default("-") %}
{%                 set type = "routed" %}
{%                 set mlag = port_channel_interface.mlag | arista.avd.default("-") %}
{%                 set ip_address = port_channel_interface.ip_address | arista.avd.default("-") %}
{%                 set vrf = port_channel_interface.vrf | arista.avd.default("default") %}
{%                 set mtu = port_channel_interface.mtu | arista.avd.default("-") %}
{%                 set shutdown = port_channel_interface.shutdown | arista.avd.default("-") %}
{%                 set acl_in = port_channel_interface.access_group_in | arista.avd.default("-") %}
{%                 set acl_out = port_channel_interface.access_group_out | arista.avd.default("-") %}
| {{ port_channel_interface.name }} | {{ description }} | {{ type }} | {{ mlag }} | {{ ip_address }} | {{ vrf }} | {{ mtu }} | {{ shutdown }} | {{ acl_in }} | {{ acl_out }} |
{%             endif %}
{%         endfor %}
{%     endif %}
{# IPv6 #}
{%     set port_channel_interface_ipv6 = namespace() %}
{%     set port_channel_interface_ipv6.configured = false %}
{%     for port_channel_interface in port_channel_interfaces | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
{%         if port_channel_interface.type is defined and port_channel_interface.type in ['routed', 'l3dot1q'] and port_channel_interface.ipv6_address is defined %}
{%             set port_channel_interface_ipv6.configured = true %}
{%         endif %}
{%     endfor %}
{%     if port_channel_interface_ipv6.configured %}

#### IPv6

| Interface | Description | Type | MLAG ID | IPv6 Address | VRF | MTU | Shutdown | ND RA Disabled | Managed Config Flag | IPv6 ACL In | IPv6 ACL Out |
| --------- | ----------- | ---- | ------- | -------------| --- | --- | -------- | -------------- | ------------------- | ----------- | ------------ |
{%         for port_channel_interface in port_channel_interfaces | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
{%             if port_channel_interface.type is defined and port_channel_interface.type in ['routed', 'l3dot1q'] and port_channel_interface.ipv6_address is arista.avd.defined %}
{%                 set description = port_channel_interface.description | arista.avd.default("-") %}
{%                 set type = "routed" %}
{%                 set mlag = port_channel_interface.mlag | arista.avd.default("-") %}
{%                 set ipv6_address = port_channel_interface.ipv6_address | arista.avd.default("-") %}
{%                 set vrf = port_channel_interface.vrf | arista.avd.default("default") %}
{%                 set mtu = port_channel_interface.mtu | arista.avd.default("-") %}
{%                 set shutdown = port_channel_interface.shutdown | arista.avd.default("-") %}
{%                 set ipv6_nd_ra_disabled = port_channel_interface.ipv6_nd_ra_disabled | arista.avd.default("-") %}
{%                 if port_channel_interface.ipv6_nd_managed_config_flag is arista.avd.defined %}
{%                     set ipv6_nd_managed_config_flag = port_channel_interface.ipv6_nd_managed_config_flag %}
{%                 else %}
{%                     set ipv6_nd_managed_config_flag = '-' %}
{%                 endif %}
{%                 set ipv6_acl_in = port_channel_interface.ipv6_access_group_in | arista.avd.default("-") %}
{%                 set ipv6_acl_out = port_channel_interface.ipv6_access_group_out | arista.avd.default("-") %}
| {{ port_channel_interface.name }} | {{ description }} | {{ type }} | {{ mlag }} | {{ ipv6_address }} | {{ vrf }} | {{ mtu }} | {{ shutdown }} | {{ ipv6_nd_ra_disabled }} | {{ ipv6_nd_managed_config_flag }} | {{ ipv6_acl_in }} | {{ ipv6_acl_out }} |
{%             endif %}
{%         endfor %}
{%     endif %}
{# ISIS #}
{%     set port_channel_interfaces_isis = [] %}
{%     for port_channel_interface in port_channel_interfaces | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
{%         if port_channel_interface.isis_enable is arista.avd.defined or
               port_channel_interface.isis_metric is arista.avd.defined or
               port_channel_interface.isis_circuit_type is arista.avd.defined or
               port_channel_interface.isis_network_point_to_point is arista.avd.defined or
               port_channel_interface.isis_passive is arista.avd.defined or
               port_channel_interface.isis_hello_padding is arista.avd.defined or
               port_channel_interface.isis_authentication_mode is arista.avd.defined %}
{%             do port_channel_interfaces_isis.append(port_channel_interface) %}
{%         endif %}
{%     endfor %}
{%     if port_channel_interfaces_isis | length > 0 %}

#### ISIS

| Interface | ISIS Instance | ISIS Metric | Mode | ISIS Circuit Type | Hello Padding | Authentication Mode |
| --------- | ------------- | ----------- | ---- | ----------------- | ------------- | ------------------- |
{%         for port_channel_interface in port_channel_interfaces_isis | arista.avd.natural_sort('name') %}
{%             set isis_instance = port_channel_interface.isis_enable | arista.avd.default("-") %}
{%             set isis_metric = port_channel_interface.isis_metric | arista.avd.default("-") %}
{%             set isis_circuit_type = port_channel_interface.isis_circuit_type | arista.avd.default("-") %}
{%             set isis_hello_padding = port_channel_interface.isis_hello_padding | arista.avd.default("-") %}
{%             set isis_authentication_mode = port_channel_interface.isis_authentication_mode | arista.avd.default("-") %}
{%             if port_channel_interface.isis_network_point_to_point is arista.avd.defined(true) %}
{%                 set mode = "point-to-point" %}
{%             elif port_channel_interface.isis_passive is arista.avd.defined(true) %}
{%                 set mode = "passive" %}
{%             else %}
{%                 set mode = "-" %}
{%             endif %}
| {{ port_channel_interface.name }} | {{ isis_instance }} | {{ isis_metric }} | {{ mode }} | {{ isis_circuit_type }} | {{ isis_hello_padding }} | {{ isis_authentication_mode }} |
{%         endfor %}
{%     endif %}

### Port-Channel Interfaces Device Configuration

```eos
{%     include 'eos/port-channel-interfaces.j2' %}
```
{% endif %}
{% if loopback_interfaces is defined and loopback_interfaces is not none %}

## Loopback Interfaces

### Loopback Interfaces Summary

#### IPv4

| Interface | Description | VRF | IP Address |
| --------- | ----------- | --- | ---------- |
{%     for loopback_interface in loopback_interfaces | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
{%         set vrf = loopback_interface.vrf | arista.avd.default('default') %}
{%         if loopback_interface.ip_address is arista.avd.defined %}
{%             set ip = loopback_interface.ip_address %}
{%             if loopback_interface.ip_address_secondaries is arista.avd.defined %}
{%                 set ip = loopback_interface.ip_address ~ ' <br> ' ~ loopback_interface.ip_address_secondaries | join(' secondary <br> ') ~ ' secondary' %}
{%             endif %}
{%         endif %}
{%         set description = loopback_interface.description | arista.avd.default('-') %}
| {{ loopback_interface.name }} | {{ description }} | {{ vrf }} | {{ ip | arista.avd.default('-') }} |
{%     endfor %}

#### IPv6

| Interface | Description | VRF | IPv6 Address |
| --------- | ----------- | --- | ------------ |
{%     for loopback_interface in loopback_interfaces | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
{%         set ip = loopback_interface.vrf | arista.avd.default('default') %}
{%         set ipv6 = loopback_interface.ipv6_address | arista.avd.default('-') %}
{%         set description = loopback_interface.description | arista.avd.default('-') %}
| {{ loopback_interface.name }} | {{ description }} | {{ ip }} | {{ ipv6 }} |
{%     endfor %}

{%     set loopback_interface_isis = namespace() %}
{%     set loopback_interface_isis.configured = false %}
{%     for loopback_interface in loopback_interfaces | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
{%         if loopback_interface.isis_enable is arista.avd.defined %}
{%             set loopback_interface_isis.configured = true %}
{%         endif %}
{%     endfor %}
{%     if loopback_interface_isis.configured == true %}
#### ISIS

| Interface | ISIS instance | ISIS metric | Interface mode |
| --------- | ------------- | ----------- | -------------- |
{%         for loopback_interface in loopback_interfaces | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
{%             if loopback_interface.isis_enable is arista.avd.defined %}
{%                 if loopback_interface.isis_network_point_to_point is arista.avd.defined %}
{%                     set mode = 'point-to-point' %}
{%                 elif loopback_interface.isis_passive is arista.avd.defined %}
{%                     set mode = 'passive' %}
{%                 endif %}
| {{ loopback_interface.name }} | {{ loopback_interface.isis_enable }} | {{ loopback_interface.isis_metric | arista.avd.default('-') }} | {{ mode | arista.avd.default('-') }} |
{%             endif %}
{%         endfor %}
{%     endif %}

### Loopback Interfaces Device Configuration

```eos
{%     include 'eos/loopback-interfaces.j2' %}
```
{% endif %}
{% if vlan_interfaces is defined and vlan_interfaces is not none %}

## VLAN Interfaces

### VLAN Interfaces Summary

| Interface | Description | VRF |  MTU | Shutdown |
| --------- | ----------- | --- | ---- | -------- |
{%     for vlan_interface in vlan_interfaces | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
{%         set description = vlan_interface.description | arista.avd.default('-') %}
{%         set vrf = vlan_interface.vrf | arista.avd.default('default') %}
{%         set mtu = vlan_interface.mtu | arista.avd.default('-') %}
{%         if vlan_interface.shutdown is arista.avd.defined %}
{%             set shutdown = vlan_interface.shutdown %}
{%         else %}
{%             set shutdown = '-' %}
{%         endif %}
| {{ vlan_interface.name }} | {{ description }} | {{ vrf }} | {{ mtu }} | {{ shutdown }} |
{%     endfor %}
{# PVLAN #}
{%     set vlan_interface_pvlan = namespace() %}
{%     set vlan_interface_pvlan.configured = false %}
{%     for vlan_interface in vlan_interfaces | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
{%         if vlan_interface.pvlan_mapping is arista.avd.defined %}
{%             set vlan_interface_pvlan.configured = true %}
{%             break %}
{%         endif %}
{%     endfor %}
{%     if vlan_interface_pvlan.configured == true %}

#### Private VLAN

| Interface | PVLAN Mapping |
| --------- | ------------- |
{%         for vlan_interface in vlan_interfaces | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
{%             if vlan_interface.pvlan_mapping is arista.avd.defined %}
| {{ vlan_interface.name }} | {{ vlan_interface.pvlan_mapping }} |
{%             endif %}
{%         endfor %}
{%     endif %}

#### IPv4

| Interface | VRF | IP Address | IP Address Virtual | IP Router Virtual Address | VRRP | ACL In | ACL Out |
| --------- | --- | ---------- | ------------------ | ------------------------- | ---- | ------ | ------- |
{%     for vlan_interface in vlan_interfaces | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
{%         set row_vrf = vlan_interface.vrf | arista.avd.default('default') %}
{%         set row_ip_addr = vlan_interface.ip_address | arista.avd.default('-') %}
{%         set row_ip_vaddr = vlan_interface.ip_address_virtual | arista.avd.default('-') %}
{%         set row_varp = vlan_interface.ip_virtual_router_addresses | arista.avd.default('-') | join(", ") %}
{%         set row_vrrp = vlan_interface.vrrp.ipv4 | arista.avd.default('-') %}
{%         set row_acl_in = vlan_interface.access_group_in | arista.avd.default('-') %}
{%         set row_acl_out = vlan_interface.access_group_out | arista.avd.default('-') %}
| {{ vlan_interface.name }} |  {{ row_vrf }}  |  {{ row_ip_addr }}  |  {{ row_ip_vaddr }}  |  {{ row_varp }}  |  {{ row_vrrp }}  |  {{ row_acl_in }}  |  {{ row_acl_out }}  |
{%     endfor %}
{# IPv6 #}
{%     set vlan_interfaces_ipv6 = [] %}
{%     for vlan_interface in vlan_interfaces | arista.avd.default([]) | arista.avd.convert_dicts('name') %}
{%         if vlan_interface.ipv6_address is arista.avd.defined or vlan_interface.ipv6_address_virtual is arista.avd.defined %}
{# add also a test against ipv6_address_virtual when supported #}
{%             do vlan_interfaces_ipv6.append(vlan_interface) %}
{%         endif %}
{%     endfor %}
{%     if vlan_interfaces_ipv6 | length > 0 %}

#### IPv6

| Interface | VRF | IPv6 Address | IPv6 Virtual Address | Virtual Router Address | VRRP | ND RA Disabled | Managed Config Flag | IPv6 ACL In | IPv6 ACL Out |
| --------- | --- | ------------ | -------------------- | ---------------------- | ---- | -------------- | ------------------- | ----------- | ------------ |
{%         for vlan_interface in vlan_interfaces_ipv6 | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
{%             set row_vrf = vlan_interface.vrf | arista.avd.default('default') %}
{%             set row_ip_addr = vlan_interface.ipv6_address | arista.avd.default('-') %}
{%             set row_ip_vaddr = vlan_interface.ipv6_address_virtual | arista.avd.default('-') %}
{%             if vlan_interface.ipv6_virtual_router_addresses is arista.avd.defined %}
{%                 set row_varp = vlan_interface.ipv6_virtual_router_addresses | join(", ") %}
{%             else %}
{%                 set row_varp = vlan_interface.ipv6_virtual_router_address | arista.avd.default('-') %}
{%             endif %}
{%             set row_vrrp = vlan_interface.vrrp.ipv6 | arista.avd.default('-') %}
{%             set row_nd_ra_disabled = vlan_interface.ipv6_nd_ra_disabled | arista.avd.default('-') %}
{%             set row_nd_man_cfg = vlan_interface.ipv6_nd_managed_config_flag | arista.avd.default('-') %}
{%             set row_acl_in = vlan_interface.ipv6_access_group_in | arista.avd.default('-') %}
{%             set row_acl_out = vlan_interface.ipv6_access_group_out | arista.avd.default('-') %}
| {{ vlan_interface.name }} | {{ row_vrf }} | {{ row_ip_addr }} | {{ row_ip_vaddr }} | {{ row_varp }} | {{ row_vrrp }} | {{ row_nd_ra_disabled }} | {{ row_nd_man_cfg }} | {{ row_acl_in }} | {{ row_acl_out }} |
{%         endfor %}
{%     endif %}
{# VRRP #}
{%     set vlan_interfaces_vrrp_details = [] %}
{%     for vlan_interface in vlan_interfaces | arista.avd.default([]) | arista.avd.convert_dicts('name') %}
{%         if vlan_interface.vrrp_ids is arista.avd.defined %}
{%             do vlan_interfaces_vrrp_details.append(vlan_interface) %}
{%         endif %}
{%     endfor %}
{%     if vlan_interfaces_vrrp_details | length > 0 %}

#### VRRP Details

| Interface | VRRP-ID | Priority | Advertisement Interval | Preempt | Tracked Object Name(s) | Tracked Object Action(s) | IPv4 Virtual IP | IPv4 VRRP Version | IPv6 Virtual IP |
| --------- | ------- | -------- | ---------------------- | --------| ---------------------- | ------------------------ | --------------- | ----------------- | --------------- |
{%         for vlan_interface in vlan_interfaces_vrrp_details | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
{%             for vrid in vlan_interface.vrrp_ids if vrid.id is arista.avd.defined %}
{%                 set row_id = vrid.id %}
{%                 set row_prio_level = vrid.priority_level | arista.avd.default('-') %}
{%                 set row_ad_interval = vrid.advertisement.interval | arista.avd.default('-') %}
{%                 set row_preempt = "Enabled" %}
{%                 if vrid.preempt.enabled is arista.avd.defined(false) %}
{%                     set row_preempt = "Disabled" %}
{%                 endif %}
{%                 if vrid.tracked_object is arista.avd.defined %}
{%                     set row_tracked_object_name = [] %}
{%                     set row_tracked_object_action = [] %}
{%                     for tracked_obj in vrid.tracked_object | arista.avd.natural_sort('name') %}
{%                         do row_tracked_object_name.append(tracked_obj.name) %}
{%                         if tracked_obj.shutdown is arista.avd.defined(true) %}
{%                             do row_tracked_object_action.append("Shutdown") %}
{%                         elif tracked_obj.decrement is arista.avd.defined %}
{%                             do row_tracked_object_action.append("Decrement " ~ tracked_obj.decrement) %}
{%                         endif %}
{%                     endfor %}
{%                     set row_tracked_object_name = row_tracked_object_name | join(", ") %}
{%                     set row_tracked_object_action = row_tracked_object_action | join(", ") %}
{%                 endif %}
{%                 set row_ipv4_virt = vrid.ipv4.address | arista.avd.default('-') %}
{%                 set row_ipv4_vers = vrid.ipv4.version | arista.avd.default('2') %}
{%                 set row_ipv6_virt = vrid.ipv6.address | arista.avd.default('-') %}
| {{ vlan_interface.name }} | {{ row_id }} | {{ row_prio_level }} | {{ row_ad_interval }} | {{ row_preempt }} | {{ row_tracked_object_name | arista.avd.default('-') }} | {{ row_tracked_object_action | arista.avd.default('-') }} | {{ row_ipv4_virt }} | {{ row_ipv4_vers }} | {{ row_ipv6_virt }} |
{%             endfor %}
{%         endfor %}
{%     endif %}
{# ISIS #}
{%     set vlan_interface_isis = namespace() %}
{%     set vlan_interface_isis.configured = false %}
{%     for vlan_interface in vlan_interfaces | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
{%         if vlan_interface.isis_enable is defined %}
{%             set vlan_interface_isis.configured = true %}
{%             break %}
{%         endif %}
{%     endfor %}
{%     if vlan_interface_isis.configured == true %}

#### ISIS

| Interface | ISIS Instance | ISIS Metric | Mode |
| --------- | ------------- | ----------- | ---- |
{%         for vlan_interface in vlan_interfaces | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
{%             if vlan_interface.isis_enable is arista.avd.defined %}
{%                 set isis_metric = vlan_interface.isis_metric | arista.avd.default('-') %}
{%                 if vlan_interface.isis_network_point_to_point is arista.avd.defined %}
{%                     set mode = "point-to-point" %}
{%                 elif vlan_interface.isis_passive is arista.avd.defined %}
{%                     set mode = "passive" %}
{%                 else %}
{%                     set mode = "-" %}
{%                 endif %}
| {{ vlan_interface.name }} | {{ vlan_interface.isis_enable }} | {{ isis_metric }} | {{ mode }} |
{%             endif %}
{%         endfor %}
{%     endif %}
{# Multicast Routing #}
{%     set multicast_interfaces = [] %}
{%     for vlan_interface in vlan_interfaces | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
{%         if vlan_interface.multicast is arista.avd.defined %}
{%             do multicast_interfaces.append(vlan_interface) %}
{%         endif %}
{%     endfor %}
{%     if multicast_interfaces | length > 0 %}

#### Multicast Routing

| Interface | IP Version | Static Routes Allowed | Multicast Boundaries | Export Host Routes For Multicast Sources |
| --------- | ---------- | --------------------- | -------------------- | ---------------------------------------- |
{%         for multicast_interface in multicast_interfaces %}
{%             if multicast_interface.multicast.ipv4 is arista.avd.defined %}
{%                 set static = multicast_interface.multicast.ipv4.static | arista.avd.default('-') %}
{%                 if multicast_interface.multicast.ipv4.boundaries is arista.avd.defined %}
{%                     set boundaries = multicast_interface.multicast.ipv4.boundaries | selectattr('boundary', 'arista.avd.defined') |
                                                                                        map(attribute='boundary') |
                                                                                        join(', ') %}
{%                 else %}
{%                     set boundaries = '-' %}
{%                 endif %}
{%                 set source_route_export = multicast_interface.multicast.ipv4.source_route_export.enabled | arista.avd.default('-') %}
| {{ multicast_interface.name }} | IPv4 | {{ static }} | {{ boundaries }} | {{ source_route_export }} |
{%             endif %}
{%             if multicast_interface.multicast.ipv6 is arista.avd.defined %}
{%                 set static = multicast_interface.multicast.ipv6.static | arista.avd.default('-') %}
{%                 if multicast_interface.multicast.ipv6.boundaries is arista.avd.defined %}
{%                     set boundaries = multicast_interface.multicast.ipv6.boundaries | selectattr('boundary', 'arista.avd.defined') |
                                                                                        map(attribute='boundary') |
                                                                                        join(', ') %}
{%                 else %}
{%                     set boundaries = '-' %}
{%                 endif %}
{%                 set source_route_export = multicast_interface.multicast.ipv6.source_route_export.enabled | arista.avd.default('-') %}
| {{ multicast_interface.name }} | IPv6 | {{ static }} | {{ boundaries }} | {{ source_route_export }} |
{%             endif %}
{%         endfor %}
{%     endif %}

### VLAN Interfaces Device Configuration

```eos
{%     include 'eos/vlan-interfaces.j2' %}
```
{% endif %}
{# j2lint: disable=V1 #}
{% if vxlan_interface.Vxlan1 is arista.avd.defined %}

## VXLAN Interface

### VXLAN Interface Summary

| Setting | Value |
| ------- | ----- |
{%     if vxlan_interface.Vxlan1.vxlan.source_interface is arista.avd.defined %}
| Source Interface | {{ vxlan_interface.Vxlan1.vxlan.source_interface }} |
{%     endif %}
{%     if vxlan_interface.Vxlan1.vxlan.mlag_source_interface is arista.avd.defined %}
| MLAG Source Interface | {{ vxlan_interface.Vxlan1.vxlan.mlag_source_interface }} |
{%     endif %}
| UDP port | {{ vxlan_interface.Vxlan1.vxlan.udp_port | arista.avd.default('4789') }} |
{%     if vxlan_interface.Vxlan1.vxlan.virtual_router_encapsulation_mac_address is arista.avd.defined %}
| EVPN MLAG Shared Router MAC | {{ vxlan_interface.Vxlan1.vxlan.virtual_router_encapsulation_mac_address }} |
{%     endif %}
{%     if vxlan_interface.Vxlan1.vxlan.flood_vtep_learned_data_plane is arista.avd.defined(true) %}
| VXLAN flood-lists learning from data-plane | Enabled |
{%     elif vxlan_interface.Vxlan1.vxlan.flood_vtep_learned_data_plane is arista.avd.defined(false) %}
| VXLAN flood-lists learning from data-plane | Disabled |
{%     endif %}
{%     if vxlan_interface.Vxlan1.vxlan.qos.dscp_propagation_encapsulation is arista.avd.defined(true) %}
| Qos dscp propagation encapsulation | Enabled |
{%     elif vxlan_interface.Vxlan1.vxlan.qos.dscp_propagation_encapsulation is arista.avd.defined(false) %}
| Qos dscp propagation encapsulation | Disabled |
{%     endif %}
{%     if vxlan_interface.Vxlan1.vxlan.qos.map_dscp_to_traffic_class_decapsulation is arista.avd.defined(true) %}
| Qos map dscp to traffic-class decapsulation | Enabled |
{%     elif vxlan_interface.Vxlan1.vxlan.qos.map_dscp_to_traffic_class_decapsulation is arista.avd.defined(false) %}
| Qos map dscp to traffic-class decapsulation | Disabled |
{%     endif %}
{%     if vxlan_interface.Vxlan1.vxlan.bfd_vtep_evpn is arista.avd.defined %}
{%         if vxlan_interface.Vxlan1.vxlan.bfd_vtep_evpn.interval is arista.avd.defined %}
| Remote VTEPs EVPN BFD transmission rate | {{ vxlan_interface.Vxlan1.vxlan.bfd_vtep_evpn.interval }}ms |
{%         endif %}
{%         if vxlan_interface.Vxlan1.vxlan.bfd_vtep_evpn.min_rx is arista.avd.defined %}
| Remote VTEPs EVPN BFD expected minimum incoming rate (min-rx) | {{ vxlan_interface.Vxlan1.vxlan.bfd_vtep_evpn.min_rx }}ms |
{%         endif %}
{%         if vxlan_interface.Vxlan1.vxlan.bfd_vtep_evpn.multiplier is arista.avd.defined %}
| Remote VTEPs EVPN BFD multiplier | {{ vxlan_interface.Vxlan1.vxlan.bfd_vtep_evpn.multiplier }} |
{%         endif %}
{%         if vxlan_interface.Vxlan1.vxlan.bfd_vtep_evpn.prefix_list is arista.avd.defined %}
| Remote VTEPs EVPN BFD prefix-list | {{ vxlan_interface.Vxlan1.vxlan.bfd_vtep_evpn.prefix_list }} |
{%         endif %}
{%     endif %}
{%     if vxlan_interface.Vxlan1.vxlan.vlans is arista.avd.defined %}

#### VLAN to VNI, Flood List and Multicast Group Mappings

| VLAN | VNI | Flood List | Multicast Group |
| ---- | --- | ---------- | --------------- |
{%         for vlan in vxlan_interface.Vxlan1.vxlan.vlans | arista.avd.convert_dicts('id') | arista.avd.natural_sort('id') %}
{%             set vlan_vni = vlan.vni | arista.avd.default('-') %}
{%             set multicast_group = vlan.multicast_group | arista.avd.default('-') %}
{%             if vlan.flood_vteps is arista.avd.defined %}
{%                 set flood_list = vlan.flood_vteps | join('<br/>')  %}
{%             else %}
{%                 set flood_list = '-' %}
{%             endif %}
| {{ vlan.id }} | {{ vlan_vni }} | {{ flood_list }} | {{ multicast_group }} |
{%         endfor %}
{%     endif %}
{%     if vxlan_interface.Vxlan1.vxlan.vrfs is arista.avd.defined %}

#### VRF to VNI and Multicast Group Mappings

| VRF | VNI | Multicast Group |
| ---- | --- | --------------- |
{%         for vrf in vxlan_interface.Vxlan1.vxlan.vrfs | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
{%             set vrf_vni = vrf.vni | arista.avd.default('-') %}
{%             set multicast_group = vrf.multicast_group | arista.avd.default('-') %}
| {{ vrf.name }} | {{ vrf_vni }} | {{ multicast_group }} |
{%         endfor %}
{%     endif %}
{%     if vxlan_interface.Vxlan1.vxlan.flood_vteps is arista.avd.defined %}

#### Default Flood List

| Default Flood List |
| ------------------ |
| {{ vxlan_interface.Vxlan1.vxlan.flood_vteps | join('<br/>') }} |
{%     endif %}

### VXLAN Interface Device Configuration

```eos
{%     include 'eos/vxlan-interface.j2' %}
```
{% endif %}

# Routing
{% if service_routing_configuration_bgp is arista.avd.defined %}
## Service Routing Configuration BGP

{%     if service_routing_configuration_bgp.no_equals_default is arista.avd.defined(true) %}
BGP no equals default enabled
{%     elif service_routing_configuration_bgp.no_equals_default is arista.avd.defined(false) %}
BGP no equals default disabled
{%     endif %}

```eos
{%     include 'eos/service-routing-configuration-bgp.j2' %}
```

{% endif %}
{% if service_routing_protocols_model is arista.avd.defined %}
## Service Routing Protocols Model

{%     if service_routing_protocols_model is arista.avd.defined('multi-agent') %}
Multi agent routing protocol model enabled
{%     elif service_routing_protocols_model is arista.avd.defined('ribd') %}
Single agent routing protocol model enabled
{%     endif %}

```eos
{%     include 'eos/service-routing-protocols-model.j2' %}
```
{% endif %}
{% if ip_virtual_router_mac_address is defined and ip_virtual_router_mac_address is not none %}

## Virtual Router MAC Address

### Virtual Router MAC Address Summary

#### Virtual Router MAC Address: {{ ip_virtual_router_mac_address }}

### Virtual Router MAC Address Configuration

```eos
{%     include 'eos/virtual-router-mac-address.j2' %}
```
{% endif %}

## IP Routing

### IP Routing Summary

| VRF | Routing Enabled |
| --- | --------------- |
| default | {{ ip_routing | arista.avd.default(false) }} |
{% for vrf in vrfs | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
{%     if vrf.ip_routing is arista.avd.defined(true) %}
| {{ vrf.name }} | true |
{%     elif vrf.ip_routing is arista.avd.defined(false) %}
| {{ vrf.name }} | false |
{%     endif %}
{% endfor %}

### IP Routing Device Configuration

```eos
{% include 'eos/ip-routing.j2' %}
```

## IPv6 Routing

### IPv6 Routing Summary

| VRF | Routing Enabled |
| --- | --------------- |
| default | {{ ipv6_unicast_routing | arista.avd.default(false) }} |
{% set ipv6_configured_in_vrf = false %}
{% for vrf in vrfs | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
{%     if vrf.ipv6_routing is arista.avd.defined(true) %}
{%         set ipv6_configured_in_vrf = true %}
| {{ vrf.name }} | true |
{%     else %}
| {{ vrf.name }} | false |
{%     endif %}
{% endfor %}
{% if ipv6_unicast_routing is arista.avd.defined(true) or ipv6_configured_in_vrf == true %}

### IPv6 Routing Device Configuration

```eos
{%     include 'eos/ipv6-routing.j2' %}
```
{% endif %}
{% if static_routes is defined and static_routes is not none %}

## Static Routes

### Static Routes Summary

| VRF | Destination Prefix | Next Hop IP             | Exit interface      | Administrative Distance       | Tag               | Route Name                    | Metric         |
| --- | ------------------ | ----------------------- | ------------------- | ----------------------------- | ----------------- | ----------------------------- | -------------- |
{%     for static_route in static_routes %}
{%         set vrf = static_route.vrf | arista.avd.default('default') %}
{%         set gateway = static_route.gateway | arista.avd.default('-') %}
{%         set interface = static_route.interface | arista.avd.default('-') %}
{%         set distance = static_route.distance | arista.avd.default('1') %}
{%         set tag = static_route.tag | arista.avd.default('-') %}
{%         set name =  static_route.name | arista.avd.default('-') %}
{%         set metric = static_route.metric | arista.avd.default('-') %}
| {{ vrf }} | {{ static_route.destination_address_prefix }} | {{ gateway }} | {{ interface }} | {{ distance }} | {{ tag }} | {{ name }} | {{ metric }} |
{%     endfor %}

### Static Routes Device Configuration

```eos
{%     include 'eos/static-routes.j2' %}
```
{% endif %}
{% if ipv6_static_routes is defined and ipv6_static_routes is not none %}

## IPv6 Static Routes

### IPv6 Static Routes Summary

| VRF | Destination Prefix | Next Hop IP             | Exit interface      | Administrative Distance       | Tag               | Route Name                    | Metric         |
| --- | ------------------ | ----------------------- | ------------------- | ----------------------------- | ----------------- | ----------------------------- | -------------- |
{%     for static_route in ipv6_static_routes %}
{%         set vrf = static_route.vrf | arista.avd.default('default') %}
{%         set gateway = static_route.gateway | arista.avd.default('-') %}
{%         set interface = static_route.interface | arista.avd.default('-') %}
{%         set distance = static_route.distance | arista.avd.default('1') %}
{%         set tag = static_route.tag | arista.avd.default('-') %}
{%         set name = static_route.name | arista.avd.default('-') %}
{%         set metric = static_route.metric | arista.avd.default('-') %}
| {{ vrf }} | {{ static_route.destination_address_prefix }} | {{ gateway }} | {{ interface }} | {{ distance }} | {{ tag }} | {{ name }} | {{ metric }} |
{%     endfor %}

### Static Routes Device Configuration

```eos
{%     include 'eos/ipv6-static-routes.j2' %}
```
{% endif %}
{% if arp.aging.timeout_default is arista.avd.defined %}

## ARP

Global ARP timeout: {{ arp.aging.timeout_default }}
{% endif %}
{% if router_general is arista.avd.defined %}

## Router General
{%     if router_general.router_id.ipv4 is arista.avd.defined %}

- Global IPv4 Router ID: {{ router_general.router_id.ipv4 }}
{%     endif %}
{%     if router_general.router_id.ipv6 is arista.avd.defined %}

- Global IPv6 Router ID: {{ router_general.router_id.ipv6 }}
{%     endif %}
{%     if router_general.nexthop_fast_failover is arista.avd.defined(true) %}

- Nexthop fast fail-over is enabled.
{%     endif %}
{%     if router_general.vrfs | arista.avd.default([]) | selectattr('leak_routes','arista.avd.defined') %}

### VRF Route leaking

| VRF | Source VRF | Route Map Policy |
|-----|------------|------------------|
{%         for vrf in router_general.vrfs %}
{%             for leak_route in vrf.leak_routes | arista.avd.natural_sort %}
{%                 if leak_route.source_vrf is arista.avd.defined and leak_route.subscribe_policy is arista.avd.defined %}
| {{ vrf.name }} | {{ leak_route.source_vrf }} | {{ leak_route.subscribe_policy }} |
{%                 endif %}
{%             endfor %}
{%         endfor %}
{%     endif %}
{%     if router_general.vrfs | arista.avd.default([]) | selectattr('routes.dynamic_prefix_lists','arista.avd.defined') %}

### VRF Routes Dynamic Prefix-lists

| VRF | Dynamic Prefix-list |
|-----|---------------------|
{%         for vrf in router_general.vrfs %}
{%             for dynamic_prefix_list in vrf.routes.dynamic_prefix_lists | arista.avd.natural_sort('name') %}
{%                 if dynamic_prefix_list.name is arista.avd.defined %}
| {{ vrf.name }} | {{ dynamic_prefix_list.name }} |
{%                 endif %}
{%             endfor %}
{%         endfor %}
{%     endif %}

### Router General configuration

```eos
{%     include 'eos/router-general.j2' %}
```
{% endif %}
{% if router_traffic_engineering is arista.avd.defined %}

## Router Traffic-Engineering
{%     if router_traffic_engineering.segment_routing is arista.avd.defined %}

### Segment Routing Summary

- SRTE is enabled.
{%         if router_traffic_engineering.segment_routing.colored_tunnel_rib is arista.avd.defined(true) %}

- system-colored-tunnel-rib is enabled
{%         endif %}
{%         if router_traffic_engineering.segment_routing.policy_endpoints is arista.avd.defined %}

#### SRTE Policies

| Endpoint | Color | Preference | Name | Description | SBFD Remote Discriminator | Label Stack | Index  | Weight | Explicit Null |
| -------- | ----- | ---------- | ---- | ----------- | ------------------------- | ----------- | ------ | ------ | ------------- |
{%             for endpoint in router_traffic_engineering.segment_routing.policy_endpoints | arista.avd.natural_sort('address') %}
{%                 for color in endpoint.colors | arista.avd.natural_sort('value') %}
{%                     set name = color.name | arista.avd.default('-') %}
{%                     set description = color.description | arista.avd.default('-') %}
{%                     set sbfd_remote = color.sbfd_remote_discriminator | arista.avd.default('-') %}
{%                     for pathgroup in color.path_group | arista.avd.natural_sort('preference') %}
{%                         set pathgroup_preference = pathgroup.preference | arista.avd.default('-') %}
{%                         set expnull = pathgroup.explicit_null | arista.avd.default('-') %}
{%                         for labelstack in pathgroup.segment_list | arista.avd.natural_sort('label_stack') %}
{%                             set stack = labelstack.label_stack %}
{%                             set index = labelstack.index | arista.avd.default('-') %}
{%                             set weight = labelstack.weight | arista.avd.default('-') %}
| {{ endpoint.address }} | {{ color.value }} | {{ pathgroup_preference }} | {{ name }} | {{ description }} | {{ sbfd_remote }} | {{ stack }} | {{ index }} | {{ weight }} | {{ expnull }} |
{%                         endfor %}
{%                     endfor %}
{%                 endfor %}
{%             endfor %}
{%         endif %}
{%     endif %}

### Router Traffic Engineering Device Configuration

```eos
{%     include 'eos/router-traffic-engineering.j2' %}
```
{% endif %}
{% if router_ospf.process_ids is arista.avd.defined %}

## Router OSPF

### Router OSPF Summary

| Process ID | Router ID | Default Passive Interface | No Passive Interface | BFD | Max LSA | Default Information Originate | Log Adjacency Changes Detail | Auto Cost Reference Bandwidth | Maximum Paths | MPLS LDP Sync Default | Distribute List In |
| ---------- | --------- | ------------------------- | -------------------- | --- | ------- | ----------------------------- | ---------------------------- | ----------------------------- | ------------- | --------------------- | ------------------ |
{%     for process_id in router_ospf.process_ids | arista.avd.convert_dicts('id') | arista.avd.natural_sort('id') %}
{%         set router_id = process_id.router_id | arista.avd.default ('-') %}
{%         if process_id.passive_interface_default is arista.avd.defined(true) %}
{%             set passive_interface_default = 'enabled' %}
{%         else %}
{%             set passive_interface_default = 'disabled' %}
{%         endif %}
{%         set no_passive_interfaces = namespace() %}
{%         set no_passive_interfaces.list = '' %}
{%         if process_id.no_passive_interfaces is arista.avd.defined %}
{%             for interface in process_id.no_passive_interfaces %}
{%                 set no_passive_interfaces.list = no_passive_interfaces.list ~ ' ' ~ interface ~ ' <br>' %}
{%             endfor %}
{%         else %}
{%             set no_passive_interfaces.list = '-' %}
{%         endif %}
{%         if process_id.bfd_enable is arista.avd.defined(true) %}
{%             set bfd_enable = 'enabled' %}
{%             if process_id.bfd_adjacency_state_any is arista.avd.defined(true) %}
{%                 set bfd_enable = bfd_enable ~ '<br>(any state)' %}
{%             endif %}
{%         else %}
{%             set bfd_enable = 'disabled' %}
{%         endif %}
{%         set max_lsa = process_id.max_lsa | arista.avd.default('default') %}
{%         if process_id.default_information_originate is arista.avd.defined %}
{%             if process_id.default_information_originate.always is arista.avd.defined(true) %}
{%                 set default_information_originate = 'Always' %}
{%             else %}
{%                 set default_information_originate = 'enabled' %}
{%             endif %}
{%         else %}
{%             set default_information_originate = 'disabled' %}
{%         endif %}
{%         if process_id.log_adjacency_changes_detail is arista.avd.defined(true) %}
{%             set log_adjacency_changes_detail = 'enabled' %}
{%         else %}
{%             set log_adjacency_changes_detail = 'disabled' %}
{%         endif %}
{%         set auto_cost_reference_bandwidth = process_id.auto_cost_reference_bandwidth | arista.avd.default('-') %}
{%         set maximum_paths = process_id.maximum_paths | arista.avd.default('-') %}
{%         set mpls_ldp_sync_default = process_id.mpls_ldp_sync_default | arista.avd.default('-') %}
{%         if process_id.distribute_list_in.route_map is arista.avd.defined %}
{%             set distribute_list_in = 'route-map ' ~ process_id.distribute_list_in.route_map %}
{%         else %}
{%             set distribute_list_in = '-' %}
{%         endif %}
| {{ process_id.id }} | {{ router_id }} | {{ passive_interface_default }} |{{ no_passive_interfaces.list }} | {{ bfd_enable }} | {{ max_lsa }} | {{ default_information_originate }} | {{ log_adjacency_changes_detail }} | {{ auto_cost_reference_bandwidth }} | {{ maximum_paths }} | {{ mpls_ldp_sync_default }} | {{ distribute_list_in }} |
{%     endfor %}
{# OSPF Distance #}
{%     set ospf_distance_process_ids = [] %}
{%     for process_id in router_ospf.process_ids | arista.avd.convert_dicts('id') %}
{%         if process_id.distance is arista.avd.defined %}
{%             do ospf_distance_process_ids.append(process_id) %}
{%         endif %}
{%     endfor %}
{%     if ospf_distance_process_ids | length > 0 %}

### Router OSPF Distance

| Process ID | Intra Area | Inter Area | External |
| ---------- | ---------- | ---------- | -------- |
{%         for process_id in ospf_distance_process_ids %}
{%             set distance_intra_area = process_id.distance.intra_area | arista.avd.default('-') %}
{%             set distance_inter_area = process_id.distance.inter_area | arista.avd.default('-') %}
{%             set distance_external = process_id.distance.external | arista.avd.default('-') %}
| {{ process_id.id }} | {{ distance_intra_area }} | {{ distance_inter_area }} | {{ distance_external }} |
{%         endfor %}
{%     endif %}
{# Router Redistribution #}
{%     set has = namespace() %}
{%     set has.found = false %}
{%     for process_id in router_ospf.process_ids | arista.avd.convert_dicts('id') %}
{%         if process_id.redistribute is arista.avd.defined %}
{%             set has.found = true %}
{%         endif %}
{%     endfor %}
{%     if has.found is arista.avd.defined(true) %}

### Router OSPF Router Redistribution

| Process ID | Source Protocol | Route Map |
| ---------- | --------------- | --------- |
{%         for process_id in router_ospf.process_ids | arista.avd.convert_dicts('id') | arista.avd.natural_sort('id') %}
{%             if process_id.redistribute is arista.avd.defined %}
{%                 set source_protocols = [] %}
{%                 if process_id.redistribute.connected is defined %}
{%                     do source_protocols.append(('connected', process_id.redistribute.connected.route_map | arista.avd.default('-'))) %}
{%                 endif %}
{%                 if process_id.redistribute.static is defined %}
{%                     do source_protocols.append(('static', process_id.redistribute.static.route_map | arista.avd.default('-'))) %}
{%                 endif %}
{%                 if process_id.redistribute.bgp is defined %}
{%                     do source_protocols.append(('bgp', process_id.redistribute.bgp.route_map | arista.avd.default('-'))) %}
{%                 endif %}
{%                 for source_protocol in source_protocols %}
| {{ process_id.id }} | {{ source_protocol[0] }} | {{ source_protocol[1] }} |
{%                 endfor %}
{%             endif %}
{%         endfor %}
{%     endif %}
{# Max-Metric #}
{%     set has.found = false %}
{%     for process_id in router_ospf.process_ids | arista.avd.convert_dicts('id') %}
{%         if process_id.max_metric is arista.avd.defined %}
{%             set has.found = true %}
{%         endif %}
{%     endfor %}
{%     if has.found is arista.avd.defined(true) %}

### Router OSPF Router Max-Metric

| Process ID | Router-LSA | External-LSA (metric) | Include Stub | On Startup Delay | Summary-LSA (metric) |
| ---------- | ---------- | --------------------- | ------------ | ---------------- | -------------------- |
{%         for process_id in router_ospf.process_ids | arista.avd.convert_dicts('id') | arista.avd.natural_sort('id') %}
{%             if process_id.max_metric.router_lsa is defined %}
{%                 if process_id.max_metric.router_lsa.external_lsa is defined %}
{%                     set external_lsa = 'enabled' %}
{%                     if process_id.max_metric.router_lsa.external_lsa.override_metric is arista.avd.defined %}
{%                         set external_lsa = external_lsa ~ ' (' ~ process_id.max_metric.router_lsa.external_lsa.override_metric ~ ')' %}
{%                     endif %}
{%                 else %}
{%                     set external_lsa = 'disabled' %}
{%                 endif %}
{%                 if process_id.max_metric.router_lsa.include_stub is arista.avd.defined(true) %}
{%                     set include_stub = 'enabled' %}
{%                 else %}
{%                     set include_stub = 'disabled' %}
{%                 endif %}
{%                 set on_startup = process_id.max_metric.router_lsa.on_startup | arista.avd.default('disabled') %}
{%                 if process_id.max_metric.router_lsa.summary_lsa is defined %}
{%                     set summary_lsa = 'enabled' %}
{%                     if process_id.max_metric.router_lsa.summary_lsa.override_metric is arista.avd.defined %}
{%                         set summary_lsa = summary_lsa ~ ' (' ~ process_id.max_metric.router_lsa.summary_lsa.override_metric ~ ')' %}
{%                     endif %}
{%                 else %}
{%                     set summary_lsa = 'disabled' %}
{%                 endif %}
| {{ process_id.id }} | enabled | {{ external_lsa }} | {{ include_stub }} | {{ on_startup }} | {{ summary_lsa }} |
{%             endif %}
{%         endfor %}
{%     endif %}
{# OSPF Timers #}
{%     set has.found = false %}
{%     for process_id in router_ospf.process_ids | arista.avd.convert_dicts('id') %}
{%         if process_id.timers is arista.avd.defined %}
{%             set has.found = true %}
{%         endif %}
{%     endfor %}
{%     if has.found is arista.avd.defined(true) %}

### Router OSPF timers

| Process ID | LSA rx | LSA tx (initial/min/max) | SPF (initial/min/max) |
| ---------- | ------ | ------------------------ | --------------------- |
{%         for process_id in router_ospf.process_ids | arista.avd.convert_dicts('id') | arista.avd.natural_sort('id') %}
{%             if process_id.timers is arista.avd.defined %}
{%                 set lsa_rx = process_id.timers.lsa.rx_min_interval | arista.avd.default('-') %}
{%                 if process_id.timers.lsa.tx_delay.initial is arista.avd.defined
                      and process_id.timers.lsa.tx_delay.min is arista.avd.defined
                      and process_id.timers.lsa.tx_delay.max is arista.avd.defined %}
{%                     set lsa_tx = process_id.timers.lsa.tx_delay.initial %}
{%                     set lsa_tx = lsa_tx ~ " / " ~ process_id.timers.lsa.tx_delay.min %}
{%                     set lsa_tx = lsa_tx ~ " / " ~ process_id.timers.lsa.tx_delay.max %}
{%                 else %}
{%                     set lsa_tx = '-' %}
{%                 endif %}
{%                 if process_id.timers.spf_delay.initial is arista.avd.defined
                      and process_id.timers.spf_delay.min is arista.avd.defined
                      and process_id.timers.spf_delay.max is arista.avd.defined %}
{%                     set spf_timers = process_id.timers.spf_delay.initial %}
{%                     set spf_timers = spf_timers ~ " / " ~ process_id.timers.spf_delay.min %}
{%                     set spf_timers = spf_timers ~ " / " ~ process_id.timers.spf_delay.max %}
{%                 else %}
{%                     set spf_timers = '-' %}
{%                 endif %}
| {{ process_id.id }} | {{ lsa_rx }} | {{ lsa_tx }} | {{ spf_timers }} |
{%             endif %}
{%         endfor %}
{%     endif %}
{# Route Summary #}
{%     set has.found = false %}
{%     for process_id in router_ospf.process_ids | arista.avd.convert_dicts('id') %}
{%         if process_id.summary_addresses is arista.avd.defined %}
{%             set has.found = true %}
{%         endif %}
{%     endfor %}
{%     if has.found is arista.avd.defined(true) %}

### Router OSPF route summary

| Process ID | Prefix | Tag | Attribute Route Map | Not Advertised |
|------------|--------|-----|---------------------|----------------|
{%         for process_id in router_ospf.process_ids | arista.avd.convert_dicts('id') | arista.avd.natural_sort('id') %}
{%             if process_id.summary_addresses is arista.avd.defined %}
{%                 for summary_address in process_id.summary_addresses %}
{%                     set summary_prefix = summary_address.prefix | arista.avd.default('-') %}
{%                     set summary_tag = summary_address.tag | arista.avd.default('-') %}
{%                     set summary_attribute_map = summary_address.attribute_map | arista.avd.default('-') %}
{%                     set summary_not_advertise = summary_address.not_advertise | arista.avd.default('-') %}
| {{ process_id.id }} | {{ summary_prefix }} | {{ summary_tag }} | {{ summary_attribute_map }} | {{ summary_not_advertise }} |
{%                 endfor %}
{%             endif %}
{%         endfor %}
{%     endif %}
{# OSPF Areas #}
{%     set has.found = false %}
{%     for process_id in router_ospf.process_ids | arista.avd.convert_dicts('id') %}
{%         if process_id.areas is arista.avd.defined %}
{%             set has.found = true %}
{%         endif %}
{%     endfor %}
{%     if has.found is arista.avd.defined(true) %}

### Router OSPF Areas

| Process ID | Area | Area Type | Filter Networks | Filter Prefix List | Additional Options |
| ---------- | ---- | --------- | --------------- | ------------------ | ------------------ |
{%         for process_id in router_ospf.process_ids | arista.avd.convert_dicts('id') | arista.avd.natural_sort('id') %}
{%             for area in process_id.areas | arista.avd.convert_dicts('id') | arista.avd.natural_sort('id') %}
{%                 if area.filter.networks is arista.avd.defined %}
{%                     set network_filter = area.filter.networks | join(', ') %}
{%                 else %}
{%                     set network_filter = '-' %}
{%                 endif %}
{%                 set prefix_list_filter = area.filter.prefix_list | arista.avd.default('-') %}
{%                 set area_type = area.type | arista.avd.default('normal') %}
{%                 set additional_cfg_options_list = [] %}
{%                 if area.no_summary is arista.avd.defined(true) %}
{%                     do additional_cfg_options_list.append('no-summary') %}
{%                 endif %}
{%                 if area.default_information_originate is defined %}
{%                     set tmp_cli = "default-information-originate" %}
{%                     if area.default_information_originate.metric is arista.avd.defined %}
{%                         set tmp_cli = tmp_cli ~ " metric " ~ area.default_information_originate.metric %}
{%                     endif %}
{%                     if area.default_information_originate.metric_type is arista.avd.defined %}
{%                         set tmp_cli = tmp_cli ~ " metric-type " ~ area.default_information_originate.metric_type %}
{%                     endif %}
{%                     do additional_cfg_options_list.append(tmp_cli) %}
{%                 endif %}
{%                 if area.nssa_only is arista.avd.defined(true) %}
{%                     do additional_cfg_options_list.append('nssa-only') %}
{%                 endif %}
| {{ process_id.id }} | {{ area.id }} | {{ area_type }} | {{ network_filter }} | {{ prefix_list_filter }} | {{ additional_cfg_options_list | join(', ') }} |
{%             endfor %}
{%         endfor %}
{%     endif %}
{# Interfaces #}
{%     set ethernet_interface_ospf = namespace(configured=false) %}
{%     set port_channel_interface_ospf = namespace(configured=false) %}
{%     set vlan_interface_ospf = namespace(configured=false) %}
{%     set loopback_interface_ospf = namespace(configured=false) %}
{%     for vlan_interface in vlan_interfaces | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
{%         if vlan_interface.ospf_area is arista.avd.defined %}
{%             set vlan_interface_ospf.configured = true %}
{%         endif %}
{%     endfor %}
{%     for ethernet_interface in ethernet_interfaces | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
{%         if ethernet_interface.ospf_area is arista.avd.defined %}
{%             set ethernet_interface_ospf.configured = true %}
{%         endif %}
{%     endfor %}
{%     for port_channel_interface in port_channel_interfaces | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
{%         if port_channel_interface.ospf_area is arista.avd.defined %}
{%             set port_channel_interface_ospf.configured = true %}
{%         endif %}
{%     endfor %}
{%     for loopback_interface in loopback_interfaces | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
{%         if loopback_interface.ospf_area is arista.avd.defined %}
{%             set loopback_interface_ospf.configured = true %}
{%         endif %}
{%     endfor %}
{%     if vlan_interface_ospf.configured or ethernet_interface_ospf.configured or port_channel_interface_ospf.configured or loopback_interface_ospf.configured %}

### OSPF Interfaces

| Interface | Area | Cost | Point To Point |
| -------- | -------- | -------- | -------- |
{%         if ethernet_interface_ospf.configured %}
{%             for ethernet_interface in ethernet_interfaces | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
{%                 if ethernet_interface.ospf_area is arista.avd.defined %}
{%                     set ospf_area = ethernet_interface.ospf_area %}
{%                     set ospf_cost = ethernet_interface.ospf_cost | arista.avd.default('-') %}
{%                     set ospf_network_point_to_point = ethernet_interface.ospf_network_point_to_point | arista.avd.default('-') %}
| {{ ethernet_interface.name }} | {{ ospf_area }} | {{ ospf_cost }} | {{ ospf_network_point_to_point }} |
{%                 endif %}
{%             endfor %}
{%         endif %}
{%         if port_channel_interface_ospf.configured %}
{%             for port_channel_interface in port_channel_interfaces | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
{%                 if port_channel_interface.ospf_area is arista.avd.defined %}
{%                     set ospf_area = port_channel_interface.ospf_area %}
{%                     set ospf_cost = port_channel_interface.ospf_cost | arista.avd.default('-') %}
{%                     set ospf_network_point_to_point = port_channel_interface.ospf_network_point_to_point | arista.avd.default('-') %}
| {{ port_channel_interface.name }} | {{ ospf_area }} | {{ ospf_cost }} | {{ ospf_network_point_to_point }} |
{%                 endif %}
{%             endfor %}
{%         endif %}
{%         if vlan_interface_ospf.configured %}
{%             for vlan_interface in vlan_interfaces | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
{%                 if vlan_interface.ospf_area is arista.avd.defined %}
{%                     set ospf_area = vlan_interface.ospf_area %}
{%                     set ospf_cost = vlan_interface.ospf_cost | arista.avd.default('-') %}
{%                     set ospf_network_point_to_point = vlan_interface.ospf_network_point_to_point | arista.avd.default('-') %}
| {{ vlan_interface.name }} | {{ ospf_area }} | {{ ospf_cost }} | {{ ospf_network_point_to_point }} |
{%                 endif %}
{%             endfor %}
{%         endif %}
{%         if loopback_interface_ospf.configured %}
{%             for loopback_interface in loopback_interfaces | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
{%                 if loopback_interface.ospf_area is arista.avd.defined %}
{%                     set ospf_area = loopback_interface.ospf_area %}
{%                     set ospf_cost = loopback_interface.ospf_cost | arista.avd.default('-') %}
{%                     set ospf_network_point_to_point = loopback_interface.ospf_network_point_to_point | arista.avd.default('-') %}
| {{ loopback_interface.name }} | {{ ospf_area }} | {{ ospf_cost }} | {{ ospf_network_point_to_point }} |
{%                 endif %}
{%             endfor %}
{%         endif %}
{%     endif %}

### Router OSPF Device Configuration

```eos
{%     include 'eos/router-ospf.j2' %}
```
{% endif %}
{% if router_isis is arista.avd.defined %}

## Router ISIS

### Router ISIS Summary

| Settings | Value |
| -------- | ----- |
{%     if router_isis.instance is arista.avd.defined %}
| Instance | {{ router_isis.instance }} |
{%     endif %}
{%     if router_isis.net is arista.avd.defined %}
| Net-ID | {{ router_isis.net }} |
{%     endif %}
{%     if router_isis.is_type is arista.avd.defined %}
| Type | {{ router_isis.is_type }} |
{%     endif %}
{%     if router_isis.address_family is arista.avd.defined %}
| Address Family | {{ router_isis.address_family | join(", ") }} |
{%     endif %}
{%     if router_isis.router_id is arista.avd.defined %}
| Router-ID | {{ router_isis.router_id }} |
{%     endif %}
{%     if router_isis.log_adjacency_changes is arista.avd.defined %}
| Log Adjacency Changes | {{ router_isis.log_adjacency_changes }} |
{%     endif %}
{%     if router_isis.mpls_ldp_sync_default is arista.avd.defined(true) %}
| MPLS LDP Sync Default | {{ router_isis.mpls_ldp_sync_default }} |
{%     endif %}
{%     if router_isis.timers.local_convergence.protected_prefixes is arista.avd.defined(true) %}
| Local Convergence Delay (ms) | {{ router_isis.timers.local_convergence.delay | arista.avd.default(10000) }} |
{%     endif %}
{%     if router_isis.advertise.passive_only is arista.avd.defined(true) %}
| Advertise Passive-only | {{ router_isis.advertise.passive_only }} |
{%     endif %}
{%     if router_isis.segment_routing_mpls.enabled is arista.avd.defined %}
| SR MPLS Enabled | {{ router_isis.segment_routing_mpls.enabled }} |
{%     endif %}
{%     if router_isis.redistribute_routes is arista.avd.defined %}

### ISIS Route Redistribution

| Route Type | Route-Map | Include Leaked |
| ---------- | --------- | -------------- |
{%         for redistribute_route in router_isis.redistribute_routes | arista.avd.natural_sort('source_protocol') %}
{%             set src_protocol = redistribute_route.source_protocol | arista.avd.default('-') %}
{%             set route_map = redistribute_route.route_map | arista.avd.default('-') %}
{%             if src_protocol in ['static', 'connected', 'ospf'] %}
{%                 set include_leaked = redistribute_route.include_leaked | arista.avd.default('-') %}
{%             else %}
{%                 set include_leaked = '-' %}
{%             endif %}
{%             if src_protocol == 'isis' %}
{%                 set src_protocol = src_protocol ~ " instance" %}
{%             endif %}
{%             if src_protocol in ['ospf', 'ospfv3'] and redistribute_route.ospf_route_type is arista.avd.defined %}
{%                 set src_protocol = src_protocol ~ " " ~ redistribute_route.ospf_route_type %}
{%             endif %}
| {{ src_protocol }} | {{ route_map }} | {{ include_leaked }} |
{%         endfor %}
{%     endif %}

### ISIS Interfaces Summary

| Interface | ISIS Instance | ISIS Metric | Interface Mode |
| --------- | ------------- | ----------- | -------------- |
{# ethernet interfaces #}
{# ------- #}
{%     for ethernet_interface in ethernet_interfaces | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
{%         if ethernet_interface.isis_enable is arista.avd.defined %}
{%             set row_isis_instance = ethernet_interface.isis_enable %}
{%             set row_isis_metric = ethernet_interface.isis_metric | arista.avd.default('-') %}
{%             if ethernet_interface.isis_network_point_to_point is arista.avd.defined(true) %}
{%                 set row_intf_mode = "point-to-point" %}
{%             elif ethernet_interface.isis_passive is arista.avd.defined(true) %}
{%                 set row_intf_mode = "passive" %}
{%             else %}
{%                 set row_intf_mode = "-" %}
{%             endif %}
| {{ ethernet_interface.name }} | {{ row_isis_instance }} | {{ row_isis_metric }} | {{ row_intf_mode }} |
{%         endif %}
{%     endfor %}
{# ------- #}
{# vlan interfaces #}
{# ------- #}
{%     for vlan_interface in vlan_interfaces | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
{%         if vlan_interface.isis_enable is arista.avd.defined %}
{%             set row_isis_instance = vlan_interface.isis_enable %}
{%             set row_isis_metric = vlan_interface.isis_metric | arista.avd.default('-') %}
{%             if vlan_interface.isis_network_point_to_point is arista.avd.defined(true) %}
{%                 set row_intf_mode = "point-to-point" %}
{%             elif vlan_interface.isis_passive is arista.avd.defined(true) %}
{%                 set row_intf_mode = "passive" %}
{%             else %}
{%                 set row_intf_mode = "-" %}
{%             endif %}
| {{ vlan_interface.name }} | {{ row_isis_instance }} | {{ row_isis_metric }} | {{ row_intf_mode }} |
{%         endif %}
{%     endfor %}
{# ------- #}
{# loopback interfaces #}
{# ------- #}
{%     for loopback_interface in loopback_interfaces | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
{%         if loopback_interface.isis_enable is arista.avd.defined %}
{%             set row_isis_instance = loopback_interface.isis_enable %}
{%             set row_isis_metric = loopback_interface.isis_metric | arista.avd.default('-') %}
{%             if loopback_interface.isis_network_point_to_point is arista.avd.defined(true) %}
{%                 set row_intf_mode = "point-to-point" %}
{%             elif loopback_interface.isis_passive is arista.avd.defined(true) %}
{%                 set row_intf_mode = "passive" %}
{%             else %}
{%                 set row_intf_mode = "-" %}
{%             endif %}
| {{ loopback_interface.name }} | {{ row_isis_instance }} | {{ row_isis_metric }} | {{ row_intf_mode }} |
{%         endif %}
{%     endfor %}
{# ISIS Node-SID #}
{%     set node_sid_loopbacks = [] %}
{%     for loopback_interface in loopback_interfaces | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
{%         if loopback_interface.node_segment.ipv4_index is arista.avd.defined or loopback_interface.node_segment.ipv6_index is arista.avd.defined %}
{%             do node_sid_loopbacks.append(loopback_interface) %}
{%         endif %}
{%     endfor %}
{%     if node_sid_loopbacks | length > 0 %}

### ISIS Segment-routing Node-SID

| Loopback | IPv4 Index | IPv6 Index |
| -------- | ---------- | ---------- |
{%         for loopback_interface in node_sid_loopbacks | arista.avd.natural_sort %}
{%             set row_ipv4_index = loopback_interface.node_segment.ipv4_index | arista.avd.default("-") %}
{%             set row_ipv6_index = loopback_interface.node_segment.ipv6_index | arista.avd.default("-") %}
| {{ loopback_interface.name }} | {{ row_ipv4_index }} | {{ row_ipv6_index }} |
{%         endfor %}
{%     endif %}
{%     if router_isis.segment_routing_mpls.prefix_segments is arista.avd.defined %}

### Prefix Segments

| Prefix Segment | Index |
| -------------- | ----- |
{%         for prefix_segment in router_isis.segment_routing_mpls.prefix_segments | arista.avd.natural_sort('prefix') %}
{%             if prefix_segment.index is arista.avd.defined %}
| {{ prefix_segment.prefix }} | {{ prefix_segment.index }} |
{%             endif %}
{%         endfor %}
{%     endif %}
{%     if router_isis.address_family_ipv4 is arista.avd.defined %}

### ISIS IPv4 Address Family Summary

| Settings | Value |
| -------- | ----- |
| IPv4 Address-family Enabled | True |
{%         if router_isis.address_family_ipv4.maximum_paths is arista.avd.defined %}
| Maximum-paths | {{ router_isis.address_family_ipv4.maximum_paths }} |
{%         endif %}
{%         if router_isis.address_family_ipv4.fast_reroute_ti_lfa.mode is arista.avd.defined %}
| TI-LFA Mode | {{ router_isis.address_family_ipv4.fast_reroute_ti_lfa.mode }} |
{%             if router_isis.address_family_ipv4.fast_reroute_ti_lfa.level is arista.avd.defined %}
| TI-LFA Level | {{ router_isis.address_family_ipv4.fast_reroute_ti_lfa.level }} |
{%             endif %}
{%         endif %}
{%         if router_isis.address_family_ipv4.fast_reroute_ti_lfa.srlg.enable is arista.avd.defined(true) %}
| TI-LFA SRLG Enabled | {{ router_isis.address_family_ipv4.fast_reroute_ti_lfa.srlg.enable }} |
{%             if router_isis.address_family_ipv4.fast_reroute_ti_lfa.srlg.strict is arista.avd.defined(true) %}
| TI-LFA SRLG Strict Mode | {{ router_isis.address_family_ipv4.fast_reroute_ti_lfa.srlg.strict }} |
{%             endif %}
{%         endif %}
{%     endif %}
{%     if router_isis.address_family_ipv4.tunnel_source_labeled_unicast.enabled is arista.avd.defined(true) %}

### Tunnel Source

| Source Protocol | RCF |
| --------------- | --- |
{%         set rcf = router_isis.address_family_ipv4.tunnel_source_labeled_unicast.rcf | arista.avd.default('-') %}
| BGP Labeled-Unicast | {{ rcf }} |
{%     endif %}
{%     if router_isis.address_family_ipv6 is arista.avd.defined %}

### ISIS IPv6 Address Family Summary

| Settings | Value |
| -------- | ----- |
| IPv6 Address-family Enabled | True |
{%         if router_isis.address_family_ipv6.maximum_paths is arista.avd.defined %}
| Maximum-paths | {{ router_isis.address_family_ipv6.maximum_paths }} |
{%         endif %}
{%         if router_isis.address_family_ipv6.fast_reroute_ti_lfa.mode is arista.avd.defined %}
| TI-LFA Mode | {{ router_isis.address_family_ipv6.fast_reroute_ti_lfa.mode }} |
{%             if router_isis.address_family_ipv6.fast_reroute_ti_lfa.level is arista.avd.defined %}
| TI-LFA Level | {{ router_isis.address_family_ipv6.fast_reroute_ti_lfa.level }} |
{%             endif %}
{%         endif %}
{%         if router_isis.address_family_ipv6.fast_reroute_ti_lfa.srlg.enable is arista.avd.defined(true) %}
| TI-LFA SRLG Enabled | {{ router_isis.address_family_ipv6.fast_reroute_ti_lfa.srlg.enable }} |
{%             if router_isis.address_family_ipv6.fast_reroute_ti_lfa.srlg.strict is arista.avd.defined(true) %}
| TI-LFA SRLG Strict Mode | {{ router_isis.address_family_ipv6.fast_reroute_ti_lfa.srlg.strict }} |
{%             endif %}
{%         endif %}
{%     endif %}

### Router ISIS Device Configuration

```eos
{%     include 'eos/router-isis.j2' %}
```
{% endif %}
{% if router_bgp is arista.avd.defined %}

## Router BGP

### Router BGP Summary

| BGP AS | Router ID |
| ------ | --------- |
| {{ router_bgp.as }}|  {{ router_bgp.router_id | arista.avd.default('-') }} |
{%     if router_bgp.bgp_cluster_id is arista.avd.defined %}

| BGP AS | Cluster ID |
| ------ | --------- |
| {{ router_bgp.as }}|  {{ router_bgp.bgp_cluster_id }} |
{%     endif %}
{%     if router_bgp.bgp_defaults is arista.avd.defined or router_bgp.bgp is arista.avd.defined %}

| BGP Tuning |
| ---------- |
{%         for bgp_default in router_bgp.bgp_defaults | arista.avd.default([]) %}
| {{ bgp_default }} |
{%         endfor %}
{%         if router_bgp.bgp.bestpath.d_path is arista.avd.defined(true) %}
| bgp bestpath d-path |
{%         endif %}
{%         if router_bgp.updates.wait_for_convergence is arista.avd.defined(true) %}
| update wait-for-convergence |
{%         endif %}
{%         if router_bgp.updates.wait_install is arista.avd.defined(true) %}
| update wait-install |
{%         endif %}
{%         if router_bgp.distance.external_routes is arista.avd.defined %}
{%             set distance_cli = "distance bgp " ~ router_bgp.distance.external_routes %}
{%             if router_bgp.distance.internal_routes is arista.avd.defined and router_bgp.distance.local_routes is arista.avd.defined %}
{%                 set distance_cli = distance_cli ~ " " ~ router_bgp.distance.internal_routes ~ " " ~ router_bgp.distance.local_routes %}
{%             endif %}
| {{ distance_cli }} |
{%         endif %}
{%         if router_bgp.maximum_paths.paths is arista.avd.defined %}
{%             set paths_cli = "maximum-paths " ~ router_bgp.maximum_paths.paths %}
{%             if router_bgp.maximum_paths.ecmp is arista.avd.defined %}
{%                 set paths_cli = paths_cli ~ " ecmp " ~ router_bgp.maximum_paths.ecmp %}
{%             endif %}
| {{ paths_cli }} |
{%         endif %}
{%     endif %}
{# Check if listen_ranges exist under router_bgp.vrfs #}
{%     set temp = namespace() %}
{%     set temp.bgp_vrf_listen_ranges = false %}
{%     if router_bgp.vrfs is arista.avd.defined %}
{%         for vrf in router_bgp.vrfs | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
{%             if vrf.listen_ranges is arista.avd.defined %}
{%                 set temp.bgp_vrf_listen_ranges = true %}
{%                 break %}
{%             endif %}
{%         endfor %}
{%     endif %}
{%     if router_bgp.listen_ranges is arista.avd.defined or temp.bgp_vrf_listen_ranges is arista.avd.defined(true) %}

### Router BGP Listen Ranges

| Prefix | Peer-ID Include Router ID | Peer Group | Peer-Filter | Remote-AS | VRF |
| ------ | ------------------------- | ---------- | ----------- | --------- | --- |
{# listen_ranges in vrf default #}
{%         if router_bgp.listen_ranges is arista.avd.defined %}
{%             for listen_range in router_bgp.listen_ranges | arista.avd.natural_sort('peer_group') if listen_range.peer_group is arista.avd.defined and listen_range.prefix is arista.avd.defined
               and (listen_range.peer_filter is arista.avd.defined or listen_range.remote_as is arista.avd.defined) %}
{%                 if listen_range.peer_filter is arista.avd.defined %}
{%                     set row_remote_as = "-" %}
{%                 elif listen_range.remote_as is arista.avd.defined %}
{%                     set row_remote_as = listen_range.remote_as %}
{%                 endif %}
| {{ listen_range.prefix }} | {{ listen_range.peer_id_include_router_id | arista.avd.default('-') }} | {{ listen_range.peer_group }} | {{ listen_range.peer_filter | arista.avd.default('-') }} | {{ row_remote_as }} | default |
{%             endfor %}
{%         endif %}
{# listen_ranges under router_bgp.vrfs #}
{%         for vrf in router_bgp.vrfs | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
{%             if vrf.listen_ranges is arista.avd.defined %}
{%                 for listen_range in vrf.listen_ranges | arista.avd.natural_sort('peer_group') if listen_range.peer_group is arista.avd.defined and listen_range.prefix is arista.avd.defined
                   and (listen_range.peer_filter is arista.avd.defined or listen_range.remote_as is arista.avd.defined) %}
{%                     if listen_range.peer_filter is arista.avd.defined %}
{%                         set row_remote_as = "-" %}
{%                     elif listen_range.remote_as is arista.avd.defined %}
{%                         set row_remote_as = listen_range.remote_as %}
{%                     endif %}
| {{ listen_range.prefix }} | {{ listen_range.peer_id_include_router_id | arista.avd.default('-') }} | {{ listen_range.peer_group }} | {{ listen_range.peer_filter | arista.avd.default('-') }} | {{ row_remote_as }} | {{ vrf.name }} |
{%                 endfor %}
{%             endif %}
{%         endfor %}
{%     endif %}
{%     if router_bgp.peer_groups is arista.avd.defined %}

### Router BGP Peer Groups
{%         for peer_group in router_bgp.peer_groups | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}

#### {{ peer_group.name }}

| Settings | Value |
| -------- | ----- |
{%             if peer_group.type is arista.avd.defined %}
| Address Family | {{ peer_group.type }} |
{%             endif %}
{%             if peer_group.shutdown is arista.avd.defined(true) %}
| Shutdown | {{ peer_group.shutdown }} |
{%             endif %}
{%             if peer_group.remove_private_as.enabled is arista.avd.defined %}
{%                 set remove_private_as_setting = peer_group.remove_private_as.enabled %}
{%                 if peer_group.remove_private_as.enabled == true and peer_group.remove_private_as.all is arista.avd.defined(true) %}
{%                     set remove_private_as_setting = remove_private_as_setting ~ " (All)" %}
{%                     if peer_group.remove_private_as.replace_as is arista.avd.defined(true) %}
{%                         set remove_private_as_setting = remove_private_as_setting ~ " (Replace AS)" %}
{%                     endif %}
{%                 endif %}
| Remove Private AS Outbound | {{ remove_private_as_setting }} |
{%             endif %}
{%             if peer_group.remove_private_as_ingress.enabled is arista.avd.defined %}
{%                 set remove_private_as_ingress_setting = peer_group.remove_private_as_ingress.enabled %}
{%                 if peer_group.remove_private_as_ingress.enabled == true and peer_group.remove_private_as_ingress.replace_as is arista.avd.defined(true) %}
{%                     set remove_private_as_ingress_setting = remove_private_as_ingress_setting ~ " (Replace AS)" %}
{%                 endif %}
| Remove Private AS Inbound | {{ remove_private_as_ingress_setting }} |
{%             endif %}
{%             if peer_group.allowas_in.enabled is arista.avd.defined(true) %}
| Allowas-in | Allowed, allowed {{ peer_group.allowas_in.times | arista.avd.default("3 (default)") }} times |
{%             endif %}
{%             if peer_group.remote_as is arista.avd.defined %}
| Remote AS | {{ peer_group.remote_as }} |
{%             endif %}
{%             if peer_group.local_as is arista.avd.defined %}
| Local AS | {{ peer_group.local_as }} |
{%             endif %}
{%             if peer_group.route_reflector_client is arista.avd.defined %}
| Route Reflector Client | Yes |
{%             endif %}
{%             if peer_group.bgp_listen_range_prefix is arista.avd.defined %}
| Listen range prefix | {{ peer_group.bgp_listen_range_prefix }} |
{%             endif %}
{%             if peer_group.next_hop_self is arista.avd.defined(true) %}
| Next-hop self | True |
{%             endif %}
{%             if peer_group.next_hop_unchanged is arista.avd.defined(true) %}
| Next-hop unchanged | True |
{%             endif %}
{%             if peer_group.update_source is arista.avd.defined %}
| Source | {{ peer_group.update_source }} |
{%             endif %}
{%             if peer_group.rib_in_pre_policy_retain.enabled is arista.avd.defined() %}
{%                 set neighbor_rib_in_pre_policy_retain_row = peer_group.rib_in_pre_policy_retain.enabled %}
{%                 if peer_group.rib_in_pre_policy_retain.enabled is arista.avd.defined(true) and peer_group.rib_in_pre_policy_retain.all is arista.avd.defined(true) %}
{%                     set neighbor_rib_in_pre_policy_retain_row = neighbor_rib_in_pre_policy_retain_row ~ " (All)" %}
{%                 endif %}
| RIB Pre-Policy Retain | {{ neighbor_rib_in_pre_policy_retain_row }} |
{%             endif %}
{%             if peer_group.bfd is arista.avd.defined(true) %}
| BFD | True |
{%             endif %}
{%             if peer_group.ebgp_multihop is arista.avd.defined %}
| Ebgp multihop | {{ peer_group.ebgp_multihop }} |
{%             endif %}
{%             if peer_group.default_originate.enabled is arista.avd.defined(true) %}
| Default originate | True |
{%             endif %}
{%             if peer_group.send_community is arista.avd.defined %}
| Send community | {{ peer_group.send_community }} |
{%             endif %}
{%             if peer_group.maximum_routes is arista.avd.defined %}
{%                 if peer_group.maximum_routes == 0 %}
{%                     set value = "0 (no limit)" %}
{%                 else %}
{%                     set value = peer_group.maximum_routes %}
{%                 endif %}
{%                 if peer_group.maximum_routes_warning_limit is arista.avd.defined or peer_group.maximum_routes_warning_only is arista.avd.defined(true) %}
{%                     set value = value ~ " (" %}
{%                     if peer_group.maximum_routes_warning_limit is arista.avd.defined %}
{%                         set value = value ~ "warning-limit " ~ peer_group.maximum_routes_warning_limit %}
{%                         if peer_group.maximum_routes_warning_only is arista.avd.defined(true) %}
{%                             set value = value ~ ", " %}
{%                         else %}
{%                             set value = value ~ ")" %}
{%                         endif %}
{%                     endif %}
{%                     if peer_group.maximum_routes_warning_only is arista.avd.defined(true) %}
{%                         set value = value ~ "warning-only)" %}
{%                     endif %}
{%                 endif %}
| Maximum routes | {{ value }} |
{%             endif %}
{%             if peer_group.link_bandwidth.enabled is arista.avd.defined(true) %}
{%                 set value = "enabled" %}
{%                 if peer_group.link_bandwidth.default is arista.avd.defined %}
{%                     set value = "default " ~ peer_group.link_bandwidth.default %}
{%                 endif %}
| Link-Bandwidth | {{ value }} |
{%             endif %}
{%         endfor %}
{%     endif %}
{%     set temp = namespace() %}
{%     set temp.bgp_vrf_neighbors = false %}
{%     if router_bgp.vrfs is arista.avd.defined %}
{%         for vrf in router_bgp.vrfs | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
{%             if vrf.neighbors is arista.avd.defined %}
{%                 set temp.bgp_vrf_neighbors = true %}
{%                 break %}
{%             endif %}
{%         endfor %}
{%     endif %}
{%     if router_bgp.neighbors is arista.avd.defined or temp.bgp_vrf_neighbors is arista.avd.defined(true) %}

### BGP Neighbors

| Neighbor | Remote AS | VRF | Shutdown | Send-community | Maximum-routes | Allowas-in | BFD | RIB Pre-Policy Retain |
| -------- | --------- | --- | -------- | -------------- | -------------- | ---------- | --- | --------------------- |
{%         for neighbor in router_bgp.neighbors | arista.avd.convert_dicts('ip_address') | arista.avd.natural_sort('ip_address') %}
{%             if neighbor.peer_group is arista.avd.defined %}
{%                 set inherited = namespace() %}
{%                 set neighbor_peer_group = neighbor.peer_group %}
{%                 set peer_group = router_bgp.peer_groups | arista.avd.default([]) |
                                                             arista.avd.convert_dicts('name') |
                                                             selectattr('name', 'arista.avd.defined', neighbor_peer_group) |
                                                             first %}
{%                 if peer_group.remote_as is arista.avd.defined %}
{%                     set inherited.remote_as = "Inherited from peer group " ~ neighbor.peer_group %}
{%                 endif %}
{%                 if peer_group.vrf is arista.avd.defined %}
{%                     set inherited.vrf = "Inherited from peer group " ~ neighbor.peer_group %}
{%                 endif %}
{%                 if peer_group.send_community is arista.avd.defined %}
{%                     set inherited.send_community = "Inherited from peer group " ~ neighbor.peer_group %}
{%                 endif %}
{%                 if peer_group.maximum_routes is arista.avd.defined %}
{%                     set inherited.maximum_routes = "Inherited from peer group " ~ neighbor.peer_group %}
{%                 endif %}
{%                 if peer_group.allowas_in.enabled is arista.avd.defined(true) %}
{%                     set inherited.allowas_in = "Inherited from peer group " ~ neighbor.peer_group %}
{%                 endif %}
{%                 if peer_group.bfd is arista.avd.defined(true) %}
{%                     set inherited.bfd = "Inherited from peer group " ~ neighbor.peer_group %}
{%                 endif %}
{%                 if peer_group.shutdown is arista.avd.defined(true) %}
{%                     set inherited.shutdown = "Inherited from peer group " ~ neighbor.peer_group %}
{%                 endif %}
{%                 if peer_group.rib_in_pre_policy_retain.enabled is arista.avd.defined(true) %}
{%                     set inherited.rib_in_pre_policy_retain = "Inherited from peer group " ~ neighbor.peer_group %}
{%                 endif %}
{%             endif %}
{%             set active_parameter = namespace() %}
{%             set active_parameter.remote_as = neighbor.remote_as | arista.avd.default(inherited.remote_as, '-') %}
{%             set active_parameter.vrf = neighbor.vrf | arista.avd.default(inherited.vrf, 'default') %}
{%             set active_parameter.send_community = neighbor.send_community | arista.avd.default(inherited.send_community, '-') %}
{%             set active_parameter.bfd = neighbor.bfd | arista.avd.default(inherited.bfd, '-') %}
{%             set active_parameter.shutdown = neighbor.shutdown | arista.avd.default(inherited.shutdown, '-') %}
{%             if neighbor.rib_in_pre_policy_retain.enabled is arista.avd.defined() %}
{%                 set neighbor_rib_in_pre_policy_retain = neighbor.rib_in_pre_policy_retain.enabled %}
{%                 if neighbor.rib_in_pre_policy_retain.enabled is arista.avd.defined(true) and neighbor.rib_in_pre_policy_retain.all is arista.avd.defined(true) %}
{%                     set neighbor_rib_in_pre_policy_retain = neighbor_rib_in_pre_policy_retain ~ " (All)" %}
{%                 endif %}
{%             endif %}
{%             set active_parameter.rib_in_pre_policy_retain = neighbor_rib_in_pre_policy_retain | arista.avd.default(inherited.rib_in_pre_policy_retain, '-') %}
{%             if neighbor.maximum_routes is arista.avd.defined %}
{%                 if neighbor.maximum_routes == 0 %}
{%                     set value = "0 (no limit)" %}
{%                 else %}
{%                     set value = neighbor.maximum_routes %}
{%                 endif %}
{%                 if neighbor.maximum_routes_warning_limit is arista.avd.defined or neighbor.maximum_routes_warning_only is arista.avd.defined(true) %}
{%                     set value = value ~ " (" %}
{%                     if neighbor.maximum_routes_warning_limit is arista.avd.defined %}
{%                         set value = value ~ "warning-limit " ~ neighbor.maximum_routes_warning_limit %}
{%                         if neighbor.maximum_routes_warning_only is arista.avd.defined(true) %}
{%                             set value = value ~ ", " %}
{%                         else %}
{%                             set value = value ~ ")" %}
{%                         endif %}
{%                     endif %}
{%                     if neighbor.maximum_routes_warning_only is arista.avd.defined(true) %}
{%                         set value = value ~ "warning-only)" %}
{%                     endif %}
{%                 endif %}
{%             endif %}
{%             set active_parameter.maximum_routes = value | arista.avd.default(inherited.maximum_routes, '-') %}
{%             if neighbor.allowas_in.enabled is arista.avd.defined(true) %}
{%                 if neighbor.allowas_in.times is arista.avd.defined %}
{%                     set value_allowas = "Allowed, allowed " ~ neighbor.allowas_in.times ~ " times" %}
{%                 else %}
{%                     set value_allowas = "Allowed, allowed 3 (default) times" %}
{%                 endif %}
{%             endif %}
{%             set active_parameter.allowas_in = value_allowas | arista.avd.default(inherited.allowas_in, '-') %}
| {{ neighbor.ip_address }} | {{ active_parameter.remote_as }} | {{ active_parameter.vrf }} | {{ active_parameter.shutdown }} | {{ active_parameter.send_community }} | {{ active_parameter.maximum_routes }} | {{ active_parameter.allowas_in }} | {{ active_parameter.bfd }} | {{ active_parameter.rib_in_pre_policy_retain }} |
{%         endfor %}
{%         for vrf in router_bgp.vrfs | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
{%             if vrf.neighbors is arista.avd.defined %}
{%                 for neighbor in vrf.neighbors | arista.avd.convert_dicts('ip_address') %}
{%                     set inherited_vrf = namespace() %}
{%                     if neighbor.peer_group is arista.avd.defined %}
{%                         set neighbor_peer_group = neighbor.peer_group %}
{%                         set peer_group = router_bgp.peer_groups | arista.avd.default([]) |
                                                                     arista.avd.convert_dicts('name') |
                                                                     selectattr('name', 'arista.avd.defined', neighbor_peer_group) |
                                                                     first %}
{%                         if peer_group.remote_as is arista.avd.defined %}
{%                             set inherited_vrf.remote_as = "Inherited from peer group " ~ neighbor.peer_group %}
{%                         endif %}
{%                         if peer_group.send_community is arista.avd.defined %}
{%                             set inherited_vrf.send_community = "Inherited from peer group " ~ neighbor.peer_group %}
{%                         endif %}
{%                         if peer_group.maximum_routes is arista.avd.defined %}
{%                             set inherited_vrf.maximum_routes = "Inherited from peer group " ~ neighbor.peer_group %}
{%                         endif %}
{%                         if peer_group.allowas_in.enabled is arista.avd.defined(true) %}
{%                             set inherited_vrf.allowas_in = "Inherited from peer group " ~ neighbor.peer_group %}
{%                         endif %}
{%                         if peer_group.bfd is arista.avd.defined(true) %}
{%                             set inherited_vrf.bfd = "Inherited from peer group " ~ neighbor.peer_group %}
{%                         endif %}
{%                         if peer_group.shutdown is arista.avd.defined(true) %}
{%                             set inherited_vrf.shutdown = "Inherited from peer group " ~ neighbor.peer_group %}
{%                         endif %}
{%                         if peer_group.rib_in_pre_policy_retain.enabled is arista.avd.defined(true) %}
{%                             set inherited_vrf.rib_in_pre_policy_retain = "Inherited from peer group " ~ neighbor.peer_group %}
{%                         endif %}
{%                     endif %}
{%                     set active_parameter_vrf = namespace() %}
{%                     set active_parameter_vrf.remote_as = neighbor.remote_as | arista.avd.default(inherited_vrf.remote_as, '-') %}
{%                     set active_parameter_vrf.send_community = neighbor.send_community | arista.avd.default(inherited_vrf.send_community, '-') %}
{%                     set active_parameter_vrf.bfd = neighbor.bfd | arista.avd.default(inherited_vrf.bfd, '-') %}
{%                     set active_parameter_vrf.shutdown = neighbor.shutdown | arista.avd.default(inherited_vrf.shutdown, '-') %}
{%                     if neighbor.maximum_routes is arista.avd.defined %}
{%                         if neighbor.maximum_routes == 0 %}
{%                             set value = "0 (no limit)" %}
{%                         else %}
{%                             set value = neighbor.maximum_routes %}
{%                         endif %}
{%                         if neighbor.maximum_routes_warning_limit is arista.avd.defined or neighbor.maximum_routes_warning_only is arista.avd.defined(true) %}
{%                             set value = value ~ " (" %}
{%                             if neighbor.maximum_routes_warning_limit is arista.avd.defined %}
{%                                 set value = value ~ "warning-limit " ~ neighbor.maximum_routes_warning_limit %}
{%                                 if neighbor.maximum_routes_warning_only is arista.avd.defined(true) %}
{%                                     set value = value ~ ", " %}
{%                                 else %}
{%                                     set value = value ~ ")" %}
{%                                 endif %}
{%                             endif %}
{%                             if neighbor.maximum_routes_warning_only is arista.avd.defined(true) %}
{%                                 set value = value ~ "warning-only)" %}
{%                             endif %}
{%                         endif %}
{%                     endif %}
{%                     set active_parameter_vrf.maximum_routes = value | arista.avd.default(inherited_vrf.maximum_routes, '-') %}
{%                     if neighbor.allowas_in.enabled is arista.avd.defined(true) %}
{%                         if neighbor.allowas_in.times is arista.avd.defined %}
{%                             set value_allowas = "Allowed, allowed " ~ neighbor.allowas_in.times ~ " times" %}
{%                         else %}
{%                             set value_allowas = "Allowed, allowed 3 (default) times" %}
{%                         endif %}
{%                     endif %}
{%                     set active_parameter_vrf.allowas_in = value_allowas | arista.avd.default(inherited_vrf.allowas_in, '-') %}
{%                     if neighbor.rib_in_pre_policy_retain.enabled is arista.avd.defined() %}
{%                         set neighbor_rib_in_pre_policy_retain = neighbor.rib_in_pre_policy_retain.enabled %}
{%                         if neighbor.rib_in_pre_policy_retain.enabled is arista.avd.defined(true) and neighbor.rib_in_pre_policy_retain.all is arista.avd.defined(true) %}
{%                             set neighbor_rib_in_pre_policy_retain = neighbor_rib_in_pre_policy_retain ~ " (All)" %}
{%                         endif %}
{%                     endif %}
{%                     set active_parameter_vrf.rib_in_pre_policy_retain = neighbor_rib_in_pre_policy_retain | arista.avd.default(inherited_vrf.rib_in_pre_policy_retain, '-') %}
| {{ neighbor.ip_address }} | {{ active_parameter_vrf.remote_as }} | {{ vrf.name }} | {{ active_parameter_vrf.shutdown }} | {{ active_parameter_vrf.send_community }} | {{ active_parameter_vrf.maximum_routes }} | {{ active_parameter_vrf.allowas_in }} | {{ active_parameter_vrf.bfd }} | {{ active_parameter_vrf.rib_in_pre_policy_retain }} |
{%                 endfor %}
{%             endif %}
{%         endfor %}
{%     endif %}
{%     set neighbor_interfaces = [] %}
{%     for neighbor_interface in router_bgp.neighbor_interfaces | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
{%         do neighbor_interfaces.append(neighbor_interface) %}
{%     endfor %}
{%     for vrf in router_bgp.vrfs | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
{%         for neighbor_interface in vrf.neighbor_interfaces | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
{%             do neighbor_interface.update({"vrf": vrf.name}) %}
{%             do neighbor_interfaces.append(neighbor_interface) %}
{%         endfor %}
{%     endfor %}
{%     if neighbor_interfaces | length > 0 %}

### BGP Neighbor Interfaces

| Neighbor Interface | VRF | Peer Group | Remote AS | Peer Filter |
| ------------------ | --- | ---------- | --------- | ----------- |
{%         for neighbor_interface in neighbor_interfaces %}
{%             set vrf = neighbor_interface.vrf | arista.avd.default("default") %}
{%             set peer_group = neighbor_interface.peer_group | arista.avd.default("-") %}
{%             set remote_as = neighbor_interface.remote_as | arista.avd.default("-") %}
{%             set peer_filter = neighbor_interface.peer_filter | arista.avd.default("-") %}
| {{ neighbor_interface.name }} | {{ vrf }} | {{ peer_group }} | {{ remote_as }} | {{ peer_filter }} |
{%         endfor %}
{%     endif %}
{%     if router_bgp.aggregate_addresses is arista.avd.defined %}

### BGP Route Aggregation

| Prefix | AS Set | Summary Only | Attribute Map | Match Map | Advertise Only |
| ------ | ------ | ------------ | ------------- | --------- | -------------- |
{%         for aggregate_address in router_bgp.aggregate_addresses | arista.avd.convert_dicts('prefix') | arista.avd.natural_sort('prefix') %}
{%             if aggregate_address.as_set is arista.avd.defined(true) %}
{%                 set as_set = true %}
{%             else %}
{%                 set as_set = false %}
{%             endif %}
{%             if aggregate_address.summary_only is arista.avd.defined(true) %}
{%                 set summary_only = true %}
{%             else %}
{%                 set summary_only = false %}
{%             endif %}
{%             set attribute_map = aggregate_address.attribute_map | arista.avd.default("-") %}
{%             set match_map = aggregate_address.match_map | arista.avd.default("-") %}
{%             if aggregate_address.advertise_only is arista.avd.defined(true) %}
{%                 set advertise_only = true %}
{%             else %}
{%                 set advertise_only = false %}
{%             endif %}
| {{ aggregate_address.prefix }} | {{ as_set }} | {{ summary_only }} | {{ attribute_map }} | {{ match_map }} | {{ advertise_only }} |
{%         endfor %}
{%     endif %}
{%     if router_bgp.address_family_evpn is arista.avd.defined %}

### Router BGP EVPN Address Family
{%         if router_bgp.address_family_evpn.route.import_match_failure_action is arista.avd.defined('discard') %}

- VPN import pruning is __enabled__
{%         endif %}
{%         if router_bgp.address_family_evpn.peer_groups is arista.avd.defined %}

#### EVPN Peer Groups

| Peer Group | Activate |
| ---------- | -------- |
{%             for peer_group in router_bgp.address_family_evpn.peer_groups | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
| {{ peer_group.name }} | {{ peer_group.activate | arista.avd.default(false) }} |
{%             endfor %}
{%         endif %}
{%         if router_bgp.address_family_evpn.neighbor_default.encapsulation is arista.avd.defined %}

#### EVPN Neighbor Default Encapsulation

| Neighbor Default Encapsulation | Next-hop-self Source Interface |
| ------------------------------ | ------------------------------ |
{%             set row_default_encapsulation = router_bgp.address_family_evpn.neighbor_default.encapsulation | arista.avd.default("vxlan") %}
{%             set row_nhs_source_interface = router_bgp.address_family_evpn.neighbor_default.next_hop_self_source_interface | arista.avd.default('-') %}
| {{ row_default_encapsulation }} | {{ row_nhs_source_interface }} |
{%         endif %}
{%         if router_bgp.address_family_evpn.evpn_hostflap_detection is arista.avd.defined %}

#### EVPN Host Flapping Settings

| State | Window | Threshold | Expiry Timeout |
| ----- | ------ | --------- | -------------- |
{%             set evpn_hostflap_detection_window = '-' %}
{%             set evpn_hostflap_detection_threshold = '-' %}
{%             set evpn_hostflap_detection_expiry = '-' %}
{%             if router_bgp.address_family_evpn.evpn_hostflap_detection.enabled | arista.avd.default(true) %}
{%                 set evpn_hostflap_detection_state = "Enabled" %}
{%                 if router_bgp.address_family_evpn.evpn_hostflap_detection.window is arista.avd.defined %}
{%                     set evpn_hostflap_detection_window = router_bgp.address_family_evpn.evpn_hostflap_detection.window ~ ' Seconds' %}
{%                 endif %}
{%                 set evpn_hostflap_detection_threshold = router_bgp.address_family_evpn.evpn_hostflap_detection.threshold | arista.avd.default('-') %}
{%                 if router_bgp.address_family_evpn.evpn_hostflap_detection.expiry_timeout is arista.avd.defined %}
{%                     set evpn_hostflap_detection_expiry = router_bgp.address_family_evpn.evpn_hostflap_detection.expiry_timeout ~ ' Seconds' %}
{%                 endif %}
{%             else %}
{%                 set evpn_hostflap_detection_state = "Disabled" %}
{%             endif %}
| {{ evpn_hostflap_detection_state }} | {{ evpn_hostflap_detection_window }} | {{ evpn_hostflap_detection_threshold }} | {{ evpn_hostflap_detection_expiry }} |
{%         endif %}
{%     endif %}
{%     set evpn_gw_config = namespace(peer_groups = [], configured = false) %}
{%     for peer_group in router_bgp.peer_groups | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
{%         if router_bgp.address_family_evpn is arista.avd.defined and router_bgp.address_family_evpn.peer_groups is arista.avd.defined %}
{%             set address_family_evpn_peer_group = router_bgp.address_family_evpn.peer_groups | arista.avd.default([]) |
                                                                      arista.avd.convert_dicts('name') |
                                                                      selectattr('name', 'arista.avd.defined', peer_group.name) %}
{%             if address_family_evpn_peer_group[0].domain_remote is arista.avd.defined(true) %}
{%                 do evpn_gw_config.peer_groups.append(peer_group.name) %}
{%                 set evpn_gw_config.configured = true %}
{%             endif %}
{%         endif %}
{%     endfor %}
{%     if router_bgp.address_family_evpn.neighbor_default.next_hop_self_received_evpn_routes.enable is arista.avd.defined(true) %}
{%         set evpn_gw_config.configured = true %}
{%     endif %}
{%     if router_bgp.address_family_evpn.neighbor_default.next_hop_self_received_evpn_routes.inter_domain is arista.avd.defined(true) %}
{%         set evpn_gw_config.configured = true %}
{%     endif %}
{%     if evpn_gw_config.configured is arista.avd.defined(true) %}

#### EVPN DCI Gateway Summary

| Settings | Value |
| -------- | ----- |
{%         if evpn_gw_config.peer_groups | length > 0 %}
| Remote Domain Peer Groups | {{ evpn_gw_config.peer_groups | join(", ") }} |
{%         endif %}
{%         if router_bgp.address_family_evpn.neighbor_default.next_hop_self_received_evpn_routes.enable is arista.avd.defined(true) %}
| L3 Gateway Configured | True |
{%         endif %}
{%         if router_bgp.address_family_evpn.neighbor_default.next_hop_self_received_evpn_routes.inter_domain is arista.avd.defined(true) %}
| L3 Gateway Inter-domain | True |
{%         endif %}
{%     endif %}
{%     if router_bgp.address_family_vpn_ipv4 is arista.avd.defined %}

### Router BGP VPN-IPv4 Address Family
{%         if router_bgp.address_family_vpn_ipv4.route.import_match_failure_action is arista.avd.defined('discard') %}

- VPN import pruning is __enabled__
{%         endif %}
{%         if router_bgp.address_family_vpn_ipv4.neighbors is arista.avd.defined %}

#### VPN-IPv4 Neighbors

| Neighbor | Activate | Route-map In | Route-map Out |
| -------- | -------- | ------------ | ------------- |
{%             for neighbor in router_bgp.address_family_vpn_ipv4.neighbors | arista.avd.convert_dicts('ip_address') | arista.avd.natural_sort('ip_address') %}
{%                 set route_map_in = neighbor.route_map_in | arista.avd.default("-") %}
{%                 set route_map_out = neighbor.route_map_out | arista.avd.default("-") %}
| {{ neighbor.ip_address }} | {{ neighbor.activate | arista.avd.default(false) }} | {{ route_map_in }} | {{ route_map_out }} |
{%             endfor %}
{%         endif %}
{%         if router_bgp.address_family_vpn_ipv4.peer_groups is arista.avd.defined %}

#### VPN-IPv4 Peer Groups

| Peer Group | Activate | Route-map In | Route-map Out |
| ---------- | -------- | ------------ | ------------- |
{%             for peer_group in router_bgp.address_family_vpn_ipv4.peer_groups | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
{%                 set route_map_in = peer_group.route_map_in | arista.avd.default("-") %}
{%                 set route_map_out = peer_group.route_map_out | arista.avd.default("-") %}
| {{ peer_group.name }} | {{ peer_group.activate | arista.avd.default(false) }} | {{ route_map_in }} | {{ route_map_out }} |
{%             endfor %}
{%         endif %}
{%     endif %}
{%     if router_bgp.address_family_vpn_ipv6 is arista.avd.defined %}

### Router BGP VPN-IPv6 Address Family
{%         if router_bgp.address_family_vpn_ipv6.route.import_match_failure_action is arista.avd.defined('discard') %}

- VPN import pruning is __enabled__
{%         endif %}
{%         if router_bgp.address_family_vpn_ipv6.neighbors is arista.avd.defined %}

#### VPN-IPv6 Neighbors

| Neighbor | Activate | Route-map In | Route-map Out |
| -------- | -------- | ------------ | ------------- |
{%             for neighbor in router_bgp.address_family_vpn_ipv6.neighbors | arista.avd.convert_dicts('ip_address') | arista.avd.natural_sort('ip_address') %}
{%                 set route_map_in = neighbor.route_map_in | arista.avd.default("-") %}
{%                 set route_map_out = neighbor.route_map_out | arista.avd.default("-") %}
| {{ neighbor.ip_address }} | {{ neighbor.activate | arista.avd.default(false) }} | {{ route_map_in }} | {{ route_map_out }} |
{%             endfor %}
{%         endif %}
{%         if router_bgp.address_family_vpn_ipv6.peer_groups is arista.avd.defined %}

#### VPN-IPv6 Peer Groups

| Peer Group | Activate | Route-map In | Route-map Out |
| ---------- | -------- | ------------ | ------------- |
{%             for peer_group in router_bgp.address_family_vpn_ipv6.peer_groups | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
{%                 set route_map_in = peer_group.route_map_in | arista.avd.default("-") %}
{%                 set route_map_out = peer_group.route_map_out | arista.avd.default("-") %}
| {{ peer_group.name }} | {{ peer_group.activate | arista.avd.default(false) }} | {{ route_map_in }} | {{ route_map_out }} |
{%             endfor %}
{%         endif %}
{%     endif %}
{%     if router_bgp.vlan_aware_bundles is arista.avd.defined %}

### Router BGP VLAN Aware Bundles

| VLAN Aware Bundle | Route-Distinguisher | Both Route-Target | Import Route Target | Export Route-Target | Redistribute | VLANs |
| ----------------- | ------------------- | ----------------- | ------------------- | ------------------- | ------------ | ----- |
{%         for vlan_aware_bundle in router_bgp.vlan_aware_bundles | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
{%             set route_distinguisher = vlan_aware_bundle.rd | arista.avd.default("-") %}
{%             set vlans = vlan_aware_bundle.vlan | arista.avd.default("-") %}
{%             if vlan_aware_bundle.route_targets.both is arista.avd.defined or vlan_aware_bundle.route_targets.import_export_evpn_domains is arista.avd.defined %}
{%                 set both_route_target = vlan_aware_bundle.route_targets.both | arista.avd.default([]) %}
{%                 for rt in vlan_aware_bundle.route_targets.import_export_evpn_domains | arista.avd.natural_sort %}
{%                     do both_route_target.append(rt.domain ~ " " ~ rt.route_target) %}
{%                 endfor %}
{%             endif %}
{%             if vlan_aware_bundle.route_targets.import is arista.avd.defined or vlan_aware_bundle.route_targets.import_evpn_domains is arista.avd.defined %}
{%                 set import_route_target = vlan_aware_bundle.route_targets.import | arista.avd.default([]) %}
{%                 for rt in vlan_aware_bundle.route_targets.import_evpn_domains | arista.avd.natural_sort %}
{%                     do import_route_target.append(rt.domain ~ " " ~ rt.route_target) %}
{%                 endfor %}
{%             endif %}
{%             if vlan_aware_bundle.route_targets.export is arista.avd.defined or vlan_aware_bundle.route_targets.export_evpn_domains is arista.avd.defined %}
{%                 set export_route_target = vlan_aware_bundle.route_targets.export | arista.avd.default([]) %}
{%                 for rt in vlan_aware_bundle.route_targets.export_evpn_domains | arista.avd.natural_sort  %}
{%                     do export_route_target.append(rt.domain ~ " " ~ rt.route_target) %}
{%                 endfor %}
{%             endif %}
{%             set redistribute_route = vlan_aware_bundle.redistribute_routes | arista.avd.default("") | list %}
{%             set no_redistribute_route = vlan_aware_bundle.no_redistribute_routes | arista.avd.default("") | map("replace","","no ",1) | list %}
{%             set redistribution = redistribute_route + no_redistribute_route %}
| {{ vlan_aware_bundle.name }} | {{ route_distinguisher }} | {{ both_route_target | arista.avd.default(["-"]) | join("<br>") }} | {{ import_route_target | arista.avd.default(["-"]) | join("<br>") }} | {{ export_route_target | arista.avd.default(["-"]) | join("<br>") }} | {{ redistribution | join("<br>") | arista.avd.default("-") }} | {{ vlans }} |
{%         endfor %}
{%     endif %}
{%     if router_bgp.vlans is arista.avd.defined %}

### Router BGP VLANs

| VLAN | Route-Distinguisher | Both Route-Target | Import Route Target | Export Route-Target | Redistribute |
| ---- | ------------------- | ----------------- | ------------------- | ------------------- | ------------ |
{%         for vlan in router_bgp.vlans | arista.avd.convert_dicts('id') | arista.avd.natural_sort('id') %}
{%             set route_distinguisher = vlan.rd | arista.avd.default("-") %}
{%             if vlan.route_targets.both is arista.avd.defined or vlan.route_targets.import_export_evpn_domains is arista.avd.defined %}
{%                 set both_route_target = vlan.route_targets.both | arista.avd.default([]) %}
{%                 for rt in vlan.route_targets.import_export_evpn_domains | arista.avd.natural_sort %}
{%                     do both_route_target.append(rt.domain ~ " " ~ rt.route_target) %}
{%                 endfor %}
{%             endif %}
{%             if vlan.route_targets.import is arista.avd.defined or vlan.route_targets.import_evpn_domains is arista.avd.defined %}
{%                 set import_route_target = vlan.route_targets.import | arista.avd.default([]) %}
{%                 for rt in vlan.route_targets.import_evpn_domains | arista.avd.natural_sort %}
{%                     do import_route_target.append(rt.domain ~ " " ~ rt.route_target) %}
{%                 endfor %}
{%             endif %}
{%             if vlan.route_targets.export is arista.avd.defined or vlan.route_targets.export_evpn_domains is arista.avd.defined %}
{%                 set export_route_target = vlan.route_targets.export | arista.avd.default([]) %}
{%                 for rt in vlan.route_targets.export_evpn_domains | arista.avd.natural_sort  %}
{%                     do export_route_target.append(rt.domain ~ " " ~ rt.route_target) %}
{%                 endfor %}
{%             endif %}
{%             set redistribute_route = vlan.redistribute_routes | arista.avd.default("") | list %}
{%             set no_redistribute_route = vlan.no_redistribute_routes | arista.avd.default("") | map("replace","","no ",1) | list %}
{%             set redistribution = redistribute_route + no_redistribute_route %}
| {{ vlan.id }} | {{ route_distinguisher }} | {{ both_route_target | arista.avd.default(["-"]) | join("<br>") }} | {{ import_route_target | arista.avd.default(["-"]) | join("<br>") }} | {{ export_route_target | arista.avd.default(["-"]) | join("<br>") }} | {{ redistribution | join("<br>") | arista.avd.default("-") }} |
{%         endfor %}
{%     endif %}
{%     if router_bgp.vpws is arista.avd.defined %}

### Router BGP VPWS Instances

| Instance | Route-Distinguisher | Both Route-Target | MPLS Control Word | Label Flow | MTU | Pseudowire | Local ID | Remote ID |
| -------- | ------------------- | ----------------- | ----------------- | -----------| --- | ---------- | -------- | --------- |
{%         for vpws_service in router_bgp.vpws %}
{%             if vpws_service.name is arista.avd.defined and vpws_service.rd is arista.avd.defined and vpws_service.route_targets.import_export is arista.avd.defined %}
{%                 for pseudowire in vpws_service.pseudowires | arista.avd.natural_sort("name") %}
{%                     if pseudowire.name is arista.avd.defined %}
{%                         set row_mpls_control_word = vpws_service.mpls_control_word | arista.avd.default(false) %}
{%                         set row_label_flow = vpws_service.label_flow | arista.avd.default(false) %}
{%                         set row_mtu = vpws_service.mtu | arista.avd.default("-") %}
| {{ vpws_service.name }} | {{ vpws_service.rd }} | {{ vpws_service.route_targets.import_export }} | {{ row_mpls_control_word }} | {{ row_label_flow }} | {{ row_mtu }} | {{ pseudowire.name }} | {{ pseudowire.id_local }} | {{ pseudowire.id_remote }} |
{%                     endif %}
{%                 endfor %}
{%             endif %}
{%         endfor %}
{%     endif %}
{%     if router_bgp.vrfs is arista.avd.defined %}

### Router BGP VRFs

| VRF | Route-Distinguisher | Redistribute |
| --- | ------------------- | ------------ |
{%         for vrf in router_bgp.vrfs | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
{%             set route_distinguisher = vrf.rd | arista.avd.default("-") %}
{%             set redistribute = vrf.redistribute_routes | arista.avd.convert_dicts('source_protocol') | arista.avd.default([{'source_protocol':'-'}]) | map(attribute='source_protocol') %}
| {{ vrf.name }} | {{ route_distinguisher }} | {{ redistribute | join("<br>") }} |
{%         endfor %}
{%     endif %}

### Router BGP Device Configuration

```eos
{%     include 'eos/router-bgp.j2' %}
```
{% endif %}
{% if policy_maps.pbr is arista.avd.defined %}

## PBR Policy Maps

### PBR Policy Maps Summary
{%     for policy_map in policy_maps.pbr | arista.avd.natural_sort('name') %}

#### {{ policy_map.name }}
{%         if policy_map.classes is arista.avd.defined %}

| Class | Index | Drop | Nexthop | Recursive |
| ----- | ----- | ---- | ------- | --------- |
{%             for class in policy_map.classes %}
{%                 set index = class.index | arista.avd.default('-') %}
{%                 set drop = class.drop | arista.avd.default('-') %}
{%                 set nexthop = class.set.nexthop.ip_address | arista.avd.default('-') %}
{%                 set recur = class.set.nexthop.recursive | arista.avd.default('-') %}
| {{ class.name }} | {{ index }} | {{ drop }} | {{ nexthop }} | {{ recur }} |
{%             endfor %}
{%         endif %}
{%     endfor %}

### PBR Policy Maps Configuration

```eos
{%     include 'eos/policy-maps-pbr.j2' %}
```
{% endif %}
{# Interfaces #}
{% set ethernet_interface_bfd = namespace(configured=false) %}
{% set port_channel_interface_bfd = namespace(configured=false) %}
{% set vlan_interface_bfd = namespace(configured=false) %}
{% set loopback_interface_bfd = namespace(configured=false) %}
{% for ethernet_interface in ethernet_interfaces | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
{%     if ethernet_interface.bfd.interval is arista.avd.defined and
          ethernet_interface.bfd.min_rx is arista.avd.defined and
          ethernet_interface.bfd.multiplier is arista.avd.defined %}
{%         set ethernet_interface_bfd.configured = true %}
{%     endif %}
{% endfor %}
{% for port_channel_interface in port_channel_interfaces | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
{%     if port_channel_interface.bfd.interval is arista.avd.defined and
          port_channel_interface.bfd.min_rx is arista.avd.defined and
          port_channel_interface.bfd.multiplier is arista.avd.defined %}
{%         set port_channel_interface_bfd.configured = true %}
{%     endif %}
{% endfor %}
{% for vlan_interface in vlan_interfaces | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
{%     if vlan_interface.bfd.interval is arista.avd.defined and
          vlan_interface.bfd.min_rx is arista.avd.defined and
          vlan_interface.bfd.multiplier is arista.avd.defined %}
{%         set vlan_interface_bfd.configured = true %}
{%     endif %}
{% endfor %}
{% if router_bfd is arista.avd.defined or ethernet_interface_bfd.configured or port_channel_interface_bfd.configured or vlan_interface_bfd.configured %}

# BFD
{## Router BFD #}
{%     include 'documentation/router-bfd.j2' %}
{## BFD Interfaces #}
{%     include 'documentation/bfd-interfaces.j2' %}
{% endif %}
{# MPLS #}
{% set mpls_configured = namespace(ethernet_interfaces=false, loopback_interfaces=false, port_channel_interfaces=false) %}
{% for ethernet_interface in ethernet_interfaces | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
{%     if ethernet_interface.mpls is arista.avd.defined %}
{%         set mpls_configured.ethernet_interfaces = true %}
{%     endif %}
{% endfor %}
{% for loopback_interface in loopback_interfaces | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
{%     if loopback_interface.mpls is arista.avd.defined %}
{%         set mpls_configured.loopback_interfaces = true %}
{%     endif %}
{% endfor %}
{% for port_channel_interface in port_channel_interfaces | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
{%     if port_channel_interface.mpls is arista.avd.defined %}
{%         set mpls_configured.port_channel_interfaces = true %}
{%     endif %}
{% endfor %}
{% if mpls is arista.avd.defined or mpls_configured.ethernet_interfaces or mpls_configured.loopback_interfaces or mpls_configured.port_channel_interfaces %}

# MPLS
{## MPLS and LDP #}
{%     include 'documentation/mpls-and-ldp.j2' %}
{## MPLS Interfaces #}
{%     include 'documentation/mpls-interfaces.j2' %}
{% endif %}
{% if patch_panel is arista.avd.defined %}

# Patch Panel

## Patch Panel Summary

| Patch Name | Enabled | Connector A Type | Connector A Endpoint | Connector B Type | Connector B Endpoint |
| ---------- | ------- | ---------------- | -------------------- | ---------------- | -------------------- |
{%     for patch in patch_panel.patches | arista.avd.default([]) %}
{%         if patch.name is arista.avd.defined %}
{%             set patch_panel_patch = namespace() %}
{%             set patch_panel_patch.enabled = patch.enabled | arista.avd.default(true) %}
{%             for connector in patch.connectors | arista.avd.default([]) %}
{%                 if loop.first %}
{%                     set patch_panel_patch.connector_a_type = connector.type | capitalize %}
{%                     set patch_panel_patch.connector_a_endpoint = connector.endpoint %}
{%                 else %}
{%                     set patch_panel_patch.connector_b_type = connector.type | capitalize %}
{%                     set patch_panel_patch.connector_b_endpoint = connector.endpoint %}
{%                 endif %}
{%             endfor %}
| {{ patch.name }} | {{ patch_panel_patch.enabled }} | {{ patch_panel_patch.connector_a_type }} | {{ patch_panel_patch.connector_a_endpoint }} | {{ patch_panel_patch.connector_b_type }} | {{ patch_panel_patch.connector_b_endpoint }} |
{%         endif %}
{%     endfor %}

## Patch Panel Configuration

```eos
{%     include 'eos/patch-panel.j2' %}
```
{% endif %}

# Multicast
{% if ip_igmp_snooping is arista.avd.defined %}

## IP IGMP Snooping

### IP IGMP Snooping Summary
{%     if ip_igmp_snooping.globally_enabled is arista.avd.defined(false) %}

IGMP snooping is globally disabled
{%     elif ip_igmp_snooping.globally_enabled is arista.avd.defined(true) %}

| IGMP Snooping | Fast Leave | Interface Restart Query | Proxy | Restart Query Interval | Robustness Variable |
| ------------- | ---------- | ----------------------- | ----- | ---------------------- | ------------------- |
{%         set fast_leave = ip_igmp_snooping.fast_leave | arista.avd.default('-') %}
{%         set intf_res_qry = ip_igmp_snooping.interface_restart_query | arista.avd.default('-') %}
{%         set proxy = ip_igmp_snooping.proxy | arista.avd.default('-') %}
{%         set res_qry_int = ip_igmp_snooping.restart_query_interval | arista.avd.default('-') %}
{%         set rv = ip_igmp_snooping.robustness_variable | arista.avd.default('-') %}
| Enabled | {{ fast_leave }} | {{ intf_res_qry }} | {{ proxy }} | {{ res_qry_int }} | {{ rv }} |
{%         if ip_igmp_snooping.querier is arista.avd.defined %}

| Querier Enabled | IP Address | Query Interval | Max Response Time | Last Member Query Interval | Last Member Query Count | Startup Query Interval | Startup Query Count | Version |
| --------------- | ---------- | -------------- | ----------------- | -------------------------- | ----------------------- | ---------------------- | ------------------- | ------- |
{%             set querier = ip_igmp_snooping.querier.enabled | arista.avd.default('-') %}
{%             set addr = ip_igmp_snooping.querier.address | arista.avd.default('-') %}
{%             set qry_int = ip_igmp_snooping.querier.query_interval | arista.avd.default('-') %}
{%             set mx_resp_time = ip_igmp_snooping.querier.max_response_time | arista.avd.default('-') %}
{%             set last_mem_qry_int = ip_igmp_snooping.querier.last_member_query_interval | arista.avd.default('-') %}
{%             set last_mem_qry_cnt = ip_igmp_snooping.querier.last_member_query_count | arista.avd.default('-') %}
{%             set stu_qry_int = ip_igmp_snooping.querier.startup_query_interval | arista.avd.default('-') %}
{%             set stu_qry_cnt = ip_igmp_snooping.querier.startup_query_count | arista.avd.default('-') %}
{%             set version = ip_igmp_snooping.querier.version | arista.avd.default('-') %}
| {{ querier }} | {{ addr }} | {{ qry_int }} | {{ mx_resp_time }} | {{ last_mem_qry_int }} | {{ last_mem_qry_cnt }} | {{ stu_qry_int }} | {{ stu_qry_cnt }} | {{ version }} |
{%         endif %}
{%         if ip_igmp_snooping.vlans is arista.avd.defined %}
{%             set qr_settings_vlans = [] %}

#### IP IGMP Snooping Vlan Summary

| Vlan | IGMP Snooping | Fast Leave | Max Groups | Proxy |
| ---- | ------------- | ---------- | ---------- | ----- |
{%             for vlan in ip_igmp_snooping.vlans | arista.avd.natural_sort('id') %}
{%                 set vlan_snooping = vlan.enabled | arista.avd.default('-') %}
{%                 set fast_leave = vlan.fast_leave | arista.avd.default('-') %}
{%                 set max_groups = vlan.max_groups | arista.avd.default('-') %}
{%                 set proxy = vlan.proxy | arista.avd.default('-') %}
| {{ vlan.id }} | {{ vlan_snooping }} | {{ fast_leave }} | {{ max_groups }} | {{ proxy }} |
{%                 if vlan.querier is arista.avd.defined %}
{%                     do qr_settings_vlans.append(vlan) %}
{%                 endif %}
{%             endfor %}
{%             if qr_settings_vlans | length > 0 %}

| Vlan | Querier Enabled | IP Address | Query Interval | Max Response Time | Last Member Query Interval | Last Member Query Count | Startup Query Interval | Startup Query Count | Version |
| ---- | --------------- | ---------- | -------------- | ----------------- | -------------------------- | ----------------------- | ---------------------- | ------------------- | ------- |
{%                 for vlan in qr_settings_vlans %}
{%                     set querier = vlan.querier.enabled | arista.avd.default('-') %}
{%                     set addr = vlan.querier.address | arista.avd.default('-') %}
{%                     set qry_int = vlan.querier.query_interval | arista.avd.default('-') %}
{%                     set mx_resp_time = vlan.querier.max_response_time | arista.avd.default('-') %}
{%                     set last_mem_qry_int = vlan.querier.last_member_query_interval | arista.avd.default('-') %}
{%                     set last_mem_qry_cnt = vlan.querier.last_member_query_count | arista.avd.default('-') %}
{%                     set stu_qry_int = vlan.querier.startup_query_interval | arista.avd.default('-') %}
{%                     set stu_qry_cnt = vlan.querier.startup_query_count | arista.avd.default('-') %}
{%                     set version = vlan.querier.version | arista.avd.default('-') %}
| {{ vlan.id }} | {{ querier }} | {{ addr }} | {{ qry_int }} | {{ mx_resp_time }} | {{ last_mem_qry_int }} | {{ last_mem_qry_cnt }} | {{ stu_qry_int }} | {{ stu_qry_cnt }} | {{ version }} |
{%                 endfor %}
{%             endif %}
{%         endif %}
{%     endif %}

### IP IGMP Snooping Device Configuration

```eos
{%     include 'eos/ip-igmp-snooping.j2' %}
```
{% endif %}
{% if router_multicast is arista.avd.defined %}

## Router Multicast

### IP Router Multicast Summary

{%     if router_multicast.ipv4.counters.rate_period_decay is arista.avd.defined %}
- Counters rate period decay is set for {{ router_multicast.ipv4.counters.rate_period_decay }} seconds
{%     endif %}
{%     if router_multicast.ipv4.routing is arista.avd.defined(true) %}
- Routing for IPv4 multicast is enabled.
{%     endif %}
{%     if router_multicast.ipv4.multipath is arista.avd.defined('deterministic color') %}
- Multipathing deterministically by selecting the same-colored upstream routers.
{%     elif router_multicast.ipv4.multipath is arista.avd.defined('deterministic router-id') %}
- Multipathing deterministically by selecting the same upstream router.
{%     elif router_multicast.ipv4.multipath is arista.avd.defined('none') %}
- Multipathing disabled.
{%     elif router_multicast.ipv4.multipath is arista.avd.defined('deterministic') %}
- Multipathing via ECMP.
{%     endif %}
{%     if router_multicast.ipv4.software_forwarding is arista.avd.defined('kernel') %}
- Software forwarding by the Linux kernel
{%     elif router_multicast.ipv4.software_forwarding is arista.avd.defined('sfe') %}
- Software forwarding by the Software Forwarding Engine (SFE)
{%     endif %}
{%     if router_multicast.ipv4.rpf.routes is arista.avd.defined %}

### IP Router Multicast RPF Routes

| Source Prefix | Next Hop | Administrative Distance |
| ------------- | -------- | ----------------------- |
{%         for rpf_route in router_multicast.ipv4.rpf.routes | arista.avd.natural_sort('source_prefix') if rpf_route.source_prefix is arista.avd.defined %}
{%             for destination in rpf_route.destinations | arista.avd.natural_sort('nexthop') if destination.nexthop is arista.avd.defined %}
| {{ rpf_route.source_prefix }} | {{ destination.nexthop }} | {{ destination.distance | arista.avd.default('-') }} |
{%             endfor %}
{%         endfor %}
{%     endif %}
{%     if router_multicast.vrfs is arista.avd.defined %}

### IP Router Multicast VRFs

| VRF Name | Multicast Routing |
| -------- | ----------------- |
{%         for vrf in router_multicast.vrfs | arista.avd.natural_sort('name') %}
{%             if vrf.ipv4.routing is arista.avd.defined(true) %}
{%                 set multicast_routing = "enabled" %}
{%             else %}
{%                 set multicast_routing = "disabled" %}
{%             endif %}
| {{ vrf.name }} | {{ multicast_routing }} |
{%         endfor %}
{%     endif %}

### Router Multicast Device Configuration

```eos
{%     include 'eos/router-multicast.j2' %}
```

{% endif %}
{# Interfaces #}
{% set pim_interfaces = [] %}
{% for ethernet_interface in ethernet_interfaces | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
{%     if ethernet_interface.pim.ipv4.sparse_mode is arista.avd.defined(true) %}
{%         do pim_interfaces.append(ethernet_interface) %}
{%     endif %}
{% endfor %}
{% for port_channel_interface in port_channel_interfaces | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
{%     if port_channel_interface.pim.ipv4.sparse_mode is arista.avd.defined(true) %}
{%         do pim_interfaces.append(port_channel_interface) %}
{%     endif %}
{% endfor %}
{% for vlan_interface in vlan_interfaces | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
{%     if vlan_interface.pim.ipv4.sparse_mode is arista.avd.defined(true) %}
{%         do pim_interfaces.append(vlan_interface) %}
{%     endif %}
{% endfor %}
{% if router_pim_sparse_mode is arista.avd.defined or pim_interfaces | length > 0 %}

## PIM Sparse Mode
{## Router pim sparse-mode #}
{%     include 'documentation/router-pim-sparse-mode.j2' %}
{## PIM Sparse Mode Interfaces #}
{%     include 'documentation/pim-sparse-mode-interfaces.j2' %}
{% endif %}
{% if router_igmp is arista.avd.defined %}

## Router IGMP

### Router IGMP Summary

| Settings | Value |
| -------- | ----- |
{%     if router_igmp.ssm_aware is arista.avd.defined %}
| SSM Aware | {{ router_igmp.ssm_aware }} |
{%     endif %}

### Router IGMP Device Configuration

```eos
{%     include 'eos/router-igmp.j2' %}
```
{% endif %}

# Filters
{% if community_lists is defined and community_lists is not none %}

## Community-lists

### Community-lists Summary

| Name | Action |
| -------- | ------ |
{%     for community_list in community_lists | arista.avd.natural_sort('name') %}
| {{ community_list.name }} | {{ community_list.action }} |
{%     endfor %}

### Community-lists Device Configuration

```eos
{%     include 'eos/community-lists.j2' %}
```
{% endif %}
{% if ip_community_lists is arista.avd.defined %}

## IP Community-lists

### IP Community-lists Summary

| Name | Action | Communities / Regexp |
| ---- | ------ | -------------------- |
{%     for community_list in ip_community_lists %}
{%         if community_list.name is arista.avd.defined %}
{%             for entry in community_list.entries | arista.avd.default([]) %}
{%                 if entry.action is arista.avd.defined %}
{%                     if entry.regexp is arista.avd.defined %}
| {{ community_list.name }} | {{ entry.action }} | {{ entry.regexp }} |
{%                     elif entry.communities is arista.avd.defined %}
{%                         if entry.communities | length > 0 %}
| {{ community_list.name }} | {{ entry.action }} | {{ entry.communities | join(', ') }} |
{%                         endif %}
{%                     endif %}
{%                 endif %}
{%             endfor %}
{%         endif %}
{%     endfor %}

### IP Community-lists Device Configuration

```eos
{%     include 'eos/ip-community-lists.j2' %}
```
{% endif %}
{% if peer_filters is arista.avd.defined %}

## Peer Filters

### Peer Filters Summary
{%     for peer_filter in peer_filters | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}

#### {{ peer_filter.name }}

| Sequence | Match |
| -------- | ----- |
{%         for sequence in peer_filter.sequence_numbers | arista.avd.natural_sort('sequence') %}
| {{ sequence.sequence }} | {{ sequence.match }} |
{%         endfor %}
{%     endfor %}

### Peer Filters Device Configuration

```eos
{%     include 'eos/peer-filters.j2' %}
```
{% endif %}
{% if dynamic_prefix_lists is arista.avd.defined %}

## Dynamic Prefix-lists

### Dynamic Prefix-lists Summary

| Dynamic Prefix-List Name | Match Map | IPv4 Prefix-list | IPv6 Prefix-list |
| ------------------------ | --------- | ---------------- | ---------------- |
{%     for dynamic_prefix_list in dynamic_prefix_lists | arista.avd.natural_sort('name') if dynamic_prefix_list.name is arista.avd.defined and dynamic_prefix_list.match_map is arista.avd.defined %}
| {{ dynamic_prefix_list.name }} | {{ dynamic_prefix_list.match_map }} | {{ dynamic_prefix_list.prefix_list.ipv4 | arista.avd.default('-') }} | {{ dynamic_prefix_list.prefix_list.ipv6 | arista.avd.default('-') }} |
{%     endfor %}

### Dynamic Prefix-lists Device Configuration

```eos
{%     include 'eos/dynamic-prefix-lists.j2' %}
```
{% endif %}
{% if prefix_lists is arista.avd.defined %}

## Prefix-lists

### Prefix-lists Summary

{%     for prefix_list in prefix_lists | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
#### {{ prefix_list.name }}

| Sequence | Action |
| -------- | ------ |
{%         for sequence in prefix_list.sequence_numbers | arista.avd.natural_sort('sequence') %}
| {{ sequence.sequence }} | {{ sequence.action }} |
{%         endfor %}

{%     endfor %}
### Prefix-lists Device Configuration

```eos
{%     include 'eos/prefix-lists.j2' %}
```
{% endif %}
{% if ipv6_prefix_lists is arista.avd.defined %}

## IPv6 Prefix-lists

### IPv6 Prefix-lists Summary

{%     for ipv6_prefix_list in ipv6_prefix_lists | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
#### {{ ipv6_prefix_list.name }}

| Sequence | Action |
| -------- | ------ |
{%         for sequence in ipv6_prefix_list.sequence_numbers | arista.avd.natural_sort('sequence') %}
| {{ sequence.sequence }} | {{ sequence.action }} |
{%         endfor %}

{%     endfor %}
### IPv6 Prefix-lists Device Configuration

```eos
{%     include 'eos/ipv6-prefix-lists.j2' %}
```
{% endif %}
{% if route_maps is defined and route_maps is not none %}

## Route-maps

### Route-maps Summary

{%     for route_map in route_maps | arista.avd.natural_sort('name') %}
#### {{ route_map.name }}

| Sequence | Type | Match | Set | Sub-Route-Map | Continue |
| -------- | ---- | ----- | --- | ------------- | -------- |
{%         for sequence in route_map.sequence_numbers | arista.avd.natural_sort('sequence') %}
{%             if sequence.continue.enabled is arista.avd.defined(true) %}
{%                 set row_continue = sequence.continue.sequence_number | arista.avd.default("Next Sequence") %}
{%             endif %}
| {{ sequence.sequence }} | {{ sequence.type }} | {{ sequence.match | arista.avd.default(['-']) | join('<br>') }} | {{ sequence.set | arista.avd.default(['-']) | join('<br>') }} | {{ sequence.sub_route_map | arista.avd.default('-') }} | {{ row_continue | arista.avd.default('-') }} |
{%         endfor %}

{%     endfor %}
### Route-maps Device Configuration

```eos
{%     include 'eos/route-maps.j2' %}
```
{% endif %}
{% if ip_extcommunity_lists is arista.avd.defined %}

## IP Extended Community Lists

### IP Extended Community Lists Summary

| List Name | Type | Extended Communities |
| --------- | ---- | -------------------- |
{%     for ip_extcommunity_list in ip_extcommunity_lists | arista.avd.natural_sort('name') %}
{%         for entry in ip_extcommunity_list.entries | arista.avd.default([]) %}
{%             if entry.type is arista.avd.defined and entry.extcommunities is arista.avd.defined %}
| {{ ip_extcommunity_list.name }} | {{ entry.type }} | {{ entry.extcommunities }} |
{%             endif %}
{%         endfor %}
{%     endfor %}

### IP Extended Community Lists configuration

```eos
{%     include 'eos/ip-extended-community-lists.j2' %}
```
{% endif %}
{% if ip_extcommunity_lists_regexp is arista.avd.defined %}

## IP Extended Community RegExp Lists

### IP Extended Community RegExp Lists Summary

| List Name | Type | Regular Expression |
| --------- | ---- | ------------------ |
{%     for ip_extcommunity_list in ip_extcommunity_lists_regexp | arista.avd.natural_sort('name') %}
{%         for entry in ip_extcommunity_list.entries | arista.avd.default([]) %}
{%             if entry.type is arista.avd.defined and entry.regexp is arista.avd.defined %}
| {{ ip_extcommunity_list.name }} | {{ entry.type }} | {{ entry.regexp }} |
{%             endif %}
{%         endfor %}
{%     endfor %}

### IP Extended Community RegExp Lists configuration

```eos
{%     include 'eos/ip-extended-community-lists-regexp.j2' %}
```
{% endif %}
{% if match_list_input is arista.avd.defined %}

## Match-lists

{%     if match_list_input.string is arista.avd.defined %}
### Match-list Input String Summary

{%         for match_list in match_list_input.string | arista.avd.natural_sort('name') %}
#### {{ match_list.name }}

| Sequence | Match Regex |
| -------- | ------ |
{%             for sequence in match_list.sequence_numbers | arista.avd.natural_sort('sequence') %}
| {{ sequence.sequence }} | {{ sequence.match_regex }} |
{%             endfor %}

{%         endfor %}

{%     endif %}
### Match-lists Device Configuration

```eos
{%     include 'eos/match-lists.j2' %}
```
{% endif %}
{% if as_path.access_lists is arista.avd.defined %}

## AS Path Lists

### AS Path Lists Summary
{%     if as_path.regex_mode is arista.avd.defined %}

AS Path Regex Mode is **{{ as_path.regex_mode }}**.
{%     endif %}

| List Name | Type | Match | Origin |
| --------- | ---- | ----- | ------ |
{%     for as_path_access_list in as_path.access_lists | arista.avd.natural_sort('name') %}
{%         if as_path_access_list.name is arista.avd.defined and as_path_access_list.entries is arista.avd.defined %}
{%             for as_path_access_list_entry in as_path_access_list.entries %}
{%                 if as_path_access_list_entry.type is arista.avd.defined and as_path_access_list_entry.match is arista.avd.defined %}
| {{ as_path_access_list.name }} | {{ as_path_access_list_entry.type }} | {{ as_path_access_list_entry.match | replace('|', '\|') }} | {{ as_path_access_list_entry.origin | arista.avd.default('any') }} |
{%                 endif %}
{%             endfor %}
{%         endif %}
{%     endfor %}

### AS Path Lists configuration

```eos
{%     include 'eos/as-path.j2' %}
```
{% endif %}
{# DOT1X Interfaces #}
{% set ethernet_interfaces_dot1x = [] %}
{% for ethernet_interface in ethernet_interfaces | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
{%     if ethernet_interface.dot1x is arista.avd.defined %}
{%         do ethernet_interfaces_dot1x.append(ethernet_interface) %}
{%     endif %}
{% endfor %}
{% if (dot1x is arista.avd.defined) or (ethernet_interfaces_dot1x | length > 0) %}

# 802.1X Port Security

## 802.1X Summary
{%     if dot1x is arista.avd.defined() %}

### 802.1X Global

| System Auth Control | Protocol LLDP Bypass | Dynamic Authorization |
| ------------------- | -------------------- | ----------------------|
{%         set system_auth_control = dot1x.system_auth_control | arista.avd.default('-') %}
{%         set protocol_lldp_bypass = dot1x.protocol_lldp_bypass | arista.avd.default('-') %}
{%         set dynamic_authorization = dot1x.dynamic_authorization | arista.avd.default('-') %}
| {{ system_auth_control }} | {{ protocol_lldp_bypass }} | {{ dynamic_authorization }} |
{%     endif %}
{%     if ethernet_interfaces_dot1x | length > 0 %}

### 802.1X Interfaces

| Interface | PAE Mode | State | Phone Force Authorized | Reauthentication | Auth Failure Action | Host Mode | Mac Based Auth |
| --------- | -------- | ------| ---------------------- | ---------------- | ------------------- | --------- | -------------- |
{%         for ethernet_interface in ethernet_interfaces_dot1x %}
{%             set pae_mode = ethernet_interface.dot1x.pae.mode | arista.avd.default('-') %}
{%             set auth_failure_action = ethernet_interface.dot1x.authentication_failure.action | arista.avd.default('-') %}
{%             if auth_failure_action == 'allow' and
                  ethernet_interface.dot1x.authentication_failure.allow_vlan is arista.avd.defined %}
{%                 set auth_failure_action = auth_failure_action ~ " vlan " ~ ethernet_interface.dot1x.authentication_failure.allow_vlan %}
{%             endif %}
{%             set state = ethernet_interface.dot1x.port_control | arista.avd.default('-') %}
{%             set phone_state = ethernet_interface.dot1x.port_control_force_authorized_phone | arista.avd.default('-') %}
{%             set reauthentication = ethernet_interface.dot1x.reauthentication | arista.avd.default('-') %}
{%             set host_mode = ethernet_interface.dot1x.host_mode.mode | arista.avd.default('-') %}
{%             set mac_based_authentication_enabled = ethernet_interface.dot1x.mac_based_authentication.enabled | arista.avd.default('-') %}
| {{ ethernet_interface.name }} | {{ pae_mode }} | {{ state }} | {{ phone_state }} | {{ reauthentication }} | {{ auth_failure_action }} | {{ host_mode }} | {{ mac_based_authentication_enabled }} |
{%         endfor %}
{%     endif %}
{% endif %}

# ACL
{% if standard_access_lists is arista.avd.defined %}

## Standard Access-lists

### Standard Access-lists Summary

{%     for standard_access_list in standard_access_lists | arista.avd.natural_sort('name') %}
#### {{ standard_access_list.name }}
{%         if standard_access_list.counters_per_entry is arista.avd.defined(true) %}

ACL has counting mode `counters per-entry` enabled!
{%         endif %}

| Sequence | Action |
| -------- | ------ |
{%         for sequence in standard_access_list.sequence_numbers | arista.avd.natural_sort('sequence') %}
| {{ sequence.sequence }} | {{ sequence.action }} |
{%         endfor %}

{%     endfor %}
### Standard Access-lists Device Configuration

```eos
{%     include 'eos/standard-access-lists.j2' %}
```
{% endif %}
{% if access_lists is arista.avd.defined %}

## Extended Access-lists

### Extended Access-lists Summary

{%     for access_list in access_lists | arista.avd.natural_sort('name') %}
#### {{ access_list.name }}
{%         if access_list.counters_per_entry is arista.avd.defined(true) %}

ACL has counting mode `counters per-entry` enabled!
{%         endif %}

| Sequence | Action |
| -------- | ------ |
{%         for sequence in access_list.sequence_numbers | arista.avd.natural_sort('sequence') %}
| {{ sequence.sequence }} | {{ sequence.action }} |
{%         endfor %}

{%     endfor %}
### Extended Access-lists Device Configuration

```eos
{%     include 'eos/access-lists.j2' %}
```
{% endif %}
{% if ip_access_lists is arista.avd.defined %}

## IP Access-lists
{%     if ip_access_lists_max_entries is arista.avd.defined %}

### IP Access-lists Summary

- The maximum number of ACL entries allowed to be provisioned per switch: {{ ip_access_lists_max_entries }}
{%     endif %}

### IP Access-lists Configuration

```eos
{%     include 'eos/ip-access-lists.j2' %}
```
{% endif %}
{% if ipv6_standard_access_lists is arista.avd.defined %}

## IPv6 Standard Access-lists

### IPv6 Standard Access-lists Summary

{%     for ipv6_standard_access_list in ipv6_standard_access_lists | arista.avd.natural_sort('name') %}
#### {{ ipv6_standard_access_list.name }}
{%         if ipv6_standard_access_list.counters_per_entry is arista.avd.defined(true) %}

ACL has counting mode `counters per-entry` enabled!
{%         endif %}

| Sequence | Action |
| -------- | ------ |
{%         for sequence in ipv6_standard_access_list.sequence_numbers | arista.avd.natural_sort('sequence') %}
| {{ sequence.sequence }} | {{ sequence.action }} |
{%         endfor %}

{%     endfor %}
### IPv6 Standard Access-lists Device Configuration

```eos
{%     include 'eos/ipv6-standard-access-lists.j2' %}
```
{% endif %}
{% if ipv6_access_lists is arista.avd.defined %}

## IPv6 Extended Access-lists

### IPv6 Extended Access-lists Summary

{%     for ipv6_access_list in ipv6_access_lists | arista.avd.natural_sort('name') %}
#### {{ ipv6_access_list.name }}
{%         if ipv6_access_list.counters_per_entry is arista.avd.defined(true) %}

ACL has counting mode `counters per-entry` enabled!
{%         endif %}

| Sequence | Action |
| -------- | ------ |
{%         for sequence in ipv6_access_list.sequence_numbers | arista.avd.natural_sort('sequence') %}
| {{ sequence.sequence }} | {{ sequence.action }} |
{%         endfor %}

{%     endfor %}
### IPv6 Extended Access-lists Device Configuration

```eos
{%     include 'eos/ipv6-access-lists.j2' %}
```
{% endif %}
{% if mac_access_lists is arista.avd.defined %}

## MAC Access-lists

### MAC Access-lists Summary
{%     for mac_access_list in mac_access_lists | arista.avd.natural_sort('name') %}
{%         if mac_access_list.name is arista.avd.defined and mac_access_list.entries is arista.avd.defined %}

#### {{ mac_access_list.name }}
{%             if mac_access_list.counters_per_entry is arista.avd.defined(true) %}

- ACL has counting mode `counters per-entry` enabled!
{%             endif %}

| Sequence | Action |
| -------- | ------ |
{%             for acl_entry in mac_access_list.entries %}
| {{ acl_entry.sequence | arista.avd.default('-') }} | {{ acl_entry.action }} |
{%             endfor %}
{%         endif %}
{%     endfor %}

### MAC Access-lists Device Configuration

```eos
{%     include 'eos/mac-access-lists.j2' %}
```
{% endif %}
{% if vrfs is arista.avd.defined %}

# VRF Instances

## VRF Instances Summary

| VRF Name | IP Routing |
| -------- | ---------- |
{%     for vrf in vrfs | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
{%         if vrf.ip_routing is arista.avd.defined(true) %}
{%             set ip_routing = 'enabled' %}
{%         else %}
{%             set ip_routing = 'disabled' %}
{%         endif %}
| {{ vrf.name }} | {{ ip_routing }} |
{%     endfor %}

## VRF Instances Device Configuration

```eos
{%     include 'eos/vrf-instances.j2' %}
```
{% endif %}
{% if virtual_source_nat_vrfs is arista.avd.defined %}

# Virtual Source NAT

## Virtual Source NAT Summary

| Source NAT VRF | Source NAT IP Address |
| -------------- | --------------------- |
{%     for vrf in virtual_source_nat_vrfs | arista.avd.natural_sort('name') %}
| {{ vrf.name }} | {{ vrf.ip_address }} |
{%     endfor %}

## Virtual Source NAT Configuration

```eos
{%     include 'eos/virtual-source-nat.j2' %}
```
{% endif %}
{% if platform is arista.avd.defined %}

# Platform
{%     if platform.trident is arista.avd.defined or platform.sand is arista.avd.defined %}

## Platform Summary
{%         if platform.trident is arista.avd.defined %}

### Platform Trident Summary

| Settings | Value |
| -------- | ----- |
{%             for tridentsetting in platform.trident | arista.avd.natural_sort %}
| {{ tridentsetting }} | {{ platform.trident[tridentsetting] }} |
{%             endfor %}
{%         endif %}
{%         if platform.sand is arista.avd.defined %}

### Platform Sand Summary

| Settings | Value |
| -------- | ----- |
{%             if platform.sand.forwarding_mode is arista.avd.defined %}
| Forwarding Mode | {{ platform.sand.forwarding_mode }} |
{%             endif %}
{%             if platform.sand.lag.hardware_only is arista.avd.defined %}
| Hardware Only Lag | {{ platform.sand.lag.hardware_only }} |
{%             endif %}
{%             if platform.sand.lag.mode is arista.avd.defined %}
| Lag Mode | {{ platform.sand.lag.mode }} |
{%             endif %}
{%             if platform.sand.multicast_replication.default is arista.avd.defined %}
| Default Multicast Replication | {{ platform.sand.multicast_replication.default }} |
{%             endif %}
{%             if platform.sand.qos_maps is arista.avd.defined %}

#### Internal Network QOS Mapping

| Traffic Class | To Network QOS |
| ------------- | -------------- |
{%                 for qos_map in platform.sand.qos_maps | arista.avd.natural_sort('traffic_class') %}
{%                     if qos_map.traffic_class is arista.avd.defined and qos_map.to_network_qos is arista.avd.defined %}
| {{ qos_map.traffic_class }} | {{ qos_map.to_network_qos }} |
{%                     endif %}
{%                 endfor %}
{%             endif %}
{%         endif %}
{%     endif %}

## Platform Configuration

```eos
{%     include 'eos/platform.j2' %}
```
{% endif %}
{% if router_l2_vpn is arista.avd.defined %}

# Router L2 VPN

## Router L2 VPN Summary
{%     if router_l2_vpn.nd_rs_flooding_disabled is arista.avd.defined(true) %}

   Neighbor discovery router solicitation VTEP flooding is disabled.
{%     endif %}
{%     if router_l2_vpn.virtual_router_nd_ra_flooding_disabled is arista.avd.defined(true) %}

   Virtual router neighbor advertisement VTEP flooding is disabled.
{%     endif %}
{%     if router_l2_vpn.arp_selective_install is arista.avd.defined(true) %}

   Selective ARP is enabled.
{%     endif %}
{%     if router_l2_vpn.arp_proxy.prefix_list is arista.avd.defined %}

   VXLAN ARP Proxying is disabled for IPv4 addresses defined in the prefix-list {{ router_l2_vpn.arp_proxy.prefix_list }}.
{%     endif %}

## Router L2 VPN Device Configuration

```eos
{%     include 'eos/router-l2-vpn.j2' %}
```
{% endif %}
{% if ip_dhcp_relay is defined and ip_dhcp_relay is not none %}

# IP DHCP Relay

## IP DHCP Relay
{%     if ip_dhcp_relay.information_option is defined and ip_dhcp_relay.information_option == true %}

IP DHCP Relay Option 82 is enabled.
{%     endif %}

## IP DHCP Relay Configuration

```eos
{%     include 'eos/ip-dhcp-relay.j2' %}
```
{% endif %}
{# eos - Errdisable #}
{% if errdisable is defined and errdisable is not none %}

# Errdisable

{%     if errdisable.recovery is defined %}
{%         if errdisable.detect.causes is defined %}
|  Detect Cause | Enabled |
| ------------- | ------- |
{%             for cause in errdisable.detect.causes | arista.avd.natural_sort %}
{%                 if cause == 'acl' %}
| {{ cause }} | True |
{%                 elif cause == 'arp-inspection' %}
| {{ cause }} | True |
{%                 elif cause == 'dot1x' %}
| {{ cause }} | True |
{%                 elif cause == 'link-change' %}
| {{ cause }} | True |
{%                 elif cause == 'tapagg' %}
| {{ cause }} | True |
{%                 elif cause == 'xcvr-misconfigured' %}
| {{ cause }} | True |
{%                 elif cause == 'xcvr-overheat' %}
| {{ cause }} | True |
{%                 elif cause == 'xcvr-power-unsupported' %}
| {{ cause }} | True |
{%                 endif %}
{%             endfor %}
{%         endif %}

{%         if errdisable.recovery.interval is defined and errdisable.recovery.interval is not none  %}
{%         endif %}
{%         if errdisable.recovery.causes is defined %}
|  Detect Cause | Enabled | Interval |
| ------------- | ------- | -------- |
{%             for cause in errdisable.recovery.causes | arista.avd.natural_sort %}
{%                 if cause == 'arp-inspection' %}
| {{ cause }} | True | {{ errdisable.recovery.interval }} |
{%                 elif cause == 'bpduguard' %}
| {{ cause }} | True | {{ errdisable.recovery.interval }} |
{%                 elif cause == 'dot1x' %}
| {{ cause }} | True | {{ errdisable.recovery.interval }} |
{%                 elif cause == 'hitless-reload-down' %}
| {{ cause }} | True | {{ errdisable.recovery.interval }} |
{%                 elif cause == 'lacp-rate-limit' %}
| {{ cause }} | True | {{ errdisable.recovery.interval }} |
{%                 elif cause == 'link-flap' %}
| {{ cause }} | True | {{ errdisable.recovery.interval }} |
{%                 elif cause == 'no-internal-vlan' %}
| {{ cause }} | True | {{ errdisable.recovery.interval }} |
{%                 elif cause == 'portchannelguard' %}
| {{ cause }} | True | {{ errdisable.recovery.interval }} |
{%                 elif cause == 'portsec' %}
| {{ cause }} | True | {{ errdisable.recovery.interval }} |
{%                 elif cause == 'speed-misconfigured' %}
| {{ cause }} | True | {{ errdisable.recovery.interval }} |
{%                 elif cause == 'tapagg' %}
| {{ cause }} | True | {{ errdisable.recovery.interval }} |
{%                 elif cause == 'uplink-failure-detection' %}
| {{ cause }} | True | {{ errdisable.recovery.interval }} |
{%                 elif cause == 'xcvr-misconfigured' %}
| {{ cause }} | True | {{ errdisable.recovery.interval }} |
{%                 elif cause == 'xcvr-overheat' %}
| {{ cause }} | True | {{ errdisable.recovery.interval }} |
{%                 elif cause == 'xcvr-power-unsupported' %}
| {{ cause }} | True | {{ errdisable.recovery.interval }} |
{%                 elif cause == 'xcvr-unsupported' %}
| {{ cause }} | True | {{ errdisable.recovery.interval }} |
{%                 endif %}
{%             endfor %}
{%         endif %}
{%     endif %}

```eos
{%     include 'eos/errdisable.j2' %}
```
{% endif %}
{% if mac_security is arista.avd.defined %}

# MACsec

## MACsec Summary

{%     if mac_security.license is arista.avd.defined %}
License is installed.
{%     else %}
License is not installed.
{%     endif %}

{%     if mac_security.fips_restrictions is arista.avd.defined(true) %}
FIPS restrictions enabled.
{%     endif %}

### MACsec Profiles Summary
{%     if mac_security.profiles is arista.avd.defined %}
{%         for profile in mac_security.profiles | arista.avd.natural_sort('name') %}

**Profile {{ profile.name }}:**

Settings:

| Cipher | Rekey-Period | SCI |
| ------ | ------------ | --- |
{%             set cipher = profile.cipher | arista.avd.default('-') %}
{%             set rekey_period = profile.mka.session.rekey_period | arista.avd.default('-') %}
{%             set sci = profile.sci | arista.avd.default('-') %}
| {{ cipher }} | {{ rekey_period }} | {{ sci }} |

Keys:

{%             if profile.connection_keys is arista.avd.defined %}
| Key ID | Encrypted (Type 7) Key | Fallback |
| ------ | ---------------------- | -------- |
{%                 for connection_key in profile.connection_keys | arista.avd.natural_sort('id') %}
{%                     if connection_key.encrypted_key is arista.avd.defined %}
{%                         set encrypted_key = connection_key.encrypted_key %}
{%                         set fallback = connection_key.fallback | arista.avd.default('-') %}
| {{ connection_key.id }} | {{ encrypted_key }} | {{ fallback }} |
{%                     endif %}
{%                 endfor %}
{%             endif %}
{%         endfor %}
{%     endif %}

## MACsec Device Configuration

```eos
{%     include 'eos/mac-security.j2' %}
```
{% endif %}
{% if traffic_policies is arista.avd.defined %}

## Traffic Policies information
{%     if traffic_policies.field_sets is arista.avd.defined %}

**IPv4 Field sets**

{%         if traffic_policies.field_sets.ipv4 is arista.avd.defined %}
| Field Set Name | Values |
| -------------- | ------ |
{%             for field_set_ipv4 in traffic_policies.field_sets.ipv4 | arista.avd.convert_dicts('name','prefixes') %}
{%                 if field_set_ipv4 | length > 1 %}
{%                     set value = field_set_ipv4.prefixes | join('<br/>') %}
{%                 else %}
{%                     set value = field_set_ipv4[0].prefixes %}
{%                 endif %}
| {{ field_set_ipv4.name }} | {{ value }} |
{%             endfor %}
{%         else %}
No IPv4 field-set configured.
{%         endif %}

**IPv6 Field sets**

{%         if traffic_policies.field_sets.ipv6 is arista.avd.defined %}
| Field Set Name | Values |
| -------------- | ------ |
{%             for field_set_ipv6 in traffic_policies.field_sets.ipv6 | arista.avd.convert_dicts('name','prefixes') %}
{%                 if field_set_ipv6 | length > 1 %}
{%                     set value = field_set_ipv6.prefixes | join('<br/>') %}
{%                 else %}
{%                     set value = field_set_ipv6[0].prefixes %}
{%                 endif %}
| {{ field_set_ipv6.name }} | {{ value }} |
{%             endfor %}
{%         else %}
No IPv6 field-set configured.
{%         endif %}

**L4 Port Field sets**

{%         if traffic_policies.field_sets.ports is arista.avd.defined %}
| Field Set Name | Values |
| -------------- | ------ |
{%             for field_set_port in traffic_policies.field_sets.ports | arista.avd.convert_dicts('name','port_range') %}
| {{ field_set_port.name }} | {{ field_set_port.port_range }}|
{%             endfor %}
{%         else %}
No L4 Port field-set configured.
{%         endif %}
{%     else %}
No Field-set configured on device.
{%     endif %}
{%     if traffic_policies.policies is arista.avd.defined %}

### Traffic Policies
{%         for policy in traffic_policies.policies | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}

**{{ policy.name }}:**

{%             if policy.matches is arista.avd.defined %}
| Match set | Type | Sources | Destinations | Protocol | Source Port(s) | Destination port(s) | Action |
| --------- | ---- | ------- | ------------ | -------- | -------------- | ------------------- | ------ |
{%                 for match in policy.matches | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
{%                     set row = namespace() %}
{%                     set row.match_set = match.name %}
{%                     set row.type = match.type | lower %}
{#                     -- Source Prefix #}
{%                     set row.src_net = "" %}
{%                     if match.source.prefix_lists is arista.avd.defined %}
{%                         set row.src_net = match.source.prefix_lists | join('<br/>') %}
{%                     elif match.source.prefixes is arista.avd.defined %}
{%                         set row.src_net = match.source.prefixes | join('<br/>') %}
{%                     else %}
{%                         set row.src_net = "ANY" %}
{%                     endif %}
{#                     -- Destination Prefix #}
{%                     set row.dst_net = "" %}
{%                     if match.destination.prefix_lists is arista.avd.defined %}
{%                         set row.dst_net = match.destination.prefix_lists | join('<br/>') %}
{%                     elif match.destination.prefixes is arista.avd.defined %}
{%                         set row.dst_net = match.destination.prefixes | join('<br/>') %}
{%                     else %}
{%                         set row.dst_net = "ANY" %}
{%                     endif %}
{#                     -- Protocol #}
{%                     set row.protocols = "" %}
{%                     if match.protocols is arista.avd.defined %}
{%                         set row.protocols = match.protocols | arista.avd.convert_dicts('protocol') | map(attribute='protocol') | join('<br/>') %}
{%                     else %}
{%                         set row.protocols = "ANY" %}
{%                     endif %}
{#                     -- Source Port #}
{%                     set row.src_port = "" %}
{%                     if match.protocols is arista.avd.defined %}
{%                         for protocol in match.protocols | arista.avd.convert_dicts('protocol') %}
{%                             if protocol.src_field is arista.avd.defined %}
{%                                 set row.src_port = protocol.src_field %}
{%                             elif protocol.src_port is arista.avd.defined %}
{%                                 set row.src_port = protocol.src_port %}
{%                             endif %}
{%                         endfor %}
{%                         if row.src_port == "" %}
{%                             set row.src_port = "ANY" %}
{%                         endif %}
{%                     endif %}
{#                     -- Destination Port #}
{%                     set row.dst_port = "" %}
{%                     if match.protocols is arista.avd.defined %}
{%                         for protocol in match.protocols | arista.avd.convert_dicts('protocol') %}
{%                             if protocol.dst_field is arista.avd.defined %}
{%                                 set row.dst_port = protocol.dst_field %}
{%                             elif protocol.dst_port is arista.avd.defined %}
{%                                 set row.dst_port = protocol.dst_port %}
{%                             endif %}
{%                         endfor %}
{%                         if row.dst_port == "" %}
{%                             set row.dst_port = "ANY" %}
{%                         endif %}
{%                     endif %}
{#                     -- Action management #}
{%                     set row.actions = [] %}
{%                     if match.actions is arista.avd.defined %}
{%                         if match.actions.drop is arista.avd.defined(true) %}
{%                             do row.actions.append("action: DROP") %}
{%                         else %}
{%                             do row.actions.append("action: PASS") %}
{%                         endif %}
{%                         if match.actions.count is arista.avd.defined() %}
{%                             do row.actions.append("counter: " + match.actions.count) %}
{%                         endif %}
{%                         if match.actions.log is arista.avd.defined(true) %}
{%                             do row.actions.append("logging") %}
{%                         endif %}
{%                         if match.actions.dscp is arista.avd.defined() %}
{%                             do row.actions.append("dscp marking: " + match.actions.dscp | string) %}
{%                         endif %}
{%                         if match.actions.traffic_class is arista.avd.defined() %}
{%                             do row.actions.append("traffic-class: " + match.actions.traffic_class | string) %}
{%                         endif %}
{%                     else %}
{%                         do row.actions.append("default action: PASS") %}
{%                     endif %}
{# -- Table rendering #}
| {{ row.match_set }} | {{ row.type }} | {{ row.src_net }} | {{ row.dst_net }} | {{ row.protocols }} | {{ row.src_port }} | {{ row.dst_port }} | {{ row.actions | join('<br/>') }} |
{%                 endfor %}
{%             else %}
No Match condition configured.
{%             endif %}

{%         endfor %}
{%     endif %}
{# Traffic-Policy Interfaces #}
{%     set traffic_policy_interfaces = [] %}
{%     for ethernet_interface in ethernet_interfaces | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
{%         if ethernet_interface.traffic_policy.input is arista.avd.defined or ethernet_interface.traffic_policy.output is arista.avd.defined %}
{%             do traffic_policy_interfaces.append(ethernet_interface) %}
{%         endif %}
{%     endfor %}
{%     for port_channel_interface in port_channel_interfaces | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
{%         if port_channel_interface.traffic_policy.input is arista.avd.defined or port_channel_interface.traffic_policy.output is arista.avd.defined %}
{%             do traffic_policy_interfaces.append(port_channel_interface) %}
{%         endif %}
{%     endfor %}
{%     if traffic_policy_interfaces | length > 0 %}

#### Traffic-Policy Interfaces

| Interface | Input Traffic-Policy | Output Traffic-Policy |
| --------- | -------------------- | --------------------- |
{%         for interface in traffic_policy_interfaces %}
{%             set row_in_policy = interface.traffic_policy.input | arista.avd.default("-") %}
{%             set row_out_policy = interface.traffic_policy.output | arista.avd.default("-") %}
| {{ interface.name }} | {{ row_in_policy }} | {{ row_out_policy }} |
{%         endfor %}

{%     endif %}
### Traffic Policies Device Configuration

```eos
{%     include 'eos/traffic-policies.j2' %}
```
{% endif %}

# Quality Of Service
{% if qos is defined %}

## QOS

### QOS Summary

{%     if qos.rewrite_dscp is defined and qos.rewrite_dscp == true %}
QOS rewrite DSCP: **enabled**
{%     else %}
QOS rewrite DSCP: **disabled**
{%     endif %}

{%     if qos.map is defined and qos is not none %}
#### QOS Mappings

{%         if qos.map.cos is defined and qos.map.cos is not none %}

| COS to Traffic Class mappings |
| ----------------------------- |
{%             for cos_map in qos.map.cos | arista.avd.natural_sort %}
| {{ cos_map | default('-') }} |
{%             endfor %}
{%         endif %}

{%         if qos.map.dscp is defined and qos.map.dscp is not none %}

| DSCP to Traffic Class mappings |
| ------------------------------ |
{%             for dscp_map in qos.map.dscp | arista.avd.natural_sort %}
| {{ dscp_map | default('-') }} |
{%             endfor %}
{%         endif %}

{%         if qos.map.traffic_class is defined and qos.map.traffic_class is not none %}

| Traffic Class to DSCP or COS mappings |
| ------------------------------------- |
{%             for tc_map in qos.map.traffic_class | arista.avd.natural_sort %}
| {{ tc_map | default('-') }} |
{%             endfor %}
{%         endif %}
{%     endif %}

### QOS Device Configuration

```eos
{%     include 'eos/qos.j2' %}
```
{% endif %}
{% if class_maps.qos is arista.avd.defined %}

## QOS Class Maps

### QOS Class Maps Summary

| Name | Field | Value |
| ---- | ----- | ----- |
{%     for class_map in class_maps.qos | arista.avd.natural_sort('name') %}
{%         set row = namespace() %}
{%         if class_map.cos is arista.avd.defined %}
{%             set row.type = 'cos' %}
{%             set row.value = class_map.cos %}
{%         elif class_map.vlan is arista.avd.defined %}
{%             set row.type = 'vlan' %}
{%             set row.value = class_map.vlan %}
{%         elif class_map.ip.access_group is arista.avd.defined %}
{%             set row.type = 'acl' %}
{%             set row.value = class_map.ip.access_group %}
{%         else %}
{%             set row.type = '-' %}
{%             set row.value = '-' %}
{%         endif %}
| {{ class_map.name }} | {{ row.type }} | {{ row.value }} |
{%     endfor %}

### Class-maps Device Configuration

```eos
{%     include 'eos/class-maps-qos.j2' %}
```
{% endif %}
{% if policy_maps.qos is arista.avd.defined %}

## QOS Policy Maps

### QOS Policy Maps Summary
{%     for policy_map in policy_maps.qos | arista.avd.natural_sort('name') %}

**{{ policy_map.name }}**

| class | Set | Value |
| ----- | --- | ----- |
{%         for class in policy_map.classes | arista.avd.default([]) %}
{%             for set in class.set | arista.avd.default([]) %}
| {{ class.name }} | {{ set }} | {{ class.set[set] }} |
{%             endfor %}
{%         endfor %}
{%     endfor %}

### QOS Policy Maps configuration

```eos
{%     include 'eos/policy-maps-qos.j2' %}
```
{% endif %}
{% if qos_profiles is arista.avd.defined %}

## QOS Profiles

### QOS Profiles Summary

{%     for profile in qos_profiles | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}

QOS Profile: **{{ profile.name }}**

**Settings**

| Default COS | Default DSCP | Trust | Shape Rate | QOS Service Policy |
| ----------- | ------------ | ----- | ---------- | ------------------ |
{%         set cos = profile.cos | arista.avd.default('-') %}
{%         set dscp = profile.dscp | arista.avd.default('-') %}
{%         set trust = profile.trust | arista.avd.default('-') %}
{%         set shape_rate = profile.shape.rate | arista.avd.default('-') %}
{%         set qos_sp = profile.service_policy.type.qos_input | arista.avd.default('-') %}
| {{ cos }} | {{ dscp }} | {{ trust }} | {{ shape_rate }} | {{ qos_sp }} |
{%         if profile.tx_queues is arista.avd.defined or
              profile.uc_tx_queues is arista.avd.defined or
              profile.mc_tx_queues is arista.avd.defined %}

**TX Queues**

| TX queue | Type | Bandwidth | Priority | Shape Rate |
| -------- | ---- | --------- | -------- | ---------- |
{%             if profile.tx_queues is arista.avd.defined %}
{%                 for tx_queue in profile.tx_queues | arista.avd.convert_dicts('id') | arista.avd.natural_sort('id') %}
{%                     set type = "All" %}
{%                     set bw_percent = tx_queue.bandwidth_percent | arista.avd.default(
                                        tx_queue.bandwidth_guaranteed_percent,
                                    '-') %}
{%                     set priority = tx_queue.priority | arista.avd.default('-') %}
{%                     set shape_rate = tx_queue.shape.rate | arista.avd.default('-') %}
| {{ tx_queue.id }} | {{ type }} | {{ bw_percent }} | {{ priority }} | {{ shape_rate }} |
{%                 endfor %}
{%             endif %}
{%             if profile.uc_tx_queues is arista.avd.defined %}
{%                 for uc_tx_queue in profile.uc_tx_queues | arista.avd.convert_dicts('id') | arista.avd.natural_sort('id') %}
{%                     set type = "Unicast" %}
{%                     set bw_percent = uc_tx_queue.bandwidth_percent | arista.avd.default(
                                        uc_tx_queue.bandwidth_guaranteed_percent,
                                        '-') %}
{%                     set priority = uc_tx_queue.priority | arista.avd.default('-') %}
{%                     set shape_rate = uc_tx_queue.shape.rate | arista.avd.default('-') %}
| {{ uc_tx_queue.id }} | {{ type }} | {{ bw_percent }} | {{ priority }} | {{ shape_rate }} |
{%                 endfor %}
{%             endif %}
{%             if profile.mc_tx_queues is arista.avd.defined %}
{%                 for mc_tx_queue in profile.mc_tx_queues | arista.avd.convert_dicts('id') | arista.avd.natural_sort('id') %}
{%                     set type = "Multicast" %}
{%                     set bw_percent = mc_tx_queue.bandwidth_percent | arista.avd.default(
                                        mc_tx_queue.bandwidth_guaranteed_percent,
                                        '-') %}
{%                     set priority = mc_tx_queue.priority | arista.avd.default('-') %}
{%                     set shape_rate = mc_tx_queue.shape.rate | arista.avd.default('-') %}
| {{ mc_tx_queue.id }} | {{ type }} | {{ bw_percent }} | {{ priority }} | {{ shape_rate }} |
{%                 endfor %}
{%             endif %}
{%         endif %}
{%     endfor %}

### QOS Profile Device Configuration

```eos
{%     include 'eos/qos-profiles.j2' %}
```
{% endif %}
{# QOS Interfaces #}
{% set ethernet_interfaces_qos = [] %}
{% set port_channel_interfaces_qos = [] %}
{% for ethernet_interface in ethernet_interfaces | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
{%     if ethernet_interface.shape is arista.avd.defined or
          ethernet_interface.qos is arista.avd.defined %}
{%         do ethernet_interfaces_qos.append(ethernet_interface) %}
{%     endif %}
{% endfor %}
{% for port_channel_interface in port_channel_interfaces | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
{%     if port_channel_interface.shape is arista.avd.defined or
          port_channel_interface.qos is arista.avd.defined %}
{%         do port_channel_interfaces_qos.append(port_channel_interface) %}
{%     endif %}
{% endfor %}
{% if ethernet_interfaces_qos | length > 0 or port_channel_interfaces_qos | length > 0 %}

### QOS Interfaces

| Interface | Trust | Default DSCP | Default COS | Shape rate |
| --------- | ----- | ------------ | ----------- | ---------- |
{%     for ethernet_interface in ethernet_interfaces_qos %}
{%         set qos_trust = ethernet_interface.qos.trust | arista.avd.default('-') %}
{%         set qos_dscp = ethernet_interface.qos.dscp | arista.avd.default('-') %}
{%         set qos_cos = ethernet_interface.qos.cos | arista.avd.default('-') %}
{%         set shape_rate = ethernet_interface.shape.rate | arista.avd.default('-') %}
| {{ ethernet_interface.name }} | {{ qos_trust }} | {{ qos_dscp }} | {{ qos_cos }} | {{ shape_rate }} |
{%     endfor %}
{%     for port_channel_interface in port_channel_interfaces_qos %}
{%         set qos_trust = port_channel_interface.qos.trust | arista.avd.default('-') %}
{%         set qos_dscp = port_channel_interface.qos.dscp | arista.avd.default('-') %}
{%         set qos_cos = port_channel_interface.qos.cos | arista.avd.default('-') %}
{%         set shape_rate = port_channel_interface.shape.rate | arista.avd.default('-') %}
| {{ port_channel_interface.name }} | {{ qos_trust }} | {{ qos_dscp }} | {{ qos_cos }} | {{ shape_rate }} |
{%     endfor %}
{% endif %}
{% if bgp_groups is arista.avd.defined or
      interface_groups is arista.avd.defined or
      maintenance is arista.avd.defined %}

# Maintenance Mode
{## BGP Groups #}
{%     include 'documentation/bgp-groups.j2' %}
{## Interface Groups #}
{%     include 'documentation/interface-groups.j2' %}
{## Maintenance #}
{%     include 'documentation/maintenance.j2' %}
{% endif %}
{% if eos_cli is arista.avd.defined %}

# EOS CLI

```eos
{%     include 'eos/eos-cli.j2' %}
```
{% endif %}
{% if custom_templates is defined and custom_templates is not none %}

# Custom Templates

{%     for custom_template in custom_templates %}
## Configuration Generated by `{{ custom_template }}`
```eos
{%         include custom_template %}
```
{%     endfor %}
{% endif %}
