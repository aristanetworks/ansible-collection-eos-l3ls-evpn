type: dict
allow_other_keys: true
keys:
  access_lists:
    type: list
    primary_key: name
    convert_types:
    - dict
    display_name: IP Extended Access-Lists (legacy model)
    description: 'AVD currently supports 2 different data models for extended ACLs:


      - The legacy `access_lists` data model, for compatibility with existing deployments

      - The improved `ip_access_lists` data model, for access to more EOS features


      Both data models can coexists without conflicts, as different keys are used:
      `access_lists` vs `ip_access_lists`.

      Access list names must be unique.


      The legacy data model supports simplified ACL definition with `sequence` to
      `action` mapping:

      '
    items:
      type: dict
      keys:
        name:
          type: str
          required: true
          display_name: Access-list Name
        counters_per_entry:
          type: bool
        sequence_numbers:
          type: list
          required: true
          primary_key: sequence
          convert_types:
          - dict
          items:
            type: dict
            keys:
              sequence:
                type: int
                required: true
                display_name: Sequence ID
                convert_types:
                - str
              action:
                type: str
                required: true
                description: 'Action as string

                  Example: "deny ip any any"'
  community_lists:
    type: list
    primary_key: name
    convert_types:
    - dict
    display_name: Community Lists (legacy model)
    description: 'AVD supports 2 different data models for community lists:


      - The legacy `community_lists` data model that can be used for compatibility
      with the existing deployments.

      - The improved `ip_community_lists` data model.


      Both data models can coexist without conflicts, as different keys are used:
      `community_lists` vs `ip_community_lists`.

      Community list names must be unique.


      The legacy data model supports simplified community list definition that only
      allows a single action to be defined as string:

      '
    items:
      type: dict
      keys:
        name:
          type: str
          required: true
          display_name: Community-list Name
        action:
          type: str
          required: true
          description: 'Action as string

            Example: "permit GSHUT 65123:123"'
  interface_profiles:
    type: list
    primary_key: name
    convert_types:
    - dict
    items:
      type: dict
      keys:
        name:
          type: str
          required: true
          display_name: Interface-Profile Name
        commands:
          type: list
          required: true
          items:
            type: str
            description: 'EOS CLI interface command

              Example: "switchport mode access"'
  ip_community_lists:
    type: list
    secondary_key: entries
    primary_key: name
    convert_types:
    - dict
    display_name: IP Community Lists
    description: "AVD supports 2 different data models for community lists:\n\n- The
      legacy `community_lists` data model that can be used for compatibility with
      the existing deployments.\n- The improved `ip_community_lists` data model.\n\nBoth
      data models can coexist without conflicts, as different keys are used: `community_lists`
      vs `ip_community_lists`.\nCommunity list names must be unique.\n\nThe improved
      data model has a better design documented below:\n\ncommunities and regexp MUST
      not be configured together in the same entry\npossible community strings are
      (case insensitive):\n - GSHUT\n - internet\n - local-as\n - no-advertise\n -
      no-export\n - <1-4294967040>\n - aa:nn\n"
    items:
      type: dict
      keys:
        name:
          type: str
          required: true
          display_name: IP Community-list Name
        entries:
          type: list
          required: true
          items:
            type: dict
            keys:
              action:
                type: str
                required: true
                valid_values:
                - permit
                - deny
              communities:
                type: list
                items:
                  type: str
                description: If defined, a standard community-list will be configured
              regexp:
                type: str
                display_name: Regular Expression
                description: If defined, a regex community-list will be configured
  ip_domain_lookup:
    type: dict
    display_name: Domain Lookup
    keys:
      source_interfaces:
        type: list
        primary_key: name
        convert_types:
        - dict
        items:
          type: dict
          keys:
            name:
              type: str
              required: true
              description: 'Source Interface

                '
            vrf:
              type: str
              display_name: VRF
  ip_extcommunity_lists_regexp:
    type: list
    primary_key: name
    secondary_key: entries
    convert_types:
    - dict
    display_name: IP Extended Community Lists RegExp
    items:
      type: dict
      keys:
        name:
          type: str
          required: true
          display_name: Community-list Name
        entries:
          type: list
          required: true
          items:
            type: dict
            keys:
              type:
                type: str
                required: true
                valid_values:
                - permit
                - deny
              regexp:
                type: str
                required: true
                description: Regular Expression
  ipv6_access_lists:
    type: list
    primary_key: name
    convert_types:
    - dict
    display_name: IPv6 Extended Access-Lists
    items:
      type: dict
      keys:
        name:
          type: str
          required: true
          display_name: IPv6 Access-list Name
        counters_per_entry:
          type: bool
        sequence_numbers:
          type: list
          required: true
          primary_key: sequence
          convert_types:
          - dict
          items:
            type: dict
            keys:
              sequence:
                type: int
                required: true
                display_name: Sequence ID
                convert_types:
                - str
              action:
                type: str
                required: true
                description: 'Action as string

                  Example: "deny ipv6 any any"'
  ipv6_prefix_lists:
    type: list
    primary_key: name
    convert_types:
    - dict
    display_name: IPv6 Prefix Lists
    items:
      type: dict
      keys:
        name:
          type: str
          required: true
          display_name: Prefix-list Name
        sequence_numbers:
          type: list
          required: true
          primary_key: sequence
          convert_types:
          - dict
          items:
            type: dict
            keys:
              sequence:
                type: int
                required: true
                display_name: Sequence ID
                convert_types:
                - str
              action:
                type: str
                required: true
                description: 'Action as string

                  Example: "permit 1b11:3a00:22b0:0082::/64 eq 128"'
  match_list_input:
    type: dict
    display_name: Match Lists
    keys:
      string:
        type: list
        primary_key: name
        convert_types:
        - dict
        items:
          type: dict
          keys:
            name:
              type: str
              required: true
              display_name: Match-list Name
            sequence_numbers:
              type: list
              required: true
              primary_key: sequence
              convert_types:
              - dict
              items:
                type: dict
                keys:
                  sequence:
                    type: int
                    required: true
                    display_name: Sequence ID
                    convert_types:
                    - str
                  match_regex:
                    type: str
                    required: true
                    display_name: Regular Expression
  sflow:
    type: dict
    display_name: Sflow
    keys:
      sample:
        type: int
        convert_types:
        - str
      dangerous:
        type: bool
      vrfs:
        type: list
        primary_key: name
        convert_types:
        - dict
        items:
          type: dict
          keys:
            name:
              type: str
              display_name: VRF
            destinations:
              type: list
              primary_key: destination
              convert_types:
              - dict
              items:
                type: dict
                keys:
                  destination:
                    type: str
                    display_name: Sflow Destination IP
                  port:
                    type: int
                    display_name: Port Number
                    convert_types:
                    - str
            source_interface:
              type: str
              display_name: Source Interface
      destinations:
        type: list
        primary_key: destination
        convert_types:
        - dict
        items:
          type: dict
          keys:
            destination:
              type: str
              display_name: Sflow Destination IP
            port:
              type: int
              display_name: Port Number
              convert_types:
              - str
      source_interface:
        type: str
        display_name: Source Interface
      interface:
        type: dict
        keys:
          disable:
            type: dict
            keys:
              default:
                type: bool
      run:
        type: bool
      hardware_acceleration:
        type: dict
        keys:
          enabled:
            type: bool
          sample:
            type: int
            convert_types:
            - str
          modules:
            type: list
            primary_key: name
            items:
              type: dict
              keys:
                name:
                  type: str
                enabled:
                  type: bool
                  default: true
  standard_access_lists:
    type: list
    primary_key: name
    convert_types:
    - dict
    display_name: Standard Access-Lists
    items:
      type: dict
      keys:
        name:
          type: str
          required: true
          display_name: Access-list Name
        counters_per_entry:
          type: bool
        sequence_numbers:
          type: list
          required: true
          primary_key: sequence
          convert_types:
          - dict
          items:
            type: dict
            keys:
              sequence:
                type: int
                required: true
                display_name: Sequence ID
                convert_types:
                - str
              action:
                type: str
                required: true
                description: 'Action as string

                  Example: "deny ip any any"'
  vlan_internal_order:
    type: dict
    display_name: Internal VLAN Order
    keys:
      allocation:
        type: str
        required: true
        valid_values:
        - ascending
        - descending
      range:
        type: dict
        required: true
        keys:
          beginning:
            type: int
            min: 1
            max: 4094
            required: true
            display_name: Vlan ID
            convert_types:
            - str
          ending:
            type: int
            min: 1
            max: 4094
            required: true
            display_name: Vlan ID
            convert_types:
            - str
