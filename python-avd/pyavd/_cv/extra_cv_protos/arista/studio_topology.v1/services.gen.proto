// Copyright (c) 2024 Arista Networks, Inc.  All rights reserved.
// Use of this source code is governed by the Apache License 2.0
// that can be found in the LICENSE file.

//
// Code generated by boomtown. DO NOT EDIT.
//

syntax = "proto3";

package arista.studio_topology.v1;
option go_package = "arista/resources/arista/studio_topology.v1;studio_topology";

import "arista/studio_topology.v1/studio_topology.proto";
import "arista/time/time.proto";
import "arista/subscriptions/subscriptions.proto";
import "fmp/deletes.proto";
import "arista/workspace.v1/workspace.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

message MetaResponse {
	// Time holds the timestamp of the last item included in the metadata calculation.
	google.protobuf.Timestamp time = 1;
	// Operation indicates how the value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	arista.subscriptions.Operation type = 2;
	// Count is the number of items present under the conditions of the request.
	google.protobuf.UInt32Value count = 3;
};
message DecommissionRequest {
	// Key uniquely identifies a Decommission instance to retrieve.
	// This value must be populated.
	DeviceKey key = 1;
	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	google.protobuf.Timestamp time = 2;
};
message DecommissionResponse {
	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Decommission value = 1;
	// Time carries the (UTC) timestamp of the last-modification of the
	// Decommission instance in this response.
	google.protobuf.Timestamp time = 2;
};
message DecommissionSomeRequest {
	repeated DeviceKey keys = 1;
	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	google.protobuf.Timestamp time = 2;
};
message DecommissionSomeResponse {
	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Decommission value = 1;
	// Error is an optional field.
	// It should be filled when there is an error in the GetSome process.
	google.protobuf.StringValue error = 2;
	google.protobuf.Timestamp time = 3;
};
message DecommissionStreamRequest {
	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	repeated Decommission partial_eq_filter = 1;
	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   * end: Returns the state of each Decommission at end.
	//     * Each Decommission response is fully-specified (all fields set).
	//   * start: Returns the state of each Decommission at start, followed by updates until now.
	//     * Each Decommission response at start is fully-specified, but updates may be partial.
	//   * start and end: Returns the state of each Decommission at start, followed by updates
	//     until end.
	//     * Each Decommission response at start is fully-specified, but updates until end may
	//       be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	arista.time.TimeBounds time = 3;
};
message DecommissionStreamResponse {
	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	Decommission value = 1;
	// Time holds the timestamp of this Decommission's last modification.
	google.protobuf.Timestamp time = 2;
	// Operation indicates how the Decommission value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	arista.subscriptions.Operation type = 3;
};
message DecommissionBatchedStreamRequest {
	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	repeated Decommission partial_eq_filter = 1;
	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   * end: Returns the state of each Decommission at end.
	//     * Each Decommission response is fully-specified (all fields set).
	//   * start: Returns the state of each Decommission at start, followed by updates until now.
	//     * Each Decommission response at start is fully-specified, but updates may be partial.
	//   * start and end: Returns the state of each Decommission at start, followed by updates
	//     until end.
	//     * Each Decommission response at start is fully-specified, but updates until end may
	//       be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	arista.time.TimeBounds time = 3;
	// MaxMessages limits the maximum number of messages that can be contained in one batch.
	// MaxMessages is required to be at least 1.
	// The maximum number of messages in a batch is min(max_messages, INTERNAL_BATCH_LIMIT)
	// INTERNAL_BATCH_LIMIT is set based on the maximum message size.
	google.protobuf.UInt32Value max_messages = 4;
};
message DecommissionBatchedStreamResponse {
	// Values are the values deemed relevant to the initiating request.
	// The length of this structure is guaranteed to be between (inclusive) 1 and
	// min(req.max_messages, INTERNAL_BATCH_LIMIT).
	repeated DecommissionStreamResponse responses = 1;
};
service DecommissionService {
	rpc GetOne (DecommissionRequest) returns (DecommissionResponse);
	rpc GetSome (DecommissionSomeRequest) returns (stream DecommissionSomeResponse);
	rpc GetAll (DecommissionStreamRequest) returns (stream DecommissionStreamResponse);
	rpc Subscribe (DecommissionStreamRequest) returns (stream DecommissionStreamResponse);
	rpc GetMeta (DecommissionStreamRequest) returns (MetaResponse);
	rpc SubscribeMeta (DecommissionStreamRequest) returns (stream MetaResponse);
	rpc GetAllBatched (DecommissionBatchedStreamRequest) returns (stream DecommissionBatchedStreamResponse);
	rpc SubscribeBatched (DecommissionBatchedStreamRequest) returns (stream DecommissionBatchedStreamResponse);
}
message DecommissionConfigRequest {
	// Key uniquely identifies a DecommissionConfig instance to retrieve.
	// This value must be populated.
	DeviceKey key = 1;
	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	google.protobuf.Timestamp time = 2;
};
message DecommissionConfigResponse {
	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	DecommissionConfig value = 1;
	// Time carries the (UTC) timestamp of the last-modification of the
	// DecommissionConfig instance in this response.
	google.protobuf.Timestamp time = 2;
};
message DecommissionConfigSomeRequest {
	repeated DeviceKey keys = 1;
	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	google.protobuf.Timestamp time = 2;
};
message DecommissionConfigSomeResponse {
	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	DecommissionConfig value = 1;
	// Error is an optional field.
	// It should be filled when there is an error in the GetSome process.
	google.protobuf.StringValue error = 2;
	google.protobuf.Timestamp time = 3;
};
message DecommissionConfigStreamRequest {
	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	repeated DecommissionConfig partial_eq_filter = 1;
	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   * end: Returns the state of each DecommissionConfig at end.
	//     * Each DecommissionConfig response is fully-specified (all fields set).
	//   * start: Returns the state of each DecommissionConfig at start, followed by updates until now.
	//     * Each DecommissionConfig response at start is fully-specified, but updates may be partial.
	//   * start and end: Returns the state of each DecommissionConfig at start, followed by updates
	//     until end.
	//     * Each DecommissionConfig response at start is fully-specified, but updates until end may
	//       be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	arista.time.TimeBounds time = 3;
};
message DecommissionConfigStreamResponse {
	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	DecommissionConfig value = 1;
	// Time holds the timestamp of this DecommissionConfig's last modification.
	google.protobuf.Timestamp time = 2;
	// Operation indicates how the DecommissionConfig value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	arista.subscriptions.Operation type = 3;
};
message DecommissionConfigBatchedStreamRequest {
	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	repeated DecommissionConfig partial_eq_filter = 1;
	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   * end: Returns the state of each DecommissionConfig at end.
	//     * Each DecommissionConfig response is fully-specified (all fields set).
	//   * start: Returns the state of each DecommissionConfig at start, followed by updates until now.
	//     * Each DecommissionConfig response at start is fully-specified, but updates may be partial.
	//   * start and end: Returns the state of each DecommissionConfig at start, followed by updates
	//     until end.
	//     * Each DecommissionConfig response at start is fully-specified, but updates until end may
	//       be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	arista.time.TimeBounds time = 3;
	// MaxMessages limits the maximum number of messages that can be contained in one batch.
	// MaxMessages is required to be at least 1.
	// The maximum number of messages in a batch is min(max_messages, INTERNAL_BATCH_LIMIT)
	// INTERNAL_BATCH_LIMIT is set based on the maximum message size.
	google.protobuf.UInt32Value max_messages = 4;
};
message DecommissionConfigBatchedStreamResponse {
	// Values are the values deemed relevant to the initiating request.
	// The length of this structure is guaranteed to be between (inclusive) 1 and
	// min(req.max_messages, INTERNAL_BATCH_LIMIT).
	repeated DecommissionConfigStreamResponse responses = 1;
};
message DecommissionConfigSetRequest {
	// DecommissionConfig carries the value to set into the datastore.
	// See the documentation on the DecommissionConfig struct for which fields are required.
	DecommissionConfig value = 1;
};
message DecommissionConfigSetResponse {
	// Value carries all the values given in the DecommissionConfigSetRequest as well
	// as any server-generated values.
	DecommissionConfig value = 1;
	// Time indicates the (UTC) timestamp at which the system recognizes the
	// creation. The only guarantees made about this timestamp are:
	//
	//    - it is after the time the request was received
	//    - a time-ranged query with StartTime==CreatedAt will include this instance.
	//
	google.protobuf.Timestamp time = 2;
};
message DecommissionConfigSetSomeRequest {
	// value contains a list of DecommissionConfig values to write.
	// It is possible to provide more values than can fit within either:
	//     - the maxiumum send size of the client
	//     - the maximum receive size of the server
	// If this error occurs you must reduce the number of values sent.
	// See gRPC "maximum message size" documentation for more information.
	repeated DecommissionConfig values = 1;
};
message DecommissionConfigSetSomeResponse {
	DeviceKey key = 1;
	string error = 2;
};
message DecommissionConfigDeleteRequest {
	// Key indicates which DecommissionConfig instance to remove.
	// This field must always be set.
	DeviceKey key = 1;
};
message DecommissionConfigDeleteResponse {
	// Key echoes back the key of the deleted DecommissionConfig instance.
	DeviceKey key = 1;
	// Time indicates the (UTC) timestamp at which the system recognizes the
	// deletion. The only guarantees made about this timestamp are:
	//
	//    - it is after the time the request was received
	//    - a time-ranged query with StartTime==DeletedAt will not include this instance.
	//
	google.protobuf.Timestamp time = 2;
};
message DecommissionConfigDeleteSomeRequest {
	// key contains a list of DecommissionConfig keys to delete
	repeated DeviceKey keys = 1;
};
// DecommissionConfigDeleteSomeResponse is only sent when there is an error.
message DecommissionConfigDeleteSomeResponse {
	DeviceKey key = 1;
	string error = 2;
};
message DecommissionConfigDeleteAllRequest {
	// PartialEqFilter provides a way to server-side filter a DeleteAll.
	// This requires all provided fields to be equal to the response.
	// A filtered DeleteAll will use GetAll with filter to find things to delete.
	repeated DecommissionConfig partial_eq_filter = 1;
};
message DecommissionConfigDeleteAllResponse {
	// This describes the class of delete error.
	// A DeleteAllResponse is only sent when there is an error.
	fmp.DeleteError type = 1;
	// This indicates the error message from the delete failure.
	google.protobuf.StringValue error = 2;
	// This is the key of the DecommissionConfig instance that failed to be deleted.
	DeviceKey key = 3;
	// Time indicates the (UTC) timestamp when the key was being deleted.
	google.protobuf.Timestamp time = 4;
};
service DecommissionConfigService {
	rpc GetOne (DecommissionConfigRequest) returns (DecommissionConfigResponse);
	rpc GetSome (DecommissionConfigSomeRequest) returns (stream DecommissionConfigSomeResponse);
	rpc GetAll (DecommissionConfigStreamRequest) returns (stream DecommissionConfigStreamResponse);
	rpc Subscribe (DecommissionConfigStreamRequest) returns (stream DecommissionConfigStreamResponse);
	rpc GetMeta (DecommissionConfigStreamRequest) returns (MetaResponse);
	rpc SubscribeMeta (DecommissionConfigStreamRequest) returns (stream MetaResponse);
	rpc Set (DecommissionConfigSetRequest) returns (DecommissionConfigSetResponse);
	rpc SetSome (DecommissionConfigSetSomeRequest) returns (stream DecommissionConfigSetSomeResponse);
	rpc Delete (DecommissionConfigDeleteRequest) returns (DecommissionConfigDeleteResponse);
	rpc DeleteSome (DecommissionConfigDeleteSomeRequest) returns (stream DecommissionConfigDeleteSomeResponse);
	rpc DeleteAll (DecommissionConfigDeleteAllRequest) returns (stream DecommissionConfigDeleteAllResponse);
	rpc GetAllBatched (DecommissionConfigBatchedStreamRequest) returns (stream DecommissionConfigBatchedStreamResponse);
	rpc SubscribeBatched (DecommissionConfigBatchedStreamRequest) returns (stream DecommissionConfigBatchedStreamResponse);
}
message DeviceInputConfigRequest {
	// Key uniquely identifies a DeviceInputConfig instance to retrieve.
	// This value must be populated.
	DeviceKey key = 1;
	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	google.protobuf.Timestamp time = 2;
};
message DeviceInputConfigResponse {
	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	DeviceInputConfig value = 1;
	// Time carries the (UTC) timestamp of the last-modification of the
	// DeviceInputConfig instance in this response.
	google.protobuf.Timestamp time = 2;
};
message DeviceInputConfigSomeRequest {
	repeated DeviceKey keys = 1;
	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	google.protobuf.Timestamp time = 2;
};
message DeviceInputConfigSomeResponse {
	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	DeviceInputConfig value = 1;
	// Error is an optional field.
	// It should be filled when there is an error in the GetSome process.
	google.protobuf.StringValue error = 2;
	google.protobuf.Timestamp time = 3;
};
message DeviceInputConfigStreamRequest {
	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	repeated DeviceInputConfig partial_eq_filter = 1;
	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   * end: Returns the state of each DeviceInputConfig at end.
	//     * Each DeviceInputConfig response is fully-specified (all fields set).
	//   * start: Returns the state of each DeviceInputConfig at start, followed by updates until now.
	//     * Each DeviceInputConfig response at start is fully-specified, but updates may be partial.
	//   * start and end: Returns the state of each DeviceInputConfig at start, followed by updates
	//     until end.
	//     * Each DeviceInputConfig response at start is fully-specified, but updates until end may
	//       be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	arista.time.TimeBounds time = 3;
};
message DeviceInputConfigStreamResponse {
	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	DeviceInputConfig value = 1;
	// Time holds the timestamp of this DeviceInputConfig's last modification.
	google.protobuf.Timestamp time = 2;
	// Operation indicates how the DeviceInputConfig value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	arista.subscriptions.Operation type = 3;
};
message DeviceInputConfigBatchedStreamRequest {
	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	repeated DeviceInputConfig partial_eq_filter = 1;
	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   * end: Returns the state of each DeviceInputConfig at end.
	//     * Each DeviceInputConfig response is fully-specified (all fields set).
	//   * start: Returns the state of each DeviceInputConfig at start, followed by updates until now.
	//     * Each DeviceInputConfig response at start is fully-specified, but updates may be partial.
	//   * start and end: Returns the state of each DeviceInputConfig at start, followed by updates
	//     until end.
	//     * Each DeviceInputConfig response at start is fully-specified, but updates until end may
	//       be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	arista.time.TimeBounds time = 3;
	// MaxMessages limits the maximum number of messages that can be contained in one batch.
	// MaxMessages is required to be at least 1.
	// The maximum number of messages in a batch is min(max_messages, INTERNAL_BATCH_LIMIT)
	// INTERNAL_BATCH_LIMIT is set based on the maximum message size.
	google.protobuf.UInt32Value max_messages = 4;
};
message DeviceInputConfigBatchedStreamResponse {
	// Values are the values deemed relevant to the initiating request.
	// The length of this structure is guaranteed to be between (inclusive) 1 and
	// min(req.max_messages, INTERNAL_BATCH_LIMIT).
	repeated DeviceInputConfigStreamResponse responses = 1;
};
message DeviceInputConfigSetRequest {
	// DeviceInputConfig carries the value to set into the datastore.
	// See the documentation on the DeviceInputConfig struct for which fields are required.
	DeviceInputConfig value = 1;
};
message DeviceInputConfigSetResponse {
	// Value carries all the values given in the DeviceInputConfigSetRequest as well
	// as any server-generated values.
	DeviceInputConfig value = 1;
	// Time indicates the (UTC) timestamp at which the system recognizes the
	// creation. The only guarantees made about this timestamp are:
	//
	//    - it is after the time the request was received
	//    - a time-ranged query with StartTime==CreatedAt will include this instance.
	//
	google.protobuf.Timestamp time = 2;
};
message DeviceInputConfigSetSomeRequest {
	// value contains a list of DeviceInputConfig values to write.
	// It is possible to provide more values than can fit within either:
	//     - the maxiumum send size of the client
	//     - the maximum receive size of the server
	// If this error occurs you must reduce the number of values sent.
	// See gRPC "maximum message size" documentation for more information.
	repeated DeviceInputConfig values = 1;
};
message DeviceInputConfigSetSomeResponse {
	DeviceKey key = 1;
	string error = 2;
};
message DeviceInputConfigDeleteRequest {
	// Key indicates which DeviceInputConfig instance to remove.
	// This field must always be set.
	DeviceKey key = 1;
};
message DeviceInputConfigDeleteResponse {
	// Key echoes back the key of the deleted DeviceInputConfig instance.
	DeviceKey key = 1;
	// Time indicates the (UTC) timestamp at which the system recognizes the
	// deletion. The only guarantees made about this timestamp are:
	//
	//    - it is after the time the request was received
	//    - a time-ranged query with StartTime==DeletedAt will not include this instance.
	//
	google.protobuf.Timestamp time = 2;
};
message DeviceInputConfigDeleteSomeRequest {
	// key contains a list of DeviceInputConfig keys to delete
	repeated DeviceKey keys = 1;
};
// DeviceInputConfigDeleteSomeResponse is only sent when there is an error.
message DeviceInputConfigDeleteSomeResponse {
	DeviceKey key = 1;
	string error = 2;
};
message DeviceInputConfigDeleteAllRequest {
	// PartialEqFilter provides a way to server-side filter a DeleteAll.
	// This requires all provided fields to be equal to the response.
	// A filtered DeleteAll will use GetAll with filter to find things to delete.
	repeated DeviceInputConfig partial_eq_filter = 1;
};
message DeviceInputConfigDeleteAllResponse {
	// This describes the class of delete error.
	// A DeleteAllResponse is only sent when there is an error.
	fmp.DeleteError type = 1;
	// This indicates the error message from the delete failure.
	google.protobuf.StringValue error = 2;
	// This is the key of the DeviceInputConfig instance that failed to be deleted.
	DeviceKey key = 3;
	// Time indicates the (UTC) timestamp when the key was being deleted.
	google.protobuf.Timestamp time = 4;
};
service DeviceInputConfigService {
	rpc GetOne (DeviceInputConfigRequest) returns (DeviceInputConfigResponse);
	rpc GetSome (DeviceInputConfigSomeRequest) returns (stream DeviceInputConfigSomeResponse);
	rpc GetAll (DeviceInputConfigStreamRequest) returns (stream DeviceInputConfigStreamResponse);
	rpc Subscribe (DeviceInputConfigStreamRequest) returns (stream DeviceInputConfigStreamResponse);
	rpc GetMeta (DeviceInputConfigStreamRequest) returns (MetaResponse);
	rpc SubscribeMeta (DeviceInputConfigStreamRequest) returns (stream MetaResponse);
	rpc Set (DeviceInputConfigSetRequest) returns (DeviceInputConfigSetResponse);
	rpc SetSome (DeviceInputConfigSetSomeRequest) returns (stream DeviceInputConfigSetSomeResponse);
	rpc Delete (DeviceInputConfigDeleteRequest) returns (DeviceInputConfigDeleteResponse);
	rpc DeleteSome (DeviceInputConfigDeleteSomeRequest) returns (stream DeviceInputConfigDeleteSomeResponse);
	rpc DeleteAll (DeviceInputConfigDeleteAllRequest) returns (stream DeviceInputConfigDeleteAllResponse);
	rpc GetAllBatched (DeviceInputConfigBatchedStreamRequest) returns (stream DeviceInputConfigBatchedStreamResponse);
	rpc SubscribeBatched (DeviceInputConfigBatchedStreamRequest) returns (stream DeviceInputConfigBatchedStreamResponse);
}
message DeviceStateRequest {
	// Key uniquely identifies a DeviceState instance to retrieve.
	// This value must be populated.
	DeviceKey key = 1;
	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	google.protobuf.Timestamp time = 2;
};
message DeviceStateResponse {
	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	DeviceState value = 1;
	// Time carries the (UTC) timestamp of the last-modification of the
	// DeviceState instance in this response.
	google.protobuf.Timestamp time = 2;
};
message DeviceStateSomeRequest {
	repeated DeviceKey keys = 1;
	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	google.protobuf.Timestamp time = 2;
};
message DeviceStateSomeResponse {
	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	DeviceState value = 1;
	// Error is an optional field.
	// It should be filled when there is an error in the GetSome process.
	google.protobuf.StringValue error = 2;
	google.protobuf.Timestamp time = 3;
};
message DeviceStateStreamRequest {
	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	repeated DeviceState partial_eq_filter = 1;
	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   * end: Returns the state of each DeviceState at end.
	//     * Each DeviceState response is fully-specified (all fields set).
	//   * start: Returns the state of each DeviceState at start, followed by updates until now.
	//     * Each DeviceState response at start is fully-specified, but updates may be partial.
	//   * start and end: Returns the state of each DeviceState at start, followed by updates
	//     until end.
	//     * Each DeviceState response at start is fully-specified, but updates until end may
	//       be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	arista.time.TimeBounds time = 3;
};
message DeviceStateStreamResponse {
	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	DeviceState value = 1;
	// Time holds the timestamp of this DeviceState's last modification.
	google.protobuf.Timestamp time = 2;
	// Operation indicates how the DeviceState value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	arista.subscriptions.Operation type = 3;
};
message DeviceStateBatchedStreamRequest {
	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	repeated DeviceState partial_eq_filter = 1;
	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   * end: Returns the state of each DeviceState at end.
	//     * Each DeviceState response is fully-specified (all fields set).
	//   * start: Returns the state of each DeviceState at start, followed by updates until now.
	//     * Each DeviceState response at start is fully-specified, but updates may be partial.
	//   * start and end: Returns the state of each DeviceState at start, followed by updates
	//     until end.
	//     * Each DeviceState response at start is fully-specified, but updates until end may
	//       be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	arista.time.TimeBounds time = 3;
	// MaxMessages limits the maximum number of messages that can be contained in one batch.
	// MaxMessages is required to be at least 1.
	// The maximum number of messages in a batch is min(max_messages, INTERNAL_BATCH_LIMIT)
	// INTERNAL_BATCH_LIMIT is set based on the maximum message size.
	google.protobuf.UInt32Value max_messages = 4;
};
message DeviceStateBatchedStreamResponse {
	// Values are the values deemed relevant to the initiating request.
	// The length of this structure is guaranteed to be between (inclusive) 1 and
	// min(req.max_messages, INTERNAL_BATCH_LIMIT).
	repeated DeviceStateStreamResponse responses = 1;
};
service DeviceStateService {
	rpc GetOne (DeviceStateRequest) returns (DeviceStateResponse);
	rpc GetSome (DeviceStateSomeRequest) returns (stream DeviceStateSomeResponse);
	rpc GetAll (DeviceStateStreamRequest) returns (stream DeviceStateStreamResponse);
	rpc Subscribe (DeviceStateStreamRequest) returns (stream DeviceStateStreamResponse);
	rpc GetMeta (DeviceStateStreamRequest) returns (MetaResponse);
	rpc SubscribeMeta (DeviceStateStreamRequest) returns (stream MetaResponse);
	rpc GetAllBatched (DeviceStateBatchedStreamRequest) returns (stream DeviceStateBatchedStreamResponse);
	rpc SubscribeBatched (DeviceStateBatchedStreamRequest) returns (stream DeviceStateBatchedStreamResponse);
}
message InterfaceInputConfigRequest {
	// Key uniquely identifies a InterfaceInputConfig instance to retrieve.
	// This value must be populated.
	InterfaceInputKey key = 1;
	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	google.protobuf.Timestamp time = 2;
};
message InterfaceInputConfigResponse {
	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	InterfaceInputConfig value = 1;
	// Time carries the (UTC) timestamp of the last-modification of the
	// InterfaceInputConfig instance in this response.
	google.protobuf.Timestamp time = 2;
};
message InterfaceInputConfigSomeRequest {
	repeated InterfaceInputKey keys = 1;
	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	google.protobuf.Timestamp time = 2;
};
message InterfaceInputConfigSomeResponse {
	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	InterfaceInputConfig value = 1;
	// Error is an optional field.
	// It should be filled when there is an error in the GetSome process.
	google.protobuf.StringValue error = 2;
	google.protobuf.Timestamp time = 3;
};
message InterfaceInputConfigStreamRequest {
	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	repeated InterfaceInputConfig partial_eq_filter = 1;
	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   * end: Returns the state of each InterfaceInputConfig at end.
	//     * Each InterfaceInputConfig response is fully-specified (all fields set).
	//   * start: Returns the state of each InterfaceInputConfig at start, followed by updates until now.
	//     * Each InterfaceInputConfig response at start is fully-specified, but updates may be partial.
	//   * start and end: Returns the state of each InterfaceInputConfig at start, followed by updates
	//     until end.
	//     * Each InterfaceInputConfig response at start is fully-specified, but updates until end may
	//       be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	arista.time.TimeBounds time = 3;
};
message InterfaceInputConfigStreamResponse {
	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	InterfaceInputConfig value = 1;
	// Time holds the timestamp of this InterfaceInputConfig's last modification.
	google.protobuf.Timestamp time = 2;
	// Operation indicates how the InterfaceInputConfig value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	arista.subscriptions.Operation type = 3;
};
message InterfaceInputConfigBatchedStreamRequest {
	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	repeated InterfaceInputConfig partial_eq_filter = 1;
	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   * end: Returns the state of each InterfaceInputConfig at end.
	//     * Each InterfaceInputConfig response is fully-specified (all fields set).
	//   * start: Returns the state of each InterfaceInputConfig at start, followed by updates until now.
	//     * Each InterfaceInputConfig response at start is fully-specified, but updates may be partial.
	//   * start and end: Returns the state of each InterfaceInputConfig at start, followed by updates
	//     until end.
	//     * Each InterfaceInputConfig response at start is fully-specified, but updates until end may
	//       be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	arista.time.TimeBounds time = 3;
	// MaxMessages limits the maximum number of messages that can be contained in one batch.
	// MaxMessages is required to be at least 1.
	// The maximum number of messages in a batch is min(max_messages, INTERNAL_BATCH_LIMIT)
	// INTERNAL_BATCH_LIMIT is set based on the maximum message size.
	google.protobuf.UInt32Value max_messages = 4;
};
message InterfaceInputConfigBatchedStreamResponse {
	// Values are the values deemed relevant to the initiating request.
	// The length of this structure is guaranteed to be between (inclusive) 1 and
	// min(req.max_messages, INTERNAL_BATCH_LIMIT).
	repeated InterfaceInputConfigStreamResponse responses = 1;
};
message InterfaceInputConfigSetRequest {
	// InterfaceInputConfig carries the value to set into the datastore.
	// See the documentation on the InterfaceInputConfig struct for which fields are required.
	InterfaceInputConfig value = 1;
};
message InterfaceInputConfigSetResponse {
	// Value carries all the values given in the InterfaceInputConfigSetRequest as well
	// as any server-generated values.
	InterfaceInputConfig value = 1;
	// Time indicates the (UTC) timestamp at which the system recognizes the
	// creation. The only guarantees made about this timestamp are:
	//
	//    - it is after the time the request was received
	//    - a time-ranged query with StartTime==CreatedAt will include this instance.
	//
	google.protobuf.Timestamp time = 2;
};
message InterfaceInputConfigSetSomeRequest {
	// value contains a list of InterfaceInputConfig values to write.
	// It is possible to provide more values than can fit within either:
	//     - the maxiumum send size of the client
	//     - the maximum receive size of the server
	// If this error occurs you must reduce the number of values sent.
	// See gRPC "maximum message size" documentation for more information.
	repeated InterfaceInputConfig values = 1;
};
message InterfaceInputConfigSetSomeResponse {
	InterfaceInputKey key = 1;
	string error = 2;
};
message InterfaceInputConfigDeleteRequest {
	// Key indicates which InterfaceInputConfig instance to remove.
	// This field must always be set.
	InterfaceInputKey key = 1;
};
message InterfaceInputConfigDeleteResponse {
	// Key echoes back the key of the deleted InterfaceInputConfig instance.
	InterfaceInputKey key = 1;
	// Time indicates the (UTC) timestamp at which the system recognizes the
	// deletion. The only guarantees made about this timestamp are:
	//
	//    - it is after the time the request was received
	//    - a time-ranged query with StartTime==DeletedAt will not include this instance.
	//
	google.protobuf.Timestamp time = 2;
};
message InterfaceInputConfigDeleteSomeRequest {
	// key contains a list of InterfaceInputConfig keys to delete
	repeated InterfaceInputKey keys = 1;
};
// InterfaceInputConfigDeleteSomeResponse is only sent when there is an error.
message InterfaceInputConfigDeleteSomeResponse {
	InterfaceInputKey key = 1;
	string error = 2;
};
message InterfaceInputConfigDeleteAllRequest {
	// PartialEqFilter provides a way to server-side filter a DeleteAll.
	// This requires all provided fields to be equal to the response.
	// A filtered DeleteAll will use GetAll with filter to find things to delete.
	repeated InterfaceInputConfig partial_eq_filter = 1;
};
message InterfaceInputConfigDeleteAllResponse {
	// This describes the class of delete error.
	// A DeleteAllResponse is only sent when there is an error.
	fmp.DeleteError type = 1;
	// This indicates the error message from the delete failure.
	google.protobuf.StringValue error = 2;
	// This is the key of the InterfaceInputConfig instance that failed to be deleted.
	InterfaceInputKey key = 3;
	// Time indicates the (UTC) timestamp when the key was being deleted.
	google.protobuf.Timestamp time = 4;
};
service InterfaceInputConfigService {
	rpc GetOne (InterfaceInputConfigRequest) returns (InterfaceInputConfigResponse);
	rpc GetSome (InterfaceInputConfigSomeRequest) returns (stream InterfaceInputConfigSomeResponse);
	rpc GetAll (InterfaceInputConfigStreamRequest) returns (stream InterfaceInputConfigStreamResponse);
	rpc Subscribe (InterfaceInputConfigStreamRequest) returns (stream InterfaceInputConfigStreamResponse);
	rpc GetMeta (InterfaceInputConfigStreamRequest) returns (MetaResponse);
	rpc SubscribeMeta (InterfaceInputConfigStreamRequest) returns (stream MetaResponse);
	rpc Set (InterfaceInputConfigSetRequest) returns (InterfaceInputConfigSetResponse);
	rpc SetSome (InterfaceInputConfigSetSomeRequest) returns (stream InterfaceInputConfigSetSomeResponse);
	rpc Delete (InterfaceInputConfigDeleteRequest) returns (InterfaceInputConfigDeleteResponse);
	rpc DeleteSome (InterfaceInputConfigDeleteSomeRequest) returns (stream InterfaceInputConfigDeleteSomeResponse);
	rpc DeleteAll (InterfaceInputConfigDeleteAllRequest) returns (stream InterfaceInputConfigDeleteAllResponse);
	rpc GetAllBatched (InterfaceInputConfigBatchedStreamRequest) returns (stream InterfaceInputConfigBatchedStreamResponse);
	rpc SubscribeBatched (InterfaceInputConfigBatchedStreamRequest) returns (stream InterfaceInputConfigBatchedStreamResponse);
}
message RevertConfigRequest {
	// Key uniquely identifies a RevertConfig instance to retrieve.
	// This value must be populated.
	arista.workspace.v1.WorkspaceKey key = 1;
	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	google.protobuf.Timestamp time = 2;
};
message RevertConfigResponse {
	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	RevertConfig value = 1;
	// Time carries the (UTC) timestamp of the last-modification of the
	// RevertConfig instance in this response.
	google.protobuf.Timestamp time = 2;
};
message RevertConfigSomeRequest {
	repeated arista.workspace.v1.WorkspaceKey keys = 1;
	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	google.protobuf.Timestamp time = 2;
};
message RevertConfigSomeResponse {
	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	RevertConfig value = 1;
	// Error is an optional field.
	// It should be filled when there is an error in the GetSome process.
	google.protobuf.StringValue error = 2;
	google.protobuf.Timestamp time = 3;
};
message RevertConfigStreamRequest {
	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	repeated RevertConfig partial_eq_filter = 1;
	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   * end: Returns the state of each RevertConfig at end.
	//     * Each RevertConfig response is fully-specified (all fields set).
	//   * start: Returns the state of each RevertConfig at start, followed by updates until now.
	//     * Each RevertConfig response at start is fully-specified, but updates may be partial.
	//   * start and end: Returns the state of each RevertConfig at start, followed by updates
	//     until end.
	//     * Each RevertConfig response at start is fully-specified, but updates until end may
	//       be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	arista.time.TimeBounds time = 3;
};
message RevertConfigStreamResponse {
	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	RevertConfig value = 1;
	// Time holds the timestamp of this RevertConfig's last modification.
	google.protobuf.Timestamp time = 2;
	// Operation indicates how the RevertConfig value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	arista.subscriptions.Operation type = 3;
};
message RevertConfigBatchedStreamRequest {
	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	repeated RevertConfig partial_eq_filter = 1;
	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   * end: Returns the state of each RevertConfig at end.
	//     * Each RevertConfig response is fully-specified (all fields set).
	//   * start: Returns the state of each RevertConfig at start, followed by updates until now.
	//     * Each RevertConfig response at start is fully-specified, but updates may be partial.
	//   * start and end: Returns the state of each RevertConfig at start, followed by updates
	//     until end.
	//     * Each RevertConfig response at start is fully-specified, but updates until end may
	//       be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	arista.time.TimeBounds time = 3;
	// MaxMessages limits the maximum number of messages that can be contained in one batch.
	// MaxMessages is required to be at least 1.
	// The maximum number of messages in a batch is min(max_messages, INTERNAL_BATCH_LIMIT)
	// INTERNAL_BATCH_LIMIT is set based on the maximum message size.
	google.protobuf.UInt32Value max_messages = 4;
};
message RevertConfigBatchedStreamResponse {
	// Values are the values deemed relevant to the initiating request.
	// The length of this structure is guaranteed to be between (inclusive) 1 and
	// min(req.max_messages, INTERNAL_BATCH_LIMIT).
	repeated RevertConfigStreamResponse responses = 1;
};
message RevertConfigSetRequest {
	// RevertConfig carries the value to set into the datastore.
	// See the documentation on the RevertConfig struct for which fields are required.
	RevertConfig value = 1;
};
message RevertConfigSetResponse {
	// Value carries all the values given in the RevertConfigSetRequest as well
	// as any server-generated values.
	RevertConfig value = 1;
	// Time indicates the (UTC) timestamp at which the system recognizes the
	// creation. The only guarantees made about this timestamp are:
	//
	//    - it is after the time the request was received
	//    - a time-ranged query with StartTime==CreatedAt will include this instance.
	//
	google.protobuf.Timestamp time = 2;
};
message RevertConfigSetSomeRequest {
	// value contains a list of RevertConfig values to write.
	// It is possible to provide more values than can fit within either:
	//     - the maxiumum send size of the client
	//     - the maximum receive size of the server
	// If this error occurs you must reduce the number of values sent.
	// See gRPC "maximum message size" documentation for more information.
	repeated RevertConfig values = 1;
};
message RevertConfigSetSomeResponse {
	arista.workspace.v1.WorkspaceKey key = 1;
	string error = 2;
};
message RevertConfigDeleteRequest {
	// Key indicates which RevertConfig instance to remove.
	// This field must always be set.
	arista.workspace.v1.WorkspaceKey key = 1;
};
message RevertConfigDeleteResponse {
	// Key echoes back the key of the deleted RevertConfig instance.
	arista.workspace.v1.WorkspaceKey key = 1;
	// Time indicates the (UTC) timestamp at which the system recognizes the
	// deletion. The only guarantees made about this timestamp are:
	//
	//    - it is after the time the request was received
	//    - a time-ranged query with StartTime==DeletedAt will not include this instance.
	//
	google.protobuf.Timestamp time = 2;
};
message RevertConfigDeleteSomeRequest {
	// key contains a list of RevertConfig keys to delete
	repeated arista.workspace.v1.WorkspaceKey keys = 1;
};
// RevertConfigDeleteSomeResponse is only sent when there is an error.
message RevertConfigDeleteSomeResponse {
	arista.workspace.v1.WorkspaceKey key = 1;
	string error = 2;
};
message RevertConfigDeleteAllRequest {
	// PartialEqFilter provides a way to server-side filter a DeleteAll.
	// This requires all provided fields to be equal to the response.
	// A filtered DeleteAll will use GetAll with filter to find things to delete.
	repeated RevertConfig partial_eq_filter = 1;
};
message RevertConfigDeleteAllResponse {
	// This describes the class of delete error.
	// A DeleteAllResponse is only sent when there is an error.
	fmp.DeleteError type = 1;
	// This indicates the error message from the delete failure.
	google.protobuf.StringValue error = 2;
	// This is the key of the RevertConfig instance that failed to be deleted.
	arista.workspace.v1.WorkspaceKey key = 3;
	// Time indicates the (UTC) timestamp when the key was being deleted.
	google.protobuf.Timestamp time = 4;
};
service RevertConfigService {
	rpc GetOne (RevertConfigRequest) returns (RevertConfigResponse);
	rpc GetSome (RevertConfigSomeRequest) returns (stream RevertConfigSomeResponse);
	rpc GetAll (RevertConfigStreamRequest) returns (stream RevertConfigStreamResponse);
	rpc Subscribe (RevertConfigStreamRequest) returns (stream RevertConfigStreamResponse);
	rpc GetMeta (RevertConfigStreamRequest) returns (MetaResponse);
	rpc SubscribeMeta (RevertConfigStreamRequest) returns (stream MetaResponse);
	rpc Set (RevertConfigSetRequest) returns (RevertConfigSetResponse);
	rpc SetSome (RevertConfigSetSomeRequest) returns (stream RevertConfigSetSomeResponse);
	rpc Delete (RevertConfigDeleteRequest) returns (RevertConfigDeleteResponse);
	rpc DeleteSome (RevertConfigDeleteSomeRequest) returns (stream RevertConfigDeleteSomeResponse);
	rpc DeleteAll (RevertConfigDeleteAllRequest) returns (stream RevertConfigDeleteAllResponse);
	rpc GetAllBatched (RevertConfigBatchedStreamRequest) returns (stream RevertConfigBatchedStreamResponse);
	rpc SubscribeBatched (RevertConfigBatchedStreamRequest) returns (stream RevertConfigBatchedStreamResponse);
}
message UpdateRequest {
	// Key uniquely identifies a Update instance to retrieve.
	// This value must be populated.
	UpdateKey key = 1;
	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	google.protobuf.Timestamp time = 2;
};
message UpdateResponse {
	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Update value = 1;
	// Time carries the (UTC) timestamp of the last-modification of the
	// Update instance in this response.
	google.protobuf.Timestamp time = 2;
};
message UpdateSomeRequest {
	repeated UpdateKey keys = 1;
	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	google.protobuf.Timestamp time = 2;
};
message UpdateSomeResponse {
	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Update value = 1;
	// Error is an optional field.
	// It should be filled when there is an error in the GetSome process.
	google.protobuf.StringValue error = 2;
	google.protobuf.Timestamp time = 3;
};
message UpdateStreamRequest {
	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	repeated Update partial_eq_filter = 1;
	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   * end: Returns the state of each Update at end.
	//     * Each Update response is fully-specified (all fields set).
	//   * start: Returns the state of each Update at start, followed by updates until now.
	//     * Each Update response at start is fully-specified, but updates may be partial.
	//   * start and end: Returns the state of each Update at start, followed by updates
	//     until end.
	//     * Each Update response at start is fully-specified, but updates until end may
	//       be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	arista.time.TimeBounds time = 3;
};
message UpdateStreamResponse {
	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	Update value = 1;
	// Time holds the timestamp of this Update's last modification.
	google.protobuf.Timestamp time = 2;
	// Operation indicates how the Update value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	arista.subscriptions.Operation type = 3;
};
message UpdateBatchedStreamRequest {
	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	repeated Update partial_eq_filter = 1;
	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   * end: Returns the state of each Update at end.
	//     * Each Update response is fully-specified (all fields set).
	//   * start: Returns the state of each Update at start, followed by updates until now.
	//     * Each Update response at start is fully-specified, but updates may be partial.
	//   * start and end: Returns the state of each Update at start, followed by updates
	//     until end.
	//     * Each Update response at start is fully-specified, but updates until end may
	//       be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	arista.time.TimeBounds time = 3;
	// MaxMessages limits the maximum number of messages that can be contained in one batch.
	// MaxMessages is required to be at least 1.
	// The maximum number of messages in a batch is min(max_messages, INTERNAL_BATCH_LIMIT)
	// INTERNAL_BATCH_LIMIT is set based on the maximum message size.
	google.protobuf.UInt32Value max_messages = 4;
};
message UpdateBatchedStreamResponse {
	// Values are the values deemed relevant to the initiating request.
	// The length of this structure is guaranteed to be between (inclusive) 1 and
	// min(req.max_messages, INTERNAL_BATCH_LIMIT).
	repeated UpdateStreamResponse responses = 1;
};
service UpdateService {
	rpc GetOne (UpdateRequest) returns (UpdateResponse);
	rpc GetSome (UpdateSomeRequest) returns (stream UpdateSomeResponse);
	rpc GetAll (UpdateStreamRequest) returns (stream UpdateStreamResponse);
	rpc Subscribe (UpdateStreamRequest) returns (stream UpdateStreamResponse);
	rpc GetMeta (UpdateStreamRequest) returns (MetaResponse);
	rpc SubscribeMeta (UpdateStreamRequest) returns (stream MetaResponse);
	rpc GetAllBatched (UpdateBatchedStreamRequest) returns (stream UpdateBatchedStreamResponse);
	rpc SubscribeBatched (UpdateBatchedStreamRequest) returns (stream UpdateBatchedStreamResponse);
}
message UpdateConfigRequest {
	// Key uniquely identifies a UpdateConfig instance to retrieve.
	// This value must be populated.
	UpdateKey key = 1;
	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	google.protobuf.Timestamp time = 2;
};
message UpdateConfigResponse {
	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	UpdateConfig value = 1;
	// Time carries the (UTC) timestamp of the last-modification of the
	// UpdateConfig instance in this response.
	google.protobuf.Timestamp time = 2;
};
message UpdateConfigSomeRequest {
	repeated UpdateKey keys = 1;
	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	google.protobuf.Timestamp time = 2;
};
message UpdateConfigSomeResponse {
	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	UpdateConfig value = 1;
	// Error is an optional field.
	// It should be filled when there is an error in the GetSome process.
	google.protobuf.StringValue error = 2;
	google.protobuf.Timestamp time = 3;
};
message UpdateConfigStreamRequest {
	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	repeated UpdateConfig partial_eq_filter = 1;
	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   * end: Returns the state of each UpdateConfig at end.
	//     * Each UpdateConfig response is fully-specified (all fields set).
	//   * start: Returns the state of each UpdateConfig at start, followed by updates until now.
	//     * Each UpdateConfig response at start is fully-specified, but updates may be partial.
	//   * start and end: Returns the state of each UpdateConfig at start, followed by updates
	//     until end.
	//     * Each UpdateConfig response at start is fully-specified, but updates until end may
	//       be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	arista.time.TimeBounds time = 3;
};
message UpdateConfigStreamResponse {
	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	UpdateConfig value = 1;
	// Time holds the timestamp of this UpdateConfig's last modification.
	google.protobuf.Timestamp time = 2;
	// Operation indicates how the UpdateConfig value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	arista.subscriptions.Operation type = 3;
};
message UpdateConfigBatchedStreamRequest {
	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	repeated UpdateConfig partial_eq_filter = 1;
	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   * end: Returns the state of each UpdateConfig at end.
	//     * Each UpdateConfig response is fully-specified (all fields set).
	//   * start: Returns the state of each UpdateConfig at start, followed by updates until now.
	//     * Each UpdateConfig response at start is fully-specified, but updates may be partial.
	//   * start and end: Returns the state of each UpdateConfig at start, followed by updates
	//     until end.
	//     * Each UpdateConfig response at start is fully-specified, but updates until end may
	//       be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	arista.time.TimeBounds time = 3;
	// MaxMessages limits the maximum number of messages that can be contained in one batch.
	// MaxMessages is required to be at least 1.
	// The maximum number of messages in a batch is min(max_messages, INTERNAL_BATCH_LIMIT)
	// INTERNAL_BATCH_LIMIT is set based on the maximum message size.
	google.protobuf.UInt32Value max_messages = 4;
};
message UpdateConfigBatchedStreamResponse {
	// Values are the values deemed relevant to the initiating request.
	// The length of this structure is guaranteed to be between (inclusive) 1 and
	// min(req.max_messages, INTERNAL_BATCH_LIMIT).
	repeated UpdateConfigStreamResponse responses = 1;
};
message UpdateConfigSetRequest {
	// UpdateConfig carries the value to set into the datastore.
	// See the documentation on the UpdateConfig struct for which fields are required.
	UpdateConfig value = 1;
};
message UpdateConfigSetResponse {
	// Value carries all the values given in the UpdateConfigSetRequest as well
	// as any server-generated values.
	UpdateConfig value = 1;
	// Time indicates the (UTC) timestamp at which the system recognizes the
	// creation. The only guarantees made about this timestamp are:
	//
	//    - it is after the time the request was received
	//    - a time-ranged query with StartTime==CreatedAt will include this instance.
	//
	google.protobuf.Timestamp time = 2;
};
message UpdateConfigSetSomeRequest {
	// value contains a list of UpdateConfig values to write.
	// It is possible to provide more values than can fit within either:
	//     - the maxiumum send size of the client
	//     - the maximum receive size of the server
	// If this error occurs you must reduce the number of values sent.
	// See gRPC "maximum message size" documentation for more information.
	repeated UpdateConfig values = 1;
};
message UpdateConfigSetSomeResponse {
	UpdateKey key = 1;
	string error = 2;
};
message UpdateConfigDeleteRequest {
	// Key indicates which UpdateConfig instance to remove.
	// This field must always be set.
	UpdateKey key = 1;
};
message UpdateConfigDeleteResponse {
	// Key echoes back the key of the deleted UpdateConfig instance.
	UpdateKey key = 1;
	// Time indicates the (UTC) timestamp at which the system recognizes the
	// deletion. The only guarantees made about this timestamp are:
	//
	//    - it is after the time the request was received
	//    - a time-ranged query with StartTime==DeletedAt will not include this instance.
	//
	google.protobuf.Timestamp time = 2;
};
message UpdateConfigDeleteSomeRequest {
	// key contains a list of UpdateConfig keys to delete
	repeated UpdateKey keys = 1;
};
// UpdateConfigDeleteSomeResponse is only sent when there is an error.
message UpdateConfigDeleteSomeResponse {
	UpdateKey key = 1;
	string error = 2;
};
message UpdateConfigDeleteAllRequest {
	// PartialEqFilter provides a way to server-side filter a DeleteAll.
	// This requires all provided fields to be equal to the response.
	// A filtered DeleteAll will use GetAll with filter to find things to delete.
	repeated UpdateConfig partial_eq_filter = 1;
};
message UpdateConfigDeleteAllResponse {
	// This describes the class of delete error.
	// A DeleteAllResponse is only sent when there is an error.
	fmp.DeleteError type = 1;
	// This indicates the error message from the delete failure.
	google.protobuf.StringValue error = 2;
	// This is the key of the UpdateConfig instance that failed to be deleted.
	UpdateKey key = 3;
	// Time indicates the (UTC) timestamp when the key was being deleted.
	google.protobuf.Timestamp time = 4;
};
service UpdateConfigService {
	rpc GetOne (UpdateConfigRequest) returns (UpdateConfigResponse);
	rpc GetSome (UpdateConfigSomeRequest) returns (stream UpdateConfigSomeResponse);
	rpc GetAll (UpdateConfigStreamRequest) returns (stream UpdateConfigStreamResponse);
	rpc Subscribe (UpdateConfigStreamRequest) returns (stream UpdateConfigStreamResponse);
	rpc GetMeta (UpdateConfigStreamRequest) returns (MetaResponse);
	rpc SubscribeMeta (UpdateConfigStreamRequest) returns (stream MetaResponse);
	rpc Set (UpdateConfigSetRequest) returns (UpdateConfigSetResponse);
	rpc SetSome (UpdateConfigSetSomeRequest) returns (stream UpdateConfigSetSomeResponse);
	rpc Delete (UpdateConfigDeleteRequest) returns (UpdateConfigDeleteResponse);
	rpc DeleteSome (UpdateConfigDeleteSomeRequest) returns (stream UpdateConfigDeleteSomeResponse);
	rpc DeleteAll (UpdateConfigDeleteAllRequest) returns (stream UpdateConfigDeleteAllResponse);
	rpc GetAllBatched (UpdateConfigBatchedStreamRequest) returns (stream UpdateConfigBatchedStreamResponse);
	rpc SubscribeBatched (UpdateConfigBatchedStreamRequest) returns (stream UpdateConfigBatchedStreamResponse);
}
message UpdateSyncConfigRequest {
	// Key uniquely identifies a UpdateSyncConfig instance to retrieve.
	// This value must be populated.
	arista.workspace.v1.WorkspaceKey key = 1;
	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	google.protobuf.Timestamp time = 2;
};
message UpdateSyncConfigResponse {
	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	UpdateSyncConfig value = 1;
	// Time carries the (UTC) timestamp of the last-modification of the
	// UpdateSyncConfig instance in this response.
	google.protobuf.Timestamp time = 2;
};
message UpdateSyncConfigSomeRequest {
	repeated arista.workspace.v1.WorkspaceKey keys = 1;
	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	google.protobuf.Timestamp time = 2;
};
message UpdateSyncConfigSomeResponse {
	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	UpdateSyncConfig value = 1;
	// Error is an optional field.
	// It should be filled when there is an error in the GetSome process.
	google.protobuf.StringValue error = 2;
	google.protobuf.Timestamp time = 3;
};
message UpdateSyncConfigStreamRequest {
	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	repeated UpdateSyncConfig partial_eq_filter = 1;
	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   * end: Returns the state of each UpdateSyncConfig at end.
	//     * Each UpdateSyncConfig response is fully-specified (all fields set).
	//   * start: Returns the state of each UpdateSyncConfig at start, followed by updates until now.
	//     * Each UpdateSyncConfig response at start is fully-specified, but updates may be partial.
	//   * start and end: Returns the state of each UpdateSyncConfig at start, followed by updates
	//     until end.
	//     * Each UpdateSyncConfig response at start is fully-specified, but updates until end may
	//       be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	arista.time.TimeBounds time = 3;
};
message UpdateSyncConfigStreamResponse {
	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	UpdateSyncConfig value = 1;
	// Time holds the timestamp of this UpdateSyncConfig's last modification.
	google.protobuf.Timestamp time = 2;
	// Operation indicates how the UpdateSyncConfig value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	arista.subscriptions.Operation type = 3;
};
message UpdateSyncConfigBatchedStreamRequest {
	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	repeated UpdateSyncConfig partial_eq_filter = 1;
	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   * end: Returns the state of each UpdateSyncConfig at end.
	//     * Each UpdateSyncConfig response is fully-specified (all fields set).
	//   * start: Returns the state of each UpdateSyncConfig at start, followed by updates until now.
	//     * Each UpdateSyncConfig response at start is fully-specified, but updates may be partial.
	//   * start and end: Returns the state of each UpdateSyncConfig at start, followed by updates
	//     until end.
	//     * Each UpdateSyncConfig response at start is fully-specified, but updates until end may
	//       be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	arista.time.TimeBounds time = 3;
	// MaxMessages limits the maximum number of messages that can be contained in one batch.
	// MaxMessages is required to be at least 1.
	// The maximum number of messages in a batch is min(max_messages, INTERNAL_BATCH_LIMIT)
	// INTERNAL_BATCH_LIMIT is set based on the maximum message size.
	google.protobuf.UInt32Value max_messages = 4;
};
message UpdateSyncConfigBatchedStreamResponse {
	// Values are the values deemed relevant to the initiating request.
	// The length of this structure is guaranteed to be between (inclusive) 1 and
	// min(req.max_messages, INTERNAL_BATCH_LIMIT).
	repeated UpdateSyncConfigStreamResponse responses = 1;
};
message UpdateSyncConfigSetRequest {
	// UpdateSyncConfig carries the value to set into the datastore.
	// See the documentation on the UpdateSyncConfig struct for which fields are required.
	UpdateSyncConfig value = 1;
};
message UpdateSyncConfigSetResponse {
	// Value carries all the values given in the UpdateSyncConfigSetRequest as well
	// as any server-generated values.
	UpdateSyncConfig value = 1;
	// Time indicates the (UTC) timestamp at which the system recognizes the
	// creation. The only guarantees made about this timestamp are:
	//
	//    - it is after the time the request was received
	//    - a time-ranged query with StartTime==CreatedAt will include this instance.
	//
	google.protobuf.Timestamp time = 2;
};
message UpdateSyncConfigSetSomeRequest {
	// value contains a list of UpdateSyncConfig values to write.
	// It is possible to provide more values than can fit within either:
	//     - the maxiumum send size of the client
	//     - the maximum receive size of the server
	// If this error occurs you must reduce the number of values sent.
	// See gRPC "maximum message size" documentation for more information.
	repeated UpdateSyncConfig values = 1;
};
message UpdateSyncConfigSetSomeResponse {
	arista.workspace.v1.WorkspaceKey key = 1;
	string error = 2;
};
message UpdateSyncConfigDeleteRequest {
	// Key indicates which UpdateSyncConfig instance to remove.
	// This field must always be set.
	arista.workspace.v1.WorkspaceKey key = 1;
};
message UpdateSyncConfigDeleteResponse {
	// Key echoes back the key of the deleted UpdateSyncConfig instance.
	arista.workspace.v1.WorkspaceKey key = 1;
	// Time indicates the (UTC) timestamp at which the system recognizes the
	// deletion. The only guarantees made about this timestamp are:
	//
	//    - it is after the time the request was received
	//    - a time-ranged query with StartTime==DeletedAt will not include this instance.
	//
	google.protobuf.Timestamp time = 2;
};
message UpdateSyncConfigDeleteSomeRequest {
	// key contains a list of UpdateSyncConfig keys to delete
	repeated arista.workspace.v1.WorkspaceKey keys = 1;
};
// UpdateSyncConfigDeleteSomeResponse is only sent when there is an error.
message UpdateSyncConfigDeleteSomeResponse {
	arista.workspace.v1.WorkspaceKey key = 1;
	string error = 2;
};
message UpdateSyncConfigDeleteAllRequest {
	// PartialEqFilter provides a way to server-side filter a DeleteAll.
	// This requires all provided fields to be equal to the response.
	// A filtered DeleteAll will use GetAll with filter to find things to delete.
	repeated UpdateSyncConfig partial_eq_filter = 1;
};
message UpdateSyncConfigDeleteAllResponse {
	// This describes the class of delete error.
	// A DeleteAllResponse is only sent when there is an error.
	fmp.DeleteError type = 1;
	// This indicates the error message from the delete failure.
	google.protobuf.StringValue error = 2;
	// This is the key of the UpdateSyncConfig instance that failed to be deleted.
	arista.workspace.v1.WorkspaceKey key = 3;
	// Time indicates the (UTC) timestamp when the key was being deleted.
	google.protobuf.Timestamp time = 4;
};
service UpdateSyncConfigService {
	rpc GetOne (UpdateSyncConfigRequest) returns (UpdateSyncConfigResponse);
	rpc GetSome (UpdateSyncConfigSomeRequest) returns (stream UpdateSyncConfigSomeResponse);
	rpc GetAll (UpdateSyncConfigStreamRequest) returns (stream UpdateSyncConfigStreamResponse);
	rpc Subscribe (UpdateSyncConfigStreamRequest) returns (stream UpdateSyncConfigStreamResponse);
	rpc GetMeta (UpdateSyncConfigStreamRequest) returns (MetaResponse);
	rpc SubscribeMeta (UpdateSyncConfigStreamRequest) returns (stream MetaResponse);
	rpc Set (UpdateSyncConfigSetRequest) returns (UpdateSyncConfigSetResponse);
	rpc SetSome (UpdateSyncConfigSetSomeRequest) returns (stream UpdateSyncConfigSetSomeResponse);
	rpc Delete (UpdateSyncConfigDeleteRequest) returns (UpdateSyncConfigDeleteResponse);
	rpc DeleteSome (UpdateSyncConfigDeleteSomeRequest) returns (stream UpdateSyncConfigDeleteSomeResponse);
	rpc DeleteAll (UpdateSyncConfigDeleteAllRequest) returns (stream UpdateSyncConfigDeleteAllResponse);
	rpc GetAllBatched (UpdateSyncConfigBatchedStreamRequest) returns (stream UpdateSyncConfigBatchedStreamResponse);
	rpc SubscribeBatched (UpdateSyncConfigBatchedStreamRequest) returns (stream UpdateSyncConfigBatchedStreamResponse);
}
