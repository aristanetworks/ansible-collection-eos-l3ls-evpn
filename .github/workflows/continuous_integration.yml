---
name: "Collection code testing"
on:
  push:
  pull_request:

jobs:
  file-changes:
    runs-on: ubuntu-20.04
    outputs:
      eos_design: ${{ steps.filter.outputs.eos_design }}
      config_gen: ${{ steps.filter.outputs.config_gen }}
      plugins: ${{ steps.filter.outputs.plugins }}
      requirements: ${{ steps.filter.outputs.requirements }}
      docs: ${{ steps.filter.outputs.docs }}
    steps:
      - uses: actions/checkout@v2
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            eos_design:
              - 'ansible_collections/arista/avd/roles/eos_designs/*'
              - 'ansible_collections/arista/avd/roles/eos_designs/**/*'
              - '.github/workflows/continuous_integration.yml'
              - 'ansible_collections/arista/avd/molecule/*'
              - 'ansible_collections/arista/avd/molecule/**/*'
            config_gen:
              - 'ansible_collections/arista/avd/roles/eos_cli_config_gen/*'
              - 'ansible_collections/arista/avd/roles/eos_cli_config_gen/**/*'
              - '.github/workflows/continuous_integration.yml'
              - 'ansible_collections/arista/avd/molecule/*'
              - 'ansible_collections/arista/avd/molecule/**/*'
            plugins:
              - 'ansible_collections/arista/avd/plugins/filter/**'
              - 'ansible_collections/arista/avd/plugins/test/**'
            requirements:
              - 'ansible_collections/arista/avd/requirements.txt'
              - 'ansible_collections/arista/avd/requirements-dev.txt'
              - 'ansible_collections/arista/avd/meta/runtime.yml'
              - '.github/workflows/continuous_integration.yml'
            docs:
              - 'mkdocs.yml'
              - 'ansible_collections/arista/avd/docs/**'
              - 'ansible_collections/arista/avd/roles/**/*.md'
              - 'ansible_collections/arista/avd/**/*.md'
  # ----------------------------------- #
  # Pre Commit code validation
  # ----------------------------------- #
  pre_commit:
    name: Run pre-commit validation hooks
    runs-on: ubuntu-20.04
    container: avdteam/base:3.6-v1.0
    needs: file-changes
    if: needs.file-changes.outputs.eos_design == 'true' || needs.file-changes.outputs.config_gen == 'true' || needs.file-changes.outputs.requirements == 'true' || startsWith(github.ref, 'refs/heads/release')
    steps:
      - uses: actions/checkout@v2
      - uses: pre-commit/action@v2.0.2
  # ----------------------------------- #
  # Check Links  offline for dead target
  # ----------------------------------- #
  offline_link_check:
    name: 'Validate mkdoc content'
    runs-on: ubuntu-20.04
    needs: [ file-changes ]
    if: needs.file-changes.outputs.docs == 'true' || startsWith(github.ref, 'refs/tags/v') || startsWith(github.ref, 'refs/heads/release')
    steps:
      - uses: actions/checkout@master
      - name: 'start docker-compose stack'
        run: |
          cp development/docker-compose.yml .
          sed -i 's/ansible-avd\///g' docker-compose.yml
          docker-compose -f docker-compose.yml up -d webdoc_avd
          docker-compose -f docker-compose.yml ps
      - name: 'test connectivity to mkdoc server'
        run: |
          until docker exec webdoc_avd curl -s -I http://localhost:8000/ ; do sleep 2; done
      - name: check links for 404
        run: |
          docker run --network container:webdoc_avd raviqqe/muffet:1.5.7 http://127.0.0.1:8000/ -e ".*fonts.gstatic.com.*" -e ".*tools.ietf.org.*" -e ".*edit.*" -f --limit-redirections=3 --timeout=30
      - name: 'stop docker-compose stack'
        run: |
          docker-compose -f docker-compose.yml down
  # ----------------------------------- #
  # Test Requirements
  # ----------------------------------- #
  python_requirements:
    name: Test Python requirements installation
    runs-on: ubuntu-20.04
    needs: [ pre_commit ]
    if: needs.file-changes.outputs.requirements == 'true' || startsWith(github.ref, 'refs/heads/release') || startsWith(github.base_ref, 'refs/heads/release')
    strategy:
      fail-fast: true
      matrix:
        python_version: [ 3.6, 3.7, 3.8, 3.9 ]
    steps:
      - name: 'set environment variables'
        run: |
          echo "PY_COLORS=1" >> $GITHUB_ENV
          echo "ANSIBLE_FORCE_COLOR=1" >> $GITHUB_ENV
      - uses: actions/checkout@v2
      - name: Set up Python 3
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python_version }}
      - name: 'Install Python requirements'
        run: |
          pip install -r ansible_collections/arista/avd/requirements.txt
          pip install -r ansible_collections/arista/avd/requirements-dev.txt

  # ----------------------------------- #
  # EOS CLI CONFIG GEN MOLECULE
  # ----------------------------------- #
  molecule_eos_cli_config_gen:
    name: Validate eos_cli_config_gen
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: true
      matrix:
        avd_scenario: ['eos_cli_config_gen']
        ansible_version: ['ansible>=2.10,<2.11', 'ansible>=3.3']
    needs: [ pre_commit ]
    if: needs.file-changes.outputs.config_gen == 'true' || needs.file-changes.outputs.eos_design == 'true' || startsWith(github.ref, 'refs/heads/release')
    steps:
      - name: 'set environment variables'
        run: |
          echo "PY_COLORS=1" >> $GITHUB_ENV
          echo "ANSIBLE_FORCE_COLOR=1" >> $GITHUB_ENV
      - uses: actions/checkout@v2
      - name: Run molecule action
        uses: arista-netdevops-community/action-molecule-avd@v1.1
        with:
          molecule_parentdir: 'ansible_collections/arista/avd'
          molecule_command: 'test'
          molecule_args: '--scenario-name ${{ matrix.avd_scenario }}'
          pip_file: ansible_collections/arista/avd/requirements.txt
          ansible: ${{ matrix.ansible_version }}
          check_git: true
          check_git_enforced: false
      - uses: actions/upload-artifact@v2
        with:
          name: molecule-${{ matrix.avd_scenario }}-artifacts
          path: ${PWD}/ansible_collections/arista/avd/molecule/${{ matrix.avd_scenario }}
  # ----------------------------------- #
  # EOS Design MOLECULE
  # ----------------------------------- #
  molecule_eos_designs:
    name: Validate eos_designs
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: true
      matrix:
        avd_scenario:
          - 'evpn_underlay_ebgp_overlay_ebgp'
          - 'evpn_underlay_ospf_overlay_ebgp'
          - 'evpn_underlay_isis_overlay_ibgp'
          - 'eos_designs-twodc-5stage-clos'
          - 'eos_l3ls_evpn_deprecation_test'
        ansible_version: ['ansible>=2.10,<2.11', 'ansible>=3.3']
    needs: [ molecule_eos_cli_config_gen ]
    if: needs.molecule_eos_cli_config_gen.status != 'failed' && (needs.file-changes.outputs.eos_design == 'true' || needs.file-changes.outputs.config_gen == 'true' || startsWith(github.ref, 'refs/heads/release'))
    steps:
      - name: 'set environment variables'
        run: |
          echo "PY_COLORS=1" >> $GITHUB_ENV
          echo "ANSIBLE_FORCE_COLOR=1" >> $GITHUB_ENV
      - uses: actions/checkout@v2
      - name: Run molecule action
        uses: arista-netdevops-community/action-molecule-avd@v1.1
        with:
          molecule_parentdir: 'ansible_collections/arista/avd'
          molecule_command: 'test'
          molecule_args: '--scenario-name ${{ matrix.avd_scenario }}'
          pip_file: ansible_collections/arista/avd/requirements.txt
          ansible: ${{ matrix.ansible_version }}
          check_git: true
          check_git_enforced: false
      - uses: actions/upload-artifact@v2
        with:
          name: molecule-${{ matrix.avd_scenario }}-artifacts
          path: ${PWD}/ansible_collections/arista/avd/molecule/${{ matrix.avd_scenario }}
  # ----------------------------------- #
  # Ansible tests
  # ----------------------------------- #
  ansible_test:
    name: Run ansible-test validation
    runs-on: ubuntu-16.04
    needs: [ molecule_eos_designs ]
    if: needs.molecule_eos_designs.status != 'failed' && (needs.file-changes.outputs.plugins == 'true' || startsWith(github.ref, 'refs/heads/release') || startsWith(github.base_ref, 'refs/heads/release'))
    strategy:
      fail-fast: true
      matrix:
        python_version: [ 3.6 ]
    steps:
      - name: 'set environment variables'
        run: |
          echo "PY_COLORS=1" >> $GITHUB_ENV
          echo "ANSIBLE_FORCE_COLOR=1" >> $GITHUB_ENV
      - uses: actions/checkout@v2
      - name: Set up Python 3
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python_version }}
      - name: 'Install Python requirements'
        run: make install-requirements
      - name: 'ansible-test linting'
        run: |
          cd ansible_collections/arista/avd/
          ansible-test sanity  -v --requirements --docker --skip-test yamllint --exclude docs/

  galaxy_importer:
    name: Test galaxy-importer
    runs-on: ubuntu-latest
    container: avdteam/base:3.6-v2.0
    needs: [ molecule_eos_designs ]
    if: needs.molecule_eos_designs.status != 'failed' && (needs.file-changes.outputs.plugins == 'true' || startsWith(github.ref, 'refs/heads/release') || startsWith(github.base_ref, 'refs/heads/release'))
    env:
      PY_COLORS: 1 # allows molecule colors to be passed to GitHub Actions
      ANSIBLE_FORCE_COLOR: 1 # allows ansible colors to be passed to GitHub Actions
    steps:
      - name: 'set environment variables'
        run: |
          echo "PY_COLORS=1" >> $GITHUB_ENV
          echo "ANSIBLE_FORCE_COLOR=1" >> $GITHUB_ENV
      - uses: actions/checkout@v2
      - name: install requirements
        run: make install-requirements
      - name: 'build ansible package'
        run: make collection-build
      - name: 'run ansible-importer checks'
        run: python -m galaxy_importer.main *.tar.gz
      - uses: actions/upload-artifact@v2
        with:
          name: importer-logs
          path: ./importer_result.json

  # ----------------------------------- #
  # Rebuild docker image
  # ----------------------------------- #
  docker_build:
    name: Webhook to Docker Hub to build image
    runs-on: ubuntu-18.04
    container: avdteam/base:3.6-v1.0
    needs: [python_requirements]
    if: needs.file-changes.outputs.requirements == 'true' && (startsWith(github.ref, 'refs/heads/releases') || startsWith(github.ref, 'refs/heads/devel'))
    steps:
      - uses: actions/checkout@master
      - name: 'Send Webhook to docker hub'
        env:
          DOCKER_WEBHOOK: ${{secrets.DOCKER_WEBHOOK}}
        run: |
          curl  -H "Content-Type: application/json" --data '{}' -X POST $DOCKER_WEBHOOK
  # ----------------------------------- #
  # Generate an ansible-galaxy package
  # ----------------------------------- #
  build_package:
    name: Build collection package
    runs-on: ubuntu-latest
    container: avdteam/base:3.6-v2.0
    needs: [galaxy_importer, ansible_test]
    if: startsWith(github.ref, 'refs/heads/release') || startsWith(github.base_ref, 'refs/heads/release')
    steps:
      - name: 'set environment variables'
        run: |
          echo "PY_COLORS=1" >> $GITHUB_ENV
          echo "ANSIBLE_FORCE_COLOR=1" >> $GITHUB_ENV
      - uses: actions/checkout@v2
      - name: install requirements
        run: make install-requirements
      - name: 'build ansible package'
        run: make collection-build
      - uses: actions/upload-artifact@v2
        with:
          name: ansible-package
          path: ./*.tar.gz
