name: "Collection code testing"

"on": pull_request

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref }}
  cancel-in-progress: true

env:
  # Set -vvv is ACTIONS_STEP_DEBUG is set
  # Apparently it is set in secrets when running with debug
  ANSIBLE_VERBOSITY: ${{ secrets.ACTIONS_STEP_DEBUG && 3 || 0 }}
  AVD_NEVER_RUN_FROM_SOURCE: 1
  PY_COLORS: 1 # allows molecule colors to be passed to GitHub Actions
  ANSIBLE_FORCE_COLOR: 1 # allows ansible colors to be passed to GitHub Actions

jobs:
  file-changes:
    runs-on: ubuntu-latest
    outputs:
      eos_design: ${{ steps.filter.outputs.eos_design }}
      config_gen: ${{ steps.filter.outputs.config_gen }}
      cloudvision: ${{ steps.filter.outputs.cloudvision }}
      dhcp: ${{ steps.filter.outputs.dhcp }}
      plugins: ${{ steps.filter.outputs.plugins }}
      requirements: ${{ steps.filter.outputs.requirements }}
      docs: ${{ steps.filter.outputs.docs }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            eos_design:
              - 'ansible_collections/arista/avd/roles/eos_designs/*'
              - 'ansible_collections/arista/avd/roles/eos_designs/**/*'
              - '.github/workflows/pull-request-management.yml'
              - 'ansible_collections/arista/avd/molecule/*'
              - 'ansible_collections/arista/avd/molecule/**/*'
              - 'python-avd/pyavd/_eos_designs/*'
              - 'python-avd/pyavd/_eos_designs/**/*'
              - '!ansible_collections/arista/avd/roles/eos_config_deploy_cvp/*'
              - '!ansible_collections/arista/avd/roles/eos_config_deploy_cvp/**/*'
              - '!ansible_collections/arista/avd/molecule/cvp_configlet_upload/*'
              - '!ansible_collections/arista/avd/molecule/cvp_configlet_upload/**/*'
            config_gen:
              - 'ansible_collections/arista/avd/roles/eos_cli_config_gen/*'
              - 'ansible_collections/arista/avd/roles/eos_cli_config_gen/**/*'
              - '.github/workflows/pull-request-management.yml'
              - 'ansible_collections/arista/avd/molecule/eos_cli_config_gen*/*'
              - 'ansible_collections/arista/avd/molecule/eos_cli_config_gen*/**/*'
              - 'python-avd/pyavd/_eos_cli_config_gen/*'
              - 'python-avd/pyavd/_eos_cli_config_gen/**/*'
            validate_state:
              - 'ansible_collections/arista/avd/roles/eos_validate_state/*'
              - 'ansible_collections/arista/avd/roles/eos_validate_state/**/*'
            cloudvision:
              - 'ansible_collections/arista/avd/roles/eos_config_deploy_cvp/*'
              - 'ansible_collections/arista/avd/roles/eos_config_deploy_cvp/**/*'
              - 'ansible_collections/arista/avd/molecule/cvp_configlet_upload/*'
              - 'ansible_collections/arista/avd/molecule/cvp_configlet_upload/**/*'
              - '.github/workflows/pull-request-management.yml'
            dhcp:
              - 'ansible_collections/arista/avd/roles/dhcp_provisioner/*'
              - 'ansible_collections/arista/avd/roles/dhcp_provisioner/**/*'
              - '.github/workflows/pull-request-management.yml'
            plugins:
              - 'ansible_collections/arista/avd/plugins/filter/**'
              - 'ansible_collections/arista/avd/plugins/test/**'
            requirements:
              - 'ansible_collections/arista/avd/requirements.txt'
              - 'ansible_collections/arista/avd/requirements-dev.txt'
              - 'ansible_collections/arista/avd/meta/runtime.yml'
              - '.github/requirements-ci.txt'
              - '.github/workflows/pull-request-management.yml'
            docs:
              - '.github/workflows/pull-request-management.yml'
              - 'mkdocs.yml'
              - 'ansible_collections/arista/avd/docs/**'
              - 'ansible_collections/arista/avd/roles/**/*.md'
              - 'ansible_collections/arista/avd/**/*.md'
              - 'ansible_collections/arista/avd/README.md'
              - 'ansible_collections/arista/avd/**/*.schema.yml'
            pyavd:
              - 'python_avd/*'
              - 'python_avd/**/*'
  container-job:
    # Containers must run in Linux based operating systems
    runs-on: ubuntu-latest
    # strategy:
    #   matrix:
    #     python-version: [3.12] # Python versions
    # Docker Hub image that `container-job` executes in
    container: 
      image: ubuntu:latest
      options: --cpus 1

    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Set up Docker
        run: |
          apt-get update
          apt-get install -y docker.io
      
      - id: string
        uses: vishalmamidi/lowercase-action@v1
        with:
          string: ${{ github.repository_owner }}
        
      - name: log lowercase repo name
        run: echo ${{ steps.string.outputs.lowercase }}

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ steps.string.outputs.lowercase }}
          password: ${{ secrets.GITHUB_TOKEN }}
        env:
          DOCKER_CLI_EXPERIMENTAL: enabled

          # Step 4: Dynamically create Dockerfile
      - name: Create Dockerfile dynamically
        run: |
          echo "Creating Dockerfile..."
          cat <<EOF > Dockerfile
          FROM ubuntu:latest

          # Install Git to clone the repo
          RUN apt-get update && apt-get install -y git parallel make python3-pip python3.12

          # Install UV
          RUN pip install uv --break-system-packages

          # Install python versions
          RUN uv python install 3.10 3.11 3.12 3.13


          # Clone the repository in the Docker image
          RUN git clone https://github.com/${{ github.repository }}

          WORKDIR /avd

          # Create virtual env
          RUN uv venv --python 3.10 UV3.10  && \
              UV3.10/bin/python -m ensurepip --upgrade 
          RUN uv venv --python 3.11 UV3.11 && \
              UV3.11/bin/python -m ensurepip --upgrade 
          RUN uv venv --python 3.12 UV3.12 && \
              UV3.12/bin/python -m ensurepip --upgrade 
          RUN uv venv --python 3.13 UV3.13 && \
              UV3.13/bin/python -m ensurepip --upgrade 

          # Activate and install requirements in parallel
          RUN ( \
              . UV3.10/bin/activate && UV3.10/bin/python -m pip install mock pytest pytest-mock pytest-xdist pyyaml "ansible-core<2.19.0" -r .github/requirements-ci.txt -r ansible_collections/arista/avd/requirements-dev.txt --upgrade \
          ) & pid1=$! && \
          ( \
              . UV3.11/bin/activate && UV3.11/bin/python -m pip install mock pytest pytest-mock pytest-xdist pyyaml "ansible-core<2.19.0" -r .github/requirements-ci.txt -r ansible_collections/arista/avd/requirements-dev.txt --upgrade \
          ) & pid2=$! && \
          ( \
              . UV3.12/bin/activate && UV3.12/bin/python -m pip install mock pytest pytest-mock pytest-xdist pyyaml "ansible-core<2.19.0" -r .github/requirements-ci.txt -r ansible_collections/arista/avd/requirements-dev.txt --upgrade \
          ) & pid3=$! && \
          ( \
              . UV3.13/bin/activate && UV3.13/bin/python -m pip install mock pytest pytest-mock pytest-xdist pyyaml "ansible-core<2.19.0" -r .github/requirements-ci.txt -r ansible_collections/arista/avd/requirements-dev.txt --upgrade \
          ) & pid4=$! && \
          wait $pid1 || exit 1 && \
          wait $pid2 || exit 1 && \
          wait $pid3 || exit 1 && \
          wait $pid4 || exit 1

          # # Activate virtual env
          # RUN . UV3.10/bin/activate && \
          #   UV3.10/bin/python -m pip install mock pytest pytest-mock pytest-xdist pyyaml "ansible-core<2.19.0" -r .github/requirements-ci.txt -r ansible_collections/arista/avd/requirements-dev.txt --upgrade
          
          # # Activate virtual env
          # RUN . UV3.11/bin/activate && \
          #   UV3.11/bin/python -m pip install mock pytest pytest-mock pytest-xdist pyyaml "ansible-core<2.19.0" -r .github/requirements-ci.txt -r ansible_collections/arista/avd/requirements-dev.txt --upgrade
          
          # Activate virtual env
          # RUN . UV3.12/bin/activate && \
          #   UV3.12/bin/python -m pip install mock pytest pytest-mock pytest-xdist pyyaml "ansible-core<2.19.0" -r .github/requirements-ci.txt -r ansible_collections/arista/avd/requirements-dev.txt --upgrade
          
          # RUN parallel --link --tag 'bash -c' ::: \
          #   ". UV3.12/bin/activate && UV3.12/bin/python -m pip install mock pytest pytest-mock pytest-xdist pyyaml 'ansible-core<2.19.0' -r .github/requirements-ci.txt -r ansible_collections/arista/avd/requirements-dev.txt --upgrade" \
          #   ". UV3.13/bin/activate && UV3.13/bin/python -m pip install mock pytest pytest-mock pytest-xdist pyyaml 'ansible-core<2.19.0' -r .github/requirements-ci.txt -r ansible_collections/arista/avd/requirements-dev.txt --upgrade"

          # # Activate virtual env
          # RUN . UV3.13/bin/activate && \
          #   UV3.13/bin/python -m pip install mock pytest pytest-mock pytest-xdist pyyaml "ansible-core<2.19.0" -r .github/requirements-ci.txt -r ansible_collections/arista/avd/requirements-dev.txt --upgrade

          CMD ["python"]
          EOF
          echo "Dockerfile created successfully."
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker Image
        run: |
          docker buildx build -t ghcr.io/${{ steps.string.outputs.lowercase }}/avd/python:0.0.1 .

      - name: Push Docker Image
        run: |
          docker push ghcr.io/${{ steps.string.outputs.lowercase }}/avd/python:0.0.1

  # reuse_container_image:
  #   name: Reuse image with ghcr credentials
  #   runs-on: ubuntu-latest
  #   needs: [container-job]
  #   container:
  #     image: ghcr.io/shivani-gslab/avd/python:0.0.1
  #     credentials:
  #       username: ${{ github.repository_owner }}
  #       password: ${{ secrets.GITHUB_TOKEN }}
  #   steps:
  #     - name: Check out repository code
  #       uses: actions/checkout@v4
  #     - name: run tests
  #       shell: bash
  #       run: |
  #         pwd
  #         ls -al
  #         ls -l /__w/avd/
  #         source UV3.12/bin/activate
  #         cd ansible_collections/arista/avd
  #         ansible-test units -vv

  reuse-ghcr-image:
    name: reuse first job
    runs-on: ubuntu-latest
    needs: [ container-job ]
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      # - name: Set up Docker
      #   run: |
      #     sudo apt-get update
      #     sudo apt-get install -y docker.io
      
      - id: string
        uses: vishalmamidi/lowercase-action@v1
        with:
          string: ${{ github.repository_owner }}
        
      - name: log lowercase repo name
        run: echo ${{ steps.string.outputs.lowercase }}

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ steps.string.outputs.lowercase }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # - name: Pull docker image from ghcr
      #   run: |
      #     docker pull ghcr.io/${{ steps.string.outputs.lowercase }}/avd/python:3.12

      - name: Run Docker Container
        run: |
          docker run -dit --name avd-python-container ghcr.io/${{ steps.string.outputs.lowercase }}/avd/python:0.0.1 bash
        
      - name: Execute Ansible unit tests
        run: |
          docker exec avd-python-container bash -c "source UV3.12/bin/activate && cd ansible_collections/arista/avd && ansible-test units -vv"
      
  #     - name: Execute Ansible integration tests
  #       run: |
  #         docker exec avd-python-container bash -c "source UV3.12/bin/activate && cd ansible_collections/arista/avd && ansible-test integration -vv"
  #         docker exec avd-python-container bash -c "source UV3.13/bin/activate && cd ansible_collections/arista/avd && ansible-test integration -vv"
      
  #     - name: Execute Ansible sanity tests
  #       run: |
  #         docker exec avd-python-container bash -c "source UV3.12/bin/activate && cd ansible_collections/arista/avd && ansible-test sanity --color yes -v"
  #         docker exec avd-python-container bash -c "source UV3.13/bin/activate && cd ansible_collections/arista/avd && ansible-test sanity --color yes -v"

  #     # - name: Execute Ansible lint tests
  #     #   run: |
  #     #     docker exec avd-python-container bash -c "cd ansible_collections/arista/avd && ansible-test integration -vv"

  #     - name: Stop and Remove Docker Container
  #       run: |
  #         docker stop avd-python-container
  #         docker rm avd-python-container

